///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Const KEYBOARDBUTTONS As Long := 41//40//39

Const 	KEYBOARD_LATIN		As Long := 1
Const 	KEYBOARD_CYRILLIC	As Long	:= 2
Const	KEYBOARD_GREEK		As Long	:= 3
Const	KEYBOARD_NORWEGIAN	As Long	:= 4
	
Public GraphicClass BaseKeyboard Inherits BaseGraphicWindow
WithAttributes {hiddeninide}
	Friend KeyboardButton
	Friend KeyboardCell
	
	// LastError
	Global Const KEYBOARD_IS_ALREADY_OPEN 	 As Long := 1000
	Global Const EDIT_WAS_CANCELED  		 As Long := 1001
	Global Const KEYBOARD_HAS_BEEN_HIDDEN    As Long := 1002	
	
	Protected Var TextBuffer As Text [256] := ""
	
	Protected Var DisplaySize					As Long := 0
	
	Protected Var MyButton[KEYBOARDBUTTONS]		As KeyboardButton
	Protected Var MyButtonCell					As KeyboardCell
	Protected Var BOffsetPosX[KEYBOARDBUTTONS]	As Long
	Protected Var SecBOffsetPosX[KEYBOARDBUTTONS]	As Long
	Protected Var IndexButtonOnDown 			As Long  	//index stlačeného tlačítka
	Protected Var OldIndexButtonOnDown			As Long 	// předchozí index stlačeného tlačítka
	Protected Var BPosYLine1 					As Long
	Protected Var BPosYLine2 					As Long
	Protected Var BPosYLine3 					As Long
	Protected Var BPosYLine4 					As Long
	
	Protected Var NumberButtonRU				As Long := 39
	Protected Var NumberButtonEN				As Long := 35
	Protected Var KeyboardsNumberButtons 		As Long := 0
	
	Protected Var KeyboardButtonUp				As AddressOf _Picture := Nothing
	Protected Var KeyboardButtonDown			As AddressOf _Picture := Nothing
	Protected Var ButtonCloseUp					As AddressOf _Picture := Nothing
	Protected Var ButtonCloseDown				As AddressOf _Picture := Nothing
	Protected Var ButtonCloseActual				As AddressOf _Picture := Nothing
	Protected Var KeyboardButtonActive			As AddressOf _Picture := Nothing
	Protected Var KeyboardButtonEnterUp			As AddressOf _Picture := Nothing
	Protected Var KeyboardButtonEnterDown		As AddressOf _Picture := Nothing
	Protected Var KeyboardButtonSpaceUp			As AddressOf _Picture := Nothing
	Protected Var KeyboardButtonSpaceDown		As AddressOf _Picture := Nothing
	Protected Var KeyboardButtonSwitchUp		As AddressOf _Picture := Nothing
	Protected Var KeyboardButtonSwitchDown		As AddressOf _Picture := Nothing
	Protected Var KeyboardButtonSwitchUpLeft	As AddressOf _Picture := Nothing
	Protected Var KeyboardButtonSwitchDownLeft	As AddressOf _Picture := Nothing
	Protected Var KeyboardButtonSwitch1UpActual	As AddressOf _Picture := Nothing
	Protected Var KeyboardButtonSwitch1DownActual As AddressOf _Picture := Nothing
	Protected Var KeyboardButtonSwitch2UpActual	As AddressOf _Picture := Nothing
	Protected Var KeyboardButtonSwitch2DownActual As AddressOf _Picture := Nothing
			
	Protected Var KeyboardButtonBackspRShiftDown As AddressOf _Picture := Nothing
	Protected Var KeyboardButtonBackspRShiftUp	As AddressOf _Picture := Nothing
	
	Protected Var KeyboardButtonBackspRShiftDownRU	As AddressOf _Picture := Nothing
	Protected Var KeyboardButtonBackspRShiftUpRU	As AddressOf _Picture := Nothing
	Protected Var KeyboardButtonDownRU				As AddressOf _Picture := Nothing
	Protected Var KeyboardButtonUpRU				As AddressOf _Picture := Nothing
	Protected Var KeyboardButtonEnterDownRU			As AddressOf _Picture := Nothing
	Protected Var KeyboardButtonEnterUpRU			As AddressOf _Picture := Nothing
	
	Protected Var ButtonUp							As AddressOf _Picture := Nothing
	Protected Var ButtonDown						As AddressOf _Picture := Nothing
	Protected Var ButtonEnterUp						As AddressOf _Picture := Nothing
	Protected Var ButtonEnterDown					As AddressOf _Picture := Nothing
	Protected Var ButtonBackSpRShiftUp				As AddressOf _Picture := Nothing
	Protected Var ButtonBackSpRShiftDown			As AddressOf _Picture := Nothing
			
	Protected Var KeyboardNextButtonNonActive	As AddressOf _Picture := Nothing
	Protected Var KeyboardNextButtonActive		As AddressOf _Picture := Nothing
	Protected Var KeyboardCellSymb6To10			As AddressOf _Picture := Nothing
	Protected Var KeyboardCellSymb5				As AddressOf _Picture := Nothing
	Protected Var KeyboardCellSymb4				As AddressOf _Picture := Nothing
	Protected Var KeyboardCellSymb3				As AddressOf _Picture := Nothing
	Protected Var KeyboardCellSymb2				As AddressOf _Picture := Nothing
	Protected Var KeyboardCellSymb1				As AddressOf _Picture := Nothing
	Protected Var KeyboardCellIndic 			As AddressOf _Picture := Nothing
	Protected Var DialogWindow					As AddressOf _Picture := Nothing
	Protected Var DialogWindowEye				As AddressOf _Picture := Nothing
	Protected Var EyeIcon						As AddressOf _Picture := Nothing
	Protected Var ButtonEyeUp					As AddressOf _Picture := Nothing
	Protected Var ButtonEyeDown					As AddressOf _Picture := Nothing
	
	Protected Var KeyboardButtonBackspace		As AddressOf _Picture := Nothing
	Protected Var KeyboardButtonShift			As AddressOf _Picture := Nothing
	Protected Var KeyboardButtonLanguage		As AddressOf _Picture := Nothing
	
	Protected Var KeyboardBackgroundWidth		As Long := 0
	Protected Var KeyboardBackgroundHeight		As Long := 0
	Protected Var DialogWindowPosY 				As Long := 0
	Protected Var DialogWindowRectanglePosY 	As Long := 0
	
	Protected Var BClosePosX					As Long := 0
	Protected Var BClosePosY					As Long := 0
	
	Protected Var KeyBoardFont					As AddressOf _Font	:= Nothing
	Protected Var ShiftFont						As AddressOf _Font	:= Nothing
	Protected Var ButtonTextPosXUp 				As Long := 0			//posunutí textu tlačítka Up od středu
	Protected Var ButtonTextPosYUp 				As Long := 0			//posunutí textu tlačítka Up od středu  
	Protected Var ButtonTextPosXDown 			As Long := 0 		//posunutí textu tlačítka Down od středu 
	Protected Var ButtonTextPosYDown 			As Long := 0		//posunutí textu tlačítka Down od středu 
	Protected Var ShiftButtonTextPosYUp			As Long := 0		//posunutí textu tlačítka up od středu pro tlačítko shift
	Protected Var ShiftButtonTextPosYDown		As Long := 0		//posunutí textu tlačítka down od středu pro tlačítko shift
	Protected Var ShiftButtPosX					As Long := 0		//posunutí obrázku tlačítka od středu pro tlačítko shift
	
	Protected Var DialogFont					As AddressOf _Font	:= Nothing
	Protected Var DialogText 					As Text [500]		// text, který se zobrazuje v dialogu
	Protected Var MyDialogText					As Text [500]      	// celkový text (znaky ci *)
	Protected Var TextDial 						As Text [500]		// vypisovaný text před kurzorem
	Protected Var MDT							As Text [500]		// celkovy text se spravnymi znaky
	Protected Var MyPromtText					As AddressOf Text 	// text, který se objeví, když je MyDialogText nulový
	Protected Var DialogTextPosX				As Long := 0
	Protected Var DialogTextPosY				As Long := 0
	Protected Var DialogTextBoxWidth			As Long := 0
	Protected Var MyDialogTextBoxWidth			As Long := 0
	Protected Var DialogTextBoxHeight			As Long := 0
	Protected Var ButtonPosXOffset				As Long := 0
	Protected Var ButtonPosYOffset				As Long := 0
	Protected Var ButtonCellPosXOffset			As Long := 0
	Protected Var ButtonCellPosYOffset			As Long := 0
	
	Protected Var ButtonTextColor				As Long := 0
	Protected Var ButtonTextColorActive			As Long := 0
	Protected Var ButtonDialogTextColor			As Long := 0
	Protected Var PromtTextColor				As Long := 0
	Protected Var RectangleColor				As Long := 0
	Protected Var CellShadowSize				As Long := 0
	
	Protected Var ButtonNumberFirstLine			As Long := 0 //11
	Protected Var ButtonNumberSecondLine		As Long := 0 //10
	Protected Var ButtonNumberThLine			As Long := 0 //11
	Protected Var ButtonNumberFourLine			As Long := 0 //3
	Protected Var ButtonNumberFirstLineRU		As Long := 0 //12
	Protected Var ButtonNumberSecondLineRU		As Long := 0 //12
	Protected Var ButtonNumberThLineRU			As Long := 0 //12
	Protected Var ButtonNumberFourLineRU		As Long := 0 //3
	Protected Var NumberLineButtons				As Long := 0 //4
	Protected Var NumFirstLine					As Long := 0 
	Protected Var NumSecondLine					As Long := 0 
	Protected Var NumThirdLine					As Long := 0 
	Protected Var NumFourLine					As Long := 0 
	
	Protected Var IndicMovePosY					As Long := 0 //6
	Protected Var CellMovePosY					As Long := 0 //12
	
	Protected Var KurzorX1						As Long := 0 
	Protected Var KurzorY1						As Long := 0 
	Protected Var KurzorX2						As Long := 0 
	Protected Var KurzorY2						As Long := 0 
	Protected Var KurzorColor					As Long := 0
	Protected Var MumKursorPos 					As Long := 0
	Protected Var OldKurzorX1					As Long := 0
	Protected Var NumDontDrawText				As Long := 0 //počet číslic nevypsané části textu
	
	Protected Var CreateFirstB					As Boolean // true = v klávesnici jsou písmena / false = v klávesnici jsou znaky
	Protected Var LargeB						As Boolean // true = v klávesnici jsou velká písmena / false = v klávesnici jsou malá písmena
	Protected Var KurzorShiftPos 				As Boolean
	Protected Var ButtonCloseOndown				As Boolean
	Protected Var LeftDialogText				As Boolean //zobrazovaný text levý či  pravý
	Protected Var ButtCellOpen					As Boolean
		
	Protected Var IndexShift1						As Long := 0
	Protected Var IndexShift2						As Long := 0
	Protected Var IndexSwitch1						As Long := 0
	Protected Var IndexSwitch2						As Long := 0
	Protected Var IndexEnter						As Long := 0
	Protected Var IndexBackspace					As Long := 0
	Protected Var IndexLanguage						As Long := 0
	Protected Var IndexCustom						As Long := 0
	
	Protected Var MyTextABC						As AddressOf Text
	Protected Var MyTextABCSmall				As AddressOf Text
					
	Protected Var FirstDialogText  				As Text [500]
	Protected Var IsClose						As Boolean := True
	Protected Var IsPasswordmask				As Boolean := False
	Protected Var PasswordText					As Text [500]
	Protected Var TouchEnter					As Boolean
	Protected Var LastError						As Long
	
	Protected Var		MaxButtons							As Long
	
	Protected Var ObjectID						As Long
	Public Event OnEnter As Process (keyboardtext As Text, id As Long)
	Public Event OnCancel As Process (id As Long)


	Protected Var ButtonEyeActual As AddressOf _Picture
	Protected Var BEyeColorOpacity As Byte
	Protected Var BEyeColor As Long
	Protected Var ButtonEyeOndown As Boolean := True
	Protected Var ButtonEyeOn 	As Boolean := False
	Protected Var BEyeIconColor As Long
	Protected Var BEyeIconColorOpacity As Byte
	
	Protected Var ShowLanguageButton As Boolean := False
	Protected Var ShowCustomButton As Boolean := False
	Protected Var CustomButtonText As AddressOf Text
	Protected Var CustomButtonTextBuffer As Text[10]
		
	Protected Function OnChar(keyboardchar  As Char, controlkey As Long)
		Var Code As Text[1]
		
		Select controlkey
		Case &H00000100			// Delete
			Delete()
			Return
		Case &H00000200			//left arrow
			LeftShiftKurzor()
			Return
		Case &H00000400			//right arrow
			RightShiftKurzor()
			Return
		Case &H00000010			//home
			LeftDialogText:=True
			LengthScrText()
			MumKursorPos := 1
			KurzorX1 := DialogTextPosX
			TextDial := ""
			Return
		Case &H00000020			//end
			LeftDialogText:=False
			LengthScrText()
			MumKursorPos := GetTextActualLength(MyDialogText)+1
			KurzorX1 := DialogTextPosX + DialogFont.CalculateTextWidth(DialogText)
			TextDial := DialogText
			Return
		End Select
					
		Select keyboardchar
		Case &H08			// Backspace
			Backspace()
			Return
		Case &H0A, &H0D		// Enter
			Enter()
			Return
		Case &H1B			// Escape
			CloseWindow()
			Return
		Case 0
			Return
		Case Else
			SetTextActualLength (Code, 1)
			Code[1] := keyboardchar
			WriteSymbol(Code)
		End Select

	End Function
	
	Protected Function LeftShiftKurzor()
		Var NumSymbol As Long	
		If MumKursorPos >= 1 Then 
			NumSymbol := GetTextActualLength(TextDial)	
			If NumSymbol <= MumKursorPos Then
				If NumSymbol >= 1 Then
					SetTextActualLength(TextDial,NumSymbol-1)
					MumKursorPos -= 1	
					LengthScrText()	
					KurzorX1 := DialogTextPosX + DialogFont.CalculateTextWidth(TextDial)
					Redraw(KurzorX1,KurzorY1,KurzorX1 + DialogFont.CalculateTextWidth("WW"),KurzorY2)	
				Else
					LeftDialogText:=True
					LengthScrText()
					MumKursorPos := 1
					KurzorX1 := DialogTextPosX
					TextDial := ""	
				End If 
			End If
		End If		
	End Function
	
	Protected Function RightShiftKurzor()
		Var NumSymbol 	As Long
		Var symbol 		As Text [1]
		
		If MumKursorPos >= 1 Then
			NumSymbol := GetTextActualLength(TextDial)
			If NumSymbol < GetTextActualLength(DialogText) Then
				GetTextMiddle(DialogText,MumKursorPos,1,symbol)
				ConcatenateText(TextDial,TextDial,symbol)	
				MumKursorPos += 1
				LengthScrText()	
				KurzorX1 := DialogTextPosX + DialogFont.CalculateTextWidth(TextDial)
				Redraw(KurzorX1,KurzorY1,KurzorX1 + DialogFont.CalculateTextWidth("WW"),KurzorY2)	
			Else
				LeftDialogText:=False
				LengthScrText()
				MumKursorPos := GetTextActualLength(MyDialogText)+1
				KurzorX1 := DialogTextPosX + DialogFont.CalculateTextWidth(DialogText)
				TextDial := DialogText			
			End If	
		End If
	End Function
		
	Protected Function OnSetLanguage(newlanguageid As Long)

		SetIndexByLanguage(newlanguageid)
//		LockRedraw()
//		CreateButByGetLanguag()
//		UnlockRedraw()
//		Redraw()
	End Function
	
	Protected Function SetFirstText(DialogTxt As Text)
	Var n As Long
	Var i As Long
		
		Me.SetFocus()
		
//		TouchEnter := False
//		ButtCellOpen := False
//		CreateFirstB := False
//
//		LargeB := True
//		CreateButByGetLanguag()
		
		FirstDialogText := DialogTxt
		
		If IsPasswordmask And Not ButtonEyeOn Then
			n := GetTextActualLength(DialogTxt)
			PasswordText := ""
			If n > 0 Then		
				For i := 1 To n
					ConcatenateText(PasswordText,"*",PasswordText)
				End For
			End If
			MyDialogText := PasswordText
			MDT := DialogTxt
		Else
			MyDialogText := DialogTxt
			MDT := DialogTxt
		End If
			
		LeftDialogText := False
		LengthScrText()	
		TextDial := DialogText

		WriteFSymbol(Nothing)
	End Function

	Protected Var KeyboardType	As Long

	Protected Function SetNextKeyboardType()
		Select KeyboardType
		Case KEYBOARD_LATIN
			SetIndexByLanguage(GetLanguage())
		Case KEYBOARD_CYRILLIC,KEYBOARD_GREEK,KEYBOARD_NORWEGIAN
			SetKeyboardType(KEYBOARD_LATIN)
		End Select
//		If KeyboardType >= KEYBOARD_NORWEGIAN Then
//			SetKeyboardType(1)
//		Else
//			SetKeyboardType(KeyboardType+1)
//		End If			
	End Function
	
	Protected Function SetIndexByLanguage(newlanguageid As Long)	
		Select newlanguageid
		Case 	_LANGUAGE_RUSSIAN,
				_LANGUAGE_RUSSIAN_REPUBLIC_OF_MOLDOVA,
				_LANGUAGE_UKRAINIAN,
				_LANGUAGE_SERBIAN_CYRILLIC,
				_LANGUAGE_BULGARIAN,
				_LANGUAGE_BELARUSIAN
			ShowLanguageButton := True
			SetKeyboardType(KEYBOARD_CYRILLIC)
		Case _LANGUAGE_NORWEGIAN_NYNORSK,_LANGUAGE_NORWEGIAN_BOKML
			ShowLanguageButton := True
			SetKeyboardType(KEYBOARD_NORWEGIAN)
		Case _LANGUAGE_GREEK
			ShowLanguageButton := True
			SetKeyboardType(KEYBOARD_GREEK)
		Case Else
			
			ShowLanguageButton := False
			SetKeyboardType(KEYBOARD_LATIN)
		End Select
		
	End Function
	
	Protected Function SetKeyboardType(newkeyboardtype As Long)
		
		KeyboardType := newkeyboardtype
		LockRedraw()
		CreateButByGetLanguag()
//		SetUnderlyingButtonPicture()
		UnlockRedraw()
		Redraw()
	End Function
	
	Protected Function GetKeyboardType()As Long
		Return Value KeyboardType
	End Function
	
	Protected Function CreateButByGetLanguag()
//		If GetLanguage() = _LANGUAGE_RUSSIAN Or GetLanguage() = _LANGUAGE_NORWEGIAN_NYNORSK Or GetLanguage() = _LANGUAGE_NORWEGIAN_BOKML Then
		Select KeyboardType
		Case KEYBOARD_CYRILLIC
			MyTextABC		:= txtABC_Russian
			MyTextABCSmall	:= txtABCSmall_Russian
		Case KEYBOARD_GREEK	
			MyTextABC		:= txtABC_Greek
			MyTextABCSmall	:= txtABCSmall_Greek
		Case Else
			MyTextABC		:= txtABC
			MyTextABCSmall	:= txtABCSmall					
		End Select
		
		If KeyboardType = KEYBOARD_CYRILLIC Or KeyboardType = KEYBOARD_NORWEGIAN Then
			IndexShift1		:= 25
			IndexShift2		:= 36
			IndexSwitch1	:= 37
			IndexSwitch2	:= 39
			IndexEnter		:= 24
			IndexBackspace	:= 12
//			MyTextABC		:= txtABC
//			MyTextABCSmall	:= txtABCSmall
			IndexLanguage	:= IndexSwitch2+1
			IndexCustom		:= IndexSwitch2+2
			MaxButtons 		:= IndexCustom
			
			KeyboardsNumberButtons 	:= NumberButtonRU
			ButtonUp				:= KeyboardButtonUpRU
			ButtonDown				:= KeyboardButtonDownRU
			ButtonEnterUp			:= KeyboardButtonEnterUpRU
			ButtonEnterDown			:= KeyboardButtonEnterDownRU
			ButtonBackSpRShiftUp	:= KeyboardButtonBackspRShiftUpRU	
			ButtonBackSpRShiftDown	:= KeyboardButtonBackspRShiftDownRU
			NumFirstLine			:= ButtonNumberFirstLineRU
			NumSecondLine			:= ButtonNumberSecondLineRU
			NumThirdLine			:= ButtonNumberThLineRU
			NumFourLine				:= ButtonNumberFourLineRU	
			If ShowLanguageButton  Then
				KeyboardButtonSwitch1UpActual	:= KeyboardButtonSwitchUpLeft
				KeyboardButtonSwitch1DownActual	:= KeyboardButtonSwitchDownLeft
			Else
				KeyboardButtonSwitch1UpActual	:= KeyboardButtonSwitchUp
				KeyboardButtonSwitch1DownActual	:= KeyboardButtonSwitchDown					
			End If
			If ShowCustomButton Then
				KeyboardButtonSwitch2UpActual	:= KeyboardButtonSwitchUpLeft
				KeyboardButtonSwitch2DownActual	:= KeyboardButtonSwitchDownLeft
			Else
				KeyboardButtonSwitch2UpActual	:= KeyboardButtonSwitchUp
				KeyboardButtonSwitch2DownActual	:= KeyboardButtonSwitchDown		
			End If
			
			CalculateButtonPosition()	
			CreateTextFirstButtonsSmallRU()
			CreateFirstButtonsRU()
		Else
			IndexShift1		:= 22
			IndexShift2		:= 32
			IndexSwitch1	:= 33
			IndexSwitch2	:= 35
			IndexEnter		:= 21
			IndexBackspace	:= 11
//			MyTextABC		:= txtABC
//			MyTextABCSmall	:= txtABCSmall
			IndexLanguage	:= IndexSwitch2+1
			IndexCustom		:= IndexSwitch2+2
			MaxButtons 		:= IndexCustom
			ButtonUp				:= KeyboardButtonUp
			ButtonDown				:= KeyboardButtonDown
			ButtonEnterUp			:= KeyboardButtonEnterUp
			ButtonEnterDown			:= KeyboardButtonEnterDown
			ButtonBackSpRShiftUp	:= KeyboardButtonBackspRShiftUp	
			ButtonBackSpRShiftDown	:= KeyboardButtonBackspRShiftDown
			NumFirstLine			:= ButtonNumberFirstLine
			NumSecondLine			:= ButtonNumberSecondLine
			NumThirdLine			:= ButtonNumberThLine
			NumFourLine				:= ButtonNumberFourLine	
			If ShowLanguageButton  Then
				KeyboardButtonSwitch1UpActual	:= KeyboardButtonSwitchUpLeft
				KeyboardButtonSwitch1DownActual	:= KeyboardButtonSwitchDownLeft
			Else
				KeyboardButtonSwitch1UpActual	:= KeyboardButtonSwitchUp
				KeyboardButtonSwitch1DownActual	:= KeyboardButtonSwitchDown					
			End If
			If ShowCustomButton Then
				KeyboardButtonSwitch2UpActual	:= KeyboardButtonSwitchUpLeft
				KeyboardButtonSwitch2DownActual	:= KeyboardButtonSwitchDownLeft
			Else
				KeyboardButtonSwitch2UpActual	:= KeyboardButtonSwitchUp
				KeyboardButtonSwitch2DownActual	:= KeyboardButtonSwitchDown		
			End If
			CalculateButtonPosition()
			CreateTextFirstButtonsSmall()	
			CreateFirstButtons()
		End If
		CalculateSecondButtonPosition() 

	End Function

	Protected Function AddPosKeyboard()
		BClosePosY						+= GetPrimaryDisplay().GetHeight()- (KeyboardBackgroundHeight + DialogWindow.GetHeight())			//pozice close tlačítka	
		DialogTextPosY					+= GetPrimaryDisplay().GetHeight()- (KeyboardBackgroundHeight + DialogWindow.GetHeight())		
		DialogWindowRectanglePosY 		:= DialogWindow.GetHeight()+ GetPrimaryDisplay().GetHeight()- (KeyboardBackgroundHeight + DialogWindow.GetHeight())
		DialogWindowPosY 				:= GetPrimaryDisplay().GetHeight()- (KeyboardBackgroundHeight + DialogWindow.GetHeight())	
	
		ButtCellOpen := False
		CreateFirstB := False

		LargeB := True
		LeftDialogText := False
		
		If GetColorComponentOpacity(ButtonDialogTextColor)-102 > 102 Then
			PromtTextColor := Color(GetColorComponentRed(ButtonDialogTextColor),GetColorComponentGreen(ButtonDialogTextColor),GetColorComponentBlue(ButtonDialogTextColor),GetColorComponentOpacity(ButtonDialogTextColor)-102)
		Else
			PromtTextColor := ButtonDialogTextColor
		End If
		WriteFSymbol(Nothing)
		 
	End Function	

	Protected Function OnDown(x As Long,y As Long,eventtime As Time) As Boolean
		Var i As Long

		LockRedraw()
		If x >= BClosePosX And x <= BClosePosX + ButtonCloseUp.GetWidth() And y >= BClosePosY And y <= BClosePosY + ButtonCloseUp.GetHeight() Then
			ButtonCloseActual := ButtonCloseDown
			ButtonCloseOndown := True
			Redraw(BClosePosX,BClosePosY,ButtonCloseUp.GetWidth(),ButtonCloseUp.GetHeight())
		ElseIf IsPasswordmask And x >= BClosePosX - ButtonCloseUp.GetWidth() And x <= BClosePosX And y >= BClosePosY And y <= BClosePosY + ButtonCloseUp.GetHeight() Then

			ButtonEyeOndown := True
			SetButtonEye(ButtonEyeOn)
		Else
			SetButtonEye(ButtonEyeOn)

			ButtonCloseOndown := False
			ButtonEyeOndown := False
		End If
		
		If y >= DialogTextPosY And y <= DialogWindow.GetHeight() + GetPrimaryDisplay().GetHeight()- (KeyboardBackgroundHeight + DialogWindow.GetHeight()) And x >= 0 And x <= BClosePosX Then
			OldKurzorX1 := KurzorX1
			KurzorShiftPos := True
		Else
			KurzorShiftPos := False
		End If
		
		For i := 1 To MaxButtons// IndexSwitch2//KEYBOARDBUTTONS
			If x >= MyButton[i].MyPosX And x <= MyButton[i].MyPosX + MyButton[i].ButtonActive.GetWidth() And y >= MyButton[i].MyPosY And y <= MyButton[i].MyPosY + MyButton[i].ButtonActive.GetHeight() Then
				MyButton[i].MyOnDown()
				IndexButtonOnDown := i
				OldIndexButtonOnDown := i
				If  MyButton[IndexButtonOnDown].HaveCell And MyButton[IndexButtonOnDown].ButtonActive = MyButton[IndexButtonOnDown].ButtonDown Then
					ButtCellOpen := False	
					MyButton[IndexButtonOnDown].MyTextColor := MyButton[IndexButtonOnDown].TextActiveColor
					StartTimer(3,:0.5)
				End If			
				If i=IndexBackspace Then
					StartTimer(1,:0.5)
				End If
				Exit For
			End If
		End For
		
		If MyButton[IndexButtonOnDown].HaveCell Then
			MyButtonCell.SetActiveButton(x-MyButton[IndexButtonOnDown].ButtonActive.GetWidth()/2-MyButton[IndexButtonOnDown].MyPosX ,y-MyButton[IndexButtonOnDown].MyPosY)
		End If	
		UnlockRedraw()
		Return Value True
	End Function
		
	Protected Function CalculateKursorPosition(x As Long)
		Var NumSymbol As Long
		Var distance As Long
		Var n As Long
			TextDial := DialogText
			distance :=   x - DialogTextPosX
			NumSymbol := GetTextActualLength(TextDial)
			n := 0
			Do While distance <= DialogFont.CalculateTextWidth(TextDial)
				n += 1
				SetTextActualLength(TextDial,NumSymbol-n)
			End Do
			NumSymbol -= n - 1
			If LeftDialogText Then
				MumKursorPos := NumSymbol
			Else
				MumKursorPos := NumSymbol + NumDontDrawText
			End If
			KurzorX1 := DialogTextPosX + DialogFont.CalculateTextWidth(TextDial)
			LengthScrText()	
			KurzorX1 := DialogTextPosX + DialogFont.CalculateTextWidth(TextDial)
	End Function
	
	Protected Function OnMove(x As Long,y As Long,eventtime As Time,isinside As Boolean)
		Var i As Long
		Var PosBX1 As Long
		Var PosBX2 As Long
		Var PosBY1 As Long
		Var PosBY2 As Long	
		LockRedraw()
		If KurzorShiftPos = True Then
			If x >= 0 And x <= DialogTextPosX Then
				LeftDialogText:=True
				LengthScrText()
				KurzorX1 := DialogTextPosX
			ElseIf x >= DialogTextPosX And x <= DialogFont.CalculateTextWidth(DialogText)  Then
				CalculateKursorPosition(x)
			ElseIf x >= DialogFont.CalculateTextWidth(DialogText) And x <= BClosePosX Then
				LeftDialogText:=False
				LengthScrText()
				KurzorX1 := DialogTextPosX + DialogFont.CalculateTextWidth(DialogText)
			End If
			Redraw(DialogTextPosX,DialogTextPosY,DialogTextPosX+MyDialogTextBoxWidth,DialogFont.CalculateTextHeight("A",100,0))					
		Else
			PosBX1 := MyButton[IndexButtonOnDown].MyPosX
			PosBX2 := MyButton[IndexButtonOnDown].MyPosX + MyButton[IndexButtonOnDown].ButtonActive.GetWidth()
			PosBY1 := MyButton[IndexButtonOnDown].MyPosY
			PosBY2 := MyButton[IndexButtonOnDown].MyPosY + MyButton[IndexButtonOnDown].ButtonActive.GetHeight()
		
			If x <= PosBX1 Or x >= PosBX2 Or y <= PosBY1 Or y >= PosBY2 Then
				For i := 1 To MaxButtons//IndexSwitch2//KEYBOARDBUTTONS
					If x >= MyButton[i].MyPosX And x <= MyButton[i].MyPosX + MyButton[i].ButtonActive.GetWidth() And y >= MyButton[i].MyPosY And y <= MyButton[i].MyPosY + MyButton[i].ButtonActive.GetHeight() Then
	
				 		If MyButton[IndexButtonOnDown].HaveCell And x >= MyButtonCell.BackgroundPosX And x <= MyButtonCell.BackgroundPosX + MyButtonCell.MyCellBackground.GetWidth()  And y >= MyButtonCell.BackgroundPosY And y <= MyButtonCell.BackgroundPosY + MyButtonCell.MyCellBackground.GetHeight()+MyButtonCell.MyIndic.GetHeight() Then
							MyButtonCell.SetActiveButton(x-MyButton[IndexButtonOnDown].ButtonActive.GetWidth()/2-MyButton[IndexButtonOnDown].MyPosX ,y-MyButton[IndexButtonOnDown].MyPosY)
				 		Else
				 			MyButton[IndexButtonOnDown].MyOnClose()
				 			MyButton[i].MyOnDown()
				 			
				 			If i <> OldIndexButtonOnDown Then
								IndexButtonOnDown := i		 				
								If  MyButton[IndexButtonOnDown].HaveCell And MyButton[IndexButtonOnDown].ButtonActive = MyButton[IndexButtonOnDown].ButtonDown Then
									StopTimer(3)
									ButtCellOpen := False	
									MyButton[IndexButtonOnDown].MyTextColor := MyButton[IndexButtonOnDown].TextActiveColor
									StartTimer(3,:0.5)
								End If	
							End If		 		 	
				 		End If				 		
				 		Exit For
					End If		
				End For
			End If
		End If	
		
		If IndexButtonOnDown <> OldIndexButtonOnDown And Not MyButton[IndexButtonOnDown].HaveCell Then
			ButtCellOpen := False
		End If
			
		If MyButton[IndexButtonOnDown].HaveCell Then
			MyButtonCell.SetActiveButton(x-MyButton[IndexButtonOnDown].ButtonActive.GetWidth()/2-MyButton[IndexButtonOnDown].MyPosX ,y-MyButton[IndexButtonOnDown].MyPosY)
		End If
	
		If IndexButtonOnDown <> OldIndexButtonOnDown Then
			OldIndexButtonOnDown := IndexButtonOnDown	
		End If
		
		Redraw(MyButtonCell.BackgroundPosX,MyButtonCell.BackgroundPosY,MyButtonCell.MyCellBackground.GetWidth(),MyButtonCell.MyCellBackground.GetHeight()+MyButtonCell.MyIndic.GetHeight())		
		UnlockRedraw()
	End Function

	Protected Function InitObject()
	
	End Function
			
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
	Public Function EditText(ByRef texttoedit As Text,Optional passwordmask As Boolean := False,Optional promttext As AddressOf Text := Nothing, Optional newflags As Long := _OW_MODAL) As Boolean
		If LastError = KEYBOARD_IS_ALREADY_OPEN Then
			SetLastError(LastError)
			Return Value False 
		End If
		
		LastError := KEYBOARD_IS_ALREADY_OPEN

		SetFlags(newflags)
		LastError := KEYBOARD_IS_ALREADY_OPEN
		
		SetPasswordMask(passwordmask)
		
		MyPromtText := promttext
		IsClose := False
		
		TouchEnter := False
		ButtCellOpen := False
		CreateFirstB := False

		LargeB := True
		
//		CreateButByGetLanguag()	
		SetIndexByLanguage(GetLanguage())
		SetFirstText(texttoedit)	
		SetSize(GetPrimaryDisplay().GetWidth(),GetPrimaryDisplay().GetHeight())	
		Open(0,0,newflags BitOr _OW_ALIGNBOTTOM BitOr _OW_ALIGNHCENTER)
				
		Do 
			If IsClose Then
				If TouchEnter Then
					GetText(texttoedit)
					Return Value True
				Else
					GetText(texttoedit)
					SetLastError(LastError)
					Return Value False
				End If
			Else	
				Wait(:0.05)	
			End If
		End Do
		Return Value False
	End Function
	
	Public Function IsObjectVisible() As Boolean
		If IsClose Then	
			Return Value False
		Else
			Return Value True
		End If
	End Function
	
	Public Function HideObject()
		LastError := KEYBOARD_HAS_BEEN_HIDDEN
		CloseWindow()	
	End Function

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
	Public Function SetPrompt (newprompt As Text) As Boolean	
		If GetMemorySegment(newprompt) = _MSEG_RESOURCEDATA Then
			MyPromtText := newprompt
		Else
			TextBuffer := newprompt
			MyPromtText := TextBuffer
		End If
		Redraw ()	
		Return Value True	
	End Function

	Public Function GetPrompt () As AddressOf Text
		Return Value MyPromtText	
	End Function
	
	Protected Function SetButtonEye(ison As Boolean)
		If ison Then
		
			ButtonEyeActual := ButtonEyeDown
//			BEyeColor		:= BCloseColorUp
//			BEyeColorOpacity := BCloseColorOpacityUp
//			BEyeIconColor := CloseIconColorUp
//			BEyeIconColorOpacity := BCloseIconColorOpacityUp
		Else
			ButtonEyeActual := ButtonEyeUp
//			BEyeColor		:= BCloseColorDown
//			BEyeColorOpacity := BCloseColorOpacityDown	
//			BEyeIconColor := CloseIconColorDown
//			BEyeIconColorOpacity := BCloseIconColorOpacityDown/2	
		End If
		Redraw(BClosePosX- ButtonCloseUp.GetWidth(),BClosePosY,ButtonCloseUp.GetWidth(),ButtonCloseUp.GetHeight())	
	End Function	

	
	Public Function SetPasswordMask (newpasswordmask As Boolean) As Boolean	
		LockRedraw()
		IsPasswordmask := newpasswordmask
		
		ButtonEyeOn := False
		SetButtonEye(ButtonEyeOn)
		If newpasswordmask Then
			MyDialogTextBoxWidth := DialogTextBoxWidth - ButtonCloseUp.GetWidth()
		Else
			MyDialogTextBoxWidth := DialogTextBoxWidth
		End If
			
		SetFirstText(MDT)
		UnlockRedraw()
		Redraw ()	
		Return Value True		
	End Function
	
	Private Function GetPasswordMask () As Boolean
		Return Value IsPasswordmask
	End Function

	Protected Function SetFlags(newflags As Long)
		If (newflags BitAnd _OW_TOPMOST) = _OW_TOPMOST Then
			newflags := _OW_TOPMOST
		ElseIf (newflags BitAnd _OW_MODAL) = _OW_MODAL Then
			newflags := _OW_MODAL
		Else
			newflags := _OW_MODAL						
		End If	
	End Function
	
	Public Function ShowObject(Optional newinittext As Text := "", Optional newid As Long := 0, Optional newflags As Long := _OW_MODAL) As Boolean	
		SetFlags(newflags)	
		ObjectID := newid
		
		LastError := KEYBOARD_IS_ALREADY_OPEN
		IsClose := False
		TouchEnter := False
		ButtCellOpen := False
		CreateFirstB := False

		LargeB := True
			
//		CreateButByGetLanguag()

		SetIndexByLanguage(GetLanguage())
		SetPasswordMask(IsPasswordmask)
		SetFirstText(newinittext)	
		SetSize(GetPrimaryDisplay().GetWidth(),GetPrimaryDisplay().GetHeight())	
		Open(0,0,newflags BitOr _OW_ALIGNBOTTOM BitOr _OW_ALIGNHCENTER)
		Return Value True
	End Function	

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
	
	Protected Function SetPictureByDisplayRelosution()
		Var DisplayWidth 	As Long := GetPrimaryDisplay().GetWidth()

		If DisplayWidth < 1024 Then 
			DisplaySize := 1
		ElseIf 	DisplayWidth < 1080 Then
			DisplaySize := 2	
		ElseIf DisplayWidth < 1136  Then 
			DisplaySize := 3			
		ElseIf DisplayWidth < 1280 Then
			DisplaySize := 4			
		ElseIf DisplayWidth < 1366 Then
			DisplaySize := 5				
		ElseIf DisplayWidth < 1920 Then
			DisplaySize := 6	
		ElseIf DisplayWidth < 2048 Then
			DisplaySize := 7		
		ElseIf DisplayWidth < 2560 Then
			DisplaySize := 8
		Else 
			DisplaySize := 9		
		End If
	End Function
	
	Protected Function CloseWindow()
		IsClose := True
		Close()
		RaiseEvent OnCancel(ObjectID)
	End Function
	
	Public Function GetText(ByRef editedtext As Text)
		If Not IsObjectVisible() Then
			If TouchEnter Then	
				editedtext := MDT
			Else
				editedtext := FirstDialogText	
			End If
		Else
		End If
	End Function
			
	Protected Function IsClosed() As Boolean
		Return Value IsClose
	End Function
	
	Protected Function OnUp(x As Long,y As Long,eventtime As Time,isinside As Boolean)

		LockRedraw()
		StopTimer(3)
		If x >= BClosePosX And x <= BClosePosX + ButtonCloseUp.GetWidth() And y >= BClosePosY And y <= BClosePosY + ButtonCloseUp.GetHeight() And ButtonCloseOndown Then		

			ButtonCloseActual := ButtonCloseUp			
			Redraw(BClosePosX,BClosePosY,ButtonCloseUp.GetWidth(),ButtonCloseUp.GetHeight())
			LastError := EDIT_WAS_CANCELED
			CloseWindow()

		ElseIf IsPasswordmask And x >= BClosePosX - ButtonCloseUp.GetWidth() And x <= BClosePosX And y >= BClosePosY And y <= BClosePosY + ButtonCloseUp.GetHeight() And ButtonEyeOndown Then		

			If ButtonEyeOn Then
				ButtonEyeOndown := False	
				ButtonEyeOn := False
			Else
				ButtonEyeOndown := False
				ButtonEyeOn := True
			End If
				SetFirstText(MDT)
				SetButtonEye(ButtonEyeOn)			
		ElseIf IsPasswordmask And ButtonEyeOndown  = True And Not ButtonCloseOndown Then
	
			ButtonEyeOndown := False
			SetButtonEye(ButtonEyeOn)	
		ElseIf ButtonCloseOndown = True Then

			ButtonCloseActual := ButtonCloseUp
			ButtonCloseOndown := False
			Redraw(BClosePosX,BClosePosY,ButtonCloseUp.GetWidth(),ButtonCloseUp.GetHeight())
			
		ElseIf KurzorShiftPos = True Then
			If x >= 0 And x <= DialogTextPosX Then
				LeftDialogText:=True
				LengthScrText()
				MumKursorPos := 1
				KurzorX1 := DialogTextPosX
				TextDial := ""					
			ElseIf x >= DialogTextPosX And x <= DialogFont.CalculateTextWidth(DialogText)  Then
				CalculateKursorPosition(x)		
			ElseIf x >= DialogFont.CalculateTextWidth(DialogText) And x <= BClosePosX Then
				LeftDialogText:=False
				LengthScrText()
				MumKursorPos := GetTextActualLength(MyDialogText)+1
				KurzorX1 := DialogTextPosX + DialogFont.CalculateTextWidth(DialogText)
				TextDial := DialogText		
			End If
			Redraw(DialogTextPosX,DialogTextPosY,DialogTextPosX+MyDialogTextBoxWidth,DialogFont.CalculateTextHeight("A",0,0))
		End If	

		If x >= MyButton[IndexButtonOnDown].MyPosX And x <= MyButton[IndexButtonOnDown].MyPosX + MyButton[IndexButtonOnDown].ButtonActive.GetWidth() And y >= MyButton[IndexButtonOnDown].MyPosY And y <= MyButton[IndexButtonOnDown].MyPosY + MyButton[IndexButtonOnDown].ButtonActive.GetHeight() Then
			MyButton[IndexButtonOnDown].MyOnUp(True)
		ElseIf MyButton[IndexButtonOnDown].HaveCell And ButtCellOpen Then
			MyButton[IndexButtonOnDown].MyOnUp(False)
		Else
			MyButton[IndexButtonOnDown].MyOnClose()
		End If
		
		If ButtCellOpen Then
			ButtCellOpen := False
			Redraw(MyButtonCell.BackgroundPosX,MyButtonCell.BackgroundPosY,MyButtonCell.MyCellBackground.GetWidth(),MyButtonCell.MyCellBackground.GetHeight()+MyButtonCell.MyIndic.GetHeight())		
		End If
		
		StopTimer(1)
		
		Redraw(KurzorX1,KurzorY1,3,KurzorY2)
		Redraw(OldKurzorX1,KurzorY1,3,KurzorY2)
		UnlockRedraw()	
	End Function

	Protected Function CreateButtons()
		If CreateFirstB  Then
			CreateSecondButtons()
			CreateTextSecondButtons()
		Else
			If LargeB Then
//				If GetLanguage() = _LANGUAGE_RUSSIAN Or GetLanguage() = _LANGUAGE_NORWEGIAN_NYNORSK Or GetLanguage() = _LANGUAGE_NORWEGIAN_BOKML Then
				If KeyboardType = KEYBOARD_CYRILLIC Or KeyboardType = KEYBOARD_NORWEGIAN Then
					CreateTextFirstButtonsLargeRU()
					CreateFirstButtonsRU()
				Else
					CreateTextFirstButtonsLarge()	
					CreateFirstButtons()
				End If
				MyButton[IndexShift1].ButtonText	:= MyTextABCSmall////
				MyButton[IndexShift2].ButtonText	:= MyTextABCSmall////
			Else
//				If GetLanguage() = _LANGUAGE_RUSSIAN Or GetLanguage() = _LANGUAGE_NORWEGIAN_NYNORSK Or GetLanguage() = _LANGUAGE_NORWEGIAN_BOKML Then
				If KeyboardType = KEYBOARD_CYRILLIC Or KeyboardType = KEYBOARD_NORWEGIAN Then
					CreateTextFirstButtonsSmallRU()
					CreateFirstButtonsRU()
				Else
					CreateTextFirstButtonsSmall()
					CreateFirstButtons()
				End If
				MyButton[IndexShift1].ButtonText	:= MyTextABC//
				MyButton[IndexShift2].ButtonText	:= MyTextABC//	
			End If
		End If	
		Redraw()
	End Function
	
	Protected Function ChooseSmallLargeSymbols()
		If LargeB Then	
										//  male
//			If GetLanguage() = _LANGUAGE_RUSSIAN Or GetLanguage() = _LANGUAGE_NORWEGIAN_NYNORSK Or GetLanguage() = _LANGUAGE_NORWEGIAN_BOKML Then
			If KeyboardType = KEYBOARD_CYRILLIC Or KeyboardType = KEYBOARD_NORWEGIAN Then
				CreateTextFirstButtonsSmallRU()
			Else
				CreateTextFirstButtonsSmall()
			End If 
			MyButton[IndexShift1].ButtonText	:= MyTextABC//
			MyButton[IndexShift2].ButtonText	:= MyTextABC//
		Else
												// velke
//			If GetLanguage() = _LANGUAGE_RUSSIAN Or GetLanguage() = _LANGUAGE_NORWEGIAN_NYNORSK Or GetLanguage() = _LANGUAGE_NORWEGIAN_BOKML Then
			If KeyboardType = KEYBOARD_CYRILLIC Or KeyboardType = KEYBOARD_NORWEGIAN Then
				CreateTextFirstButtonsLargeRU()
			Else
				CreateTextFirstButtonsLarge()
			End If 
			MyButton[IndexShift1].ButtonText	:= MyTextABCSmall////
			MyButton[IndexShift2].ButtonText	:= MyTextABCSmall////									
		End If
	End Function
	
	Protected Function CalculateButtonPosition() 
		Var i As Long
		Var BOffPosX 	As Long
		Var BOffsetPosY As Long
		Var FirstBLine2PosX	As Long
		Var BPosX 		As Long
				
		BOffPosX := (KeyboardBackgroundWidth - ((NumFirstLine-1) * ButtonUp.GetWidth() + ButtonBackSpRShiftUp.GetWidth()))/(NumFirstLine+1)
		BOffsetPosY := (KeyboardBackgroundHeight - NumberLineButtons * ButtonUp.GetHeight())/(NumberLineButtons+1)

		BPosYLine1 := DialogWindow.GetHeight() + BOffsetPosY + GetPrimaryDisplay().GetHeight()- (KeyboardBackgroundHeight + DialogWindow.GetHeight())
		BPosYLine2 := BPosYLine1 + BOffsetPosY + ButtonUp.GetHeight() 
		BPosYLine3 := BPosYLine2 + BOffsetPosY + ButtonUp.GetHeight() 
		BPosYLine4 := BPosYLine3 + BOffsetPosY + ButtonUp.GetHeight() 
	
		FirstBLine2PosX := ((ButtonUp.GetWidth() * (NumFirstLine-1)) + (BOffPosX * NumFirstLine) + ButtonBackSpRShiftUp.GetWidth()) - (ButtonEnterUp.GetWidth()+ ( ButtonUp.GetWidth() * (NumSecondLine-1))+(BOffPosX * (NumSecondLine-1)) )

		BPosX := BOffPosX	

		For i:= 1 To NumFirstLine		
			BOffsetPosX[i] := BPosX	
			BPosX += BOffPosX + ButtonUp.GetWidth()
		End For
		
		For i := NumFirstLine+1 To NumFirstLine + NumSecondLine	
			BOffsetPosX[i] := FirstBLine2PosX
			FirstBLine2PosX += BOffPosX + ButtonUp.GetWidth()
		End For

			BPosX := BOffPosX
			
		For i := NumFirstLine + NumSecondLine + 1 To NumFirstLine + NumSecondLine + NumThirdLine
			BOffsetPosX[i] := BPosX			
			BPosX += BOffPosX + ButtonUp.GetWidth()
		End For	
		
			BPosX := BOffPosX

		BOffsetPosX[IndexSwitch1] := BPosX	
		BPosX += BOffPosX + KeyboardButtonSwitchUp.GetWidth()
		BOffsetPosX[IndexSwitch1 + 1] := BPosX
		BPosX += BOffPosX + KeyboardButtonSpaceUp.GetWidth()
		BOffsetPosX[IndexSwitch2] := BPosX	
		
		BOffsetPosX[IndexLanguage]	:= BOffsetPosX[IndexSwitch1] + BOffPosX + KeyboardButtonSwitchUpLeft.GetWidth()	
		BOffsetPosX[IndexCustom]	:= BOffsetPosX[IndexSwitch2]
	
		If ShowCustomButton Then
			BOffsetPosX[IndexSwitch2] := BOffsetPosX[IndexCustom] +  BOffPosX + KeyboardButtonUp.GetWidth()	
		End If
		
	End Function
	
	Protected Function CalculateSecondButtonPosition() 
		Var i As Long
		Var BOffPosX 	As Long
		Var BOffsetPosY As Long
		Var FirstBLine2PosX	As Long
		Var BPosX 		As Long
			
		BOffPosX := (KeyboardBackgroundWidth - ((ButtonNumberFirstLine) * + KeyboardButtonUp.GetWidth()))/(ButtonNumberFirstLine+1)
		BOffsetPosY := (KeyboardBackgroundHeight - NumberLineButtons * KeyboardButtonUp.GetHeight())/(NumberLineButtons+1)

		BPosYLine1 := DialogWindow.GetHeight() + BOffsetPosY + GetPrimaryDisplay().GetHeight()- (KeyboardBackgroundHeight + DialogWindow.GetHeight())
		BPosYLine2 := BPosYLine1 + BOffsetPosY + ButtonUp.GetHeight()
		BPosYLine3 := BPosYLine2 + BOffsetPosY + ButtonUp.GetHeight() 
		BPosYLine4 := BPosYLine3 + BOffsetPosY + ButtonUp.GetHeight() 
	
		FirstBLine2PosX := ((KeyboardButtonUp.GetWidth() * (ButtonNumberFirstLine-1)) + (BOffPosX * ButtonNumberFirstLine) + KeyboardButtonUp.GetWidth()) - (KeyboardButtonEnterUp.GetWidth()+ ( KeyboardButtonUp.GetWidth() * (ButtonNumberSecondLine-1))+(BOffPosX * (ButtonNumberSecondLine-1)) )

		BPosX := BOffPosX	
	
		For i:= 1 To ButtonNumberFirstLine		
			SecBOffsetPosX[i] := BPosX	
			BPosX += BOffPosX + KeyboardButtonUp.GetWidth()
		End For
		
		For i := ButtonNumberFirstLine+1 To ButtonNumberFirstLine + ButtonNumberSecondLine	
			SecBOffsetPosX[i] := FirstBLine2PosX
			FirstBLine2PosX += BOffPosX + KeyboardButtonUp.GetWidth()
		End For
		
			BPosX := BOffPosX
			
		For i := ButtonNumberFirstLine + ButtonNumberSecondLine + 1 To ButtonNumberFirstLine + ButtonNumberSecondLine + NumThirdLine
			SecBOffsetPosX[i] := BPosX			
			BPosX += BOffPosX + KeyboardButtonUp.GetWidth()
		End For	
		
			BPosX := BOffPosX

		SecBOffsetPosX[IndexSwitch1] := BPosX	
		BPosX += BOffPosX + KeyboardButtonSwitchUp.GetWidth()
		SecBOffsetPosX[IndexSwitch1 + 1] := BPosX
		BPosX += BOffPosX + KeyboardButtonSpaceUp.GetWidth()
		SecBOffsetPosX[IndexSwitch2] := BPosX
		

		SecBOffsetPosX[IndexLanguage]	:= SecBOffsetPosX[IndexSwitch1] + BOffPosX + KeyboardButtonSwitchUpLeft.GetWidth()	
		SecBOffsetPosX[IndexCustom]		:= SecBOffsetPosX[IndexSwitch2]
		If ShowCustomButton Then
			SecBOffsetPosX[IndexSwitch2] := SecBOffsetPosX[IndexCustom] +  BOffPosX + KeyboardButtonUp.GetWidth()	
		End If
		
	End Function	
	
	Protected Function CreateTextFirstButtonsLargeRU()
		LargeB		 := True
//		If GetLanguage() = _LANGUAGE_NORWEGIAN_NYNORSK Or GetLanguage() = _LANGUAGE_NORWEGIAN_BOKML Then
		If KeyboardType = KEYBOARD_NORWEGIAN Then
				MyButton[1].CreateText(txtQ,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[2].CreateText(txtW,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[3].CreateText(txtE,txtE1,txtE2,txtE3,txtE4,txtE5,txtE6,txtE7,txtE8,Nothing,Nothing)
				MyButton[4].CreateText(txtR,txtR1,txtR2,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[5].CreateText(txtT,txtT1,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[6].CreateText(txtY,txtY1,txtY2,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[7].CreateText(txtU,txtU1,txtU2,txtU3,txtU4,txtU5,txtU6,Nothing,Nothing,Nothing,Nothing)
				MyButton[8].CreateText(txtI,txtI1,txtI2,txtI3,txtI4,txtI5,txtI6,Nothing,Nothing,Nothing,Nothing)
				MyButton[9].CreateText(txtO,txtO1,txtO2,txtO4,txtO5,txtO6,txtO7,txtO8,Nothing,Nothing,Nothing)
				MyButton[10].CreateText(txtP,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[11].CreateText(txtA3,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //Backspace
				MyButton[12].CreateText(Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)

				MyButton[13].CreateText(txtA,txtA2,txtA4,txtA5,txtA6,txtA7,txtA8,txtA9,Nothing,Nothing,Nothing)
				MyButton[14].CreateText(txtS,txtS1,txtS2,txtS3,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[15].CreateText(txtD,txtD1,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[16].CreateText(txtF,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[17].CreateText(txtG,txtG1,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[18].CreateText(txtH,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[19].CreateText(txtJ,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[20].CreateText(txtK,txtK1,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[21].CreateText(txtL,txtL1,txtL2,txtL3,txtL4,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[22].CreateText(txtO3,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[23].CreateText(txtA1,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //Enter
				MyButton[24].CreateText(txtEnter,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)	
	
			 //Shift
			 	MyButton[25].CreateText(MyTextABCSmall,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[26].CreateText(txtZ,txtZ1,txtZ2,txtZ3,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[27].CreateText(txtX,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[28].CreateText(txtC,txtC1,txtC2,txtC3,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[29].CreateText(txtV,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[30].CreateText(txtB,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[31].CreateText(txtN,txtN1,txtN2,txtN3,txtN4,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[32].CreateText(txtM,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[33].CreateText(txtPoint,txtLine,txtInterrogation,txtExclamation,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[34].CreateText(txtQuotation5,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[35].CreateText(txtSlash,txtReverseSlash,txtVertical,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //Shift
			 	MyButton[36].CreateText(MyTextABCSmall,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)

			 //123#)
				MyButton[37].CreateText(txt123,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[40].CreateText(Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //Space
				MyButton[38].CreateText(txtSpace,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //123#)
				MyButton[39].CreateText(txt123,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
		Else
				MyButton[1].CreateText(txtRUSym1,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[2].CreateText(txtRUSym2,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[3].CreateText(txtRUSym3,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[4].CreateText(txtRUSym4,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[5].CreateText(txtRUSym5,txtRUSym51,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[6].CreateText(txtRUSym6,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[7].CreateText(txtRUSym7,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[8].CreateText(txtRUSym8,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[9].CreateText(txtRUSym9,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[10].CreateText(txtRUSym10,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[11].CreateText(txtRUSym11,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //Backspace
				MyButton[12].CreateText(Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)

				MyButton[13].CreateText(txtRUSym13,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[14].CreateText(txtRUSym14,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[15].CreateText(txtRUSym15,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[16].CreateText(txtRUSym16,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[17].CreateText(txtRUSym17,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[18].CreateText(txtRUSym18,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[19].CreateText(txtRUSym19,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[20].CreateText(txtRUSym20,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[21].CreateText(txtRUSym21,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[22].CreateText(txtRUSym22,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[23].CreateText(txtRUSym23,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //Enter
				MyButton[24].CreateText(txtEnter,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)	
	
			 //Shift
			 	MyButton[25].CreateText(MyTextABCSmall,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[26].CreateText(txtRUSym26,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[27].CreateText(txtRUSym27,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[28].CreateText(txtRUSym28,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[29].CreateText(txtRUSym29,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[30].CreateText(txtRUSym30,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[31].CreateText(txtRUSym31,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[32].CreateText(txtRUSym32,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[33].CreateText(txtRUSym33,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[34].CreateText(txtRUSym34,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[35].CreateText(txtRUSym35,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //Shift
			 	MyButton[36].CreateText(MyTextABCSmall,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)

			 //123#)
				MyButton[37].CreateText(txt123,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[40].CreateText(Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //Space
				MyButton[38].CreateText(txtSpace,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //123#)
				MyButton[39].CreateText(txt123,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)	
		End If
		
		If ShowCustomButton Then
			MyButton[IndexCustom].CreateText(CustomButtonText,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)			
		Else
			 MyButton[IndexCustom].CreateText(Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)			
		End If
	End Function
	
	Protected Function CreateFirstButtonsRU()
	Var i As Long	
		CreateFirstB := True
//		If GetLanguage() = _LANGUAGE_NORWEGIAN_NYNORSK Or GetLanguage() = _LANGUAGE_NORWEGIAN_BOKML Then
		If KeyboardType = KEYBOARD_NORWEGIAN Then
				MyButton[1].Create(Me,1,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[1],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[2].Create(Me,2,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[2],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[3].Create(Me,3,ButtonUp,ButtonDown,8,Nothing,BOffsetPosX[3],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
				MyButton[4].Create(Me,4,ButtonUp,ButtonDown,2,Nothing,BOffsetPosX[4],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
				MyButton[5].Create(Me,5,ButtonUp,ButtonDown,1,Nothing,BOffsetPosX[5],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
				MyButton[6].Create(Me,6,ButtonUp,ButtonDown,2,Nothing,BOffsetPosX[6],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
				MyButton[7].Create(Me,7,ButtonUp,ButtonDown,6,Nothing,BOffsetPosX[7],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
				MyButton[8].Create(Me,8,ButtonUp,ButtonDown,6,Nothing,BOffsetPosX[8],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
				MyButton[9].Create(Me,9,ButtonUp,ButtonDown,7,Nothing,BOffsetPosX[9],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
				MyButton[10].Create(Me,10,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[10],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[11].Create(Me,11,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[11],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
			 //Backspace
				MyButton[12].Create(Me,12,ButtonBackSpRShiftUp,ButtonBackSpRShiftDown,0,KeyboardButtonBackspace,BOffsetPosX[12],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)

				MyButton[13].Create(Me,13,ButtonUp,ButtonDown,7,Nothing,BOffsetPosX[13],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
				MyButton[14].Create(Me,14,ButtonUp,ButtonDown,3,Nothing,BOffsetPosX[14],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
				MyButton[15].Create(Me,15,ButtonUp,ButtonDown,1,Nothing,BOffsetPosX[15],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
				MyButton[16].Create(Me,16,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[16],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[17].Create(Me,17,ButtonUp,ButtonDown,1,Nothing,BOffsetPosX[17],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
				MyButton[18].Create(Me,18,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[18],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[19].Create(Me,19,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[19],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[20].Create(Me,20,ButtonUp,ButtonDown,1,Nothing,BOffsetPosX[20],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
				MyButton[21].Create(Me,21,ButtonUp,ButtonDown,4,Nothing,BOffsetPosX[21],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
				MyButton[22].Create(Me,22,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[22],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[23].Create(Me,23,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[23],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
			 //Enter
				MyButton[24].Create(Me,24,ButtonEnterUp,ButtonEnterDown,0,Nothing,BOffsetPosX[24],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)	
			 //Shift
			 	MyButton[25].CreateShiftButton(Me,25,ButtonUp,ButtonDown,0,KeyboardButtonShift,BOffsetPosX[25],BPosYLine3,ShiftFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ShiftButtonTextPosYUp,ButtonTextPosXDown,ShiftButtonTextPosYDown,ShiftButtPosX,False)
				MyButton[26].Create(Me,26,ButtonUp,ButtonDown,3,Nothing,BOffsetPosX[26],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
				MyButton[27].Create(Me,27,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[27],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[28].Create(Me,28,ButtonUp,ButtonDown,3,Nothing,BOffsetPosX[28],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
				MyButton[29].Create(Me,29,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[29],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[30].Create(Me,30,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[30],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[31].Create(Me,31,ButtonUp,ButtonDown,4,Nothing,BOffsetPosX[31],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
				MyButton[32].Create(Me,32,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[32],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[33].Create(Me,33,ButtonUp,ButtonDown,3,Nothing,BOffsetPosX[33],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
				MyButton[34].Create(Me,34,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[34],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[35].Create(Me,35,ButtonUp,ButtonDown,2,Nothing,BOffsetPosX[35],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
			 //Shift
			 	MyButton[36].CreateShiftButton(Me,36,ButtonBackSpRShiftUp,ButtonBackSpRShiftDown,0,KeyboardButtonShift,BOffsetPosX[36],BPosYLine3,ShiftFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ShiftButtonTextPosYUp,ButtonTextPosXDown,ShiftButtonTextPosYDown,ShiftButtPosX,False)

			 //123#)
//				MyButton[37].Create(Me,37,KeyboardButtonSwitchUp,KeyboardButtonSwitchDown,0,Nothing,BOffsetPosX[37],BPosYLine4,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[37].Create(Me,37,KeyboardButtonSwitch1UpActual,KeyboardButtonSwitch1DownActual,0,Nothing,BOffsetPosX[37],BPosYLine4,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				If ShowLanguageButton Then
					MyButton[IndexLanguage].Create(Me,IndexLanguage,KeyboardButtonUp,KeyboardButtonDown,0,KeyboardButtonLanguage,BOffsetPosX[IndexLanguage],BPosYLine4,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				Else
			 		MyButton[IndexLanguage].Create(Me,IndexLanguage,Nothing,Nothing,0,Nothing,0,0,Nothing,0,0,0,0,0,0,False)
				End If
				
				If ShowCustomButton Then
					MyButton[IndexCustom].Create(Me,IndexCustom,KeyboardButtonUp,KeyboardButtonDown,0,Nothing,BOffsetPosX[IndexCustom],BPosYLine4,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)			
				Else
			 		MyButton[IndexCustom].Create(Me,IndexCustom,Nothing,Nothing,0,Nothing,0,0,Nothing,0,0,0,0,0,0,False)				
				End If
			 //Space
				MyButton[38].Create(Me,38,KeyboardButtonSpaceUp,KeyboardButtonSpaceDown,0,Nothing,BOffsetPosX[38],BPosYLine4,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
			 //123#)
				MyButton[IndexSwitch2].Create(Me,IndexSwitch2,KeyboardButtonSwitch2UpActual,KeyboardButtonSwitch2DownActual,0,Nothing,BOffsetPosX[IndexSwitch2],BPosYLine4,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)

		Else
				MyButton[1].Create(Me,1,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[1],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[2].Create(Me,2,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[2],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[3].Create(Me,3,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[3],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[4].Create(Me,4,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[4],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[5].Create(Me,5,ButtonUp,ButtonDown,1,Nothing,BOffsetPosX[5],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
				MyButton[6].Create(Me,6,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[6],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[7].Create(Me,7,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[7],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[8].Create(Me,8,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[8],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[9].Create(Me,9,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[9],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[10].Create(Me,10,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[10],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[11].Create(Me,11,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[11],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
			 //Backspace
				MyButton[12].Create(Me,12,ButtonBackSpRShiftUp,ButtonBackSpRShiftDown,0,KeyboardButtonBackspace,BOffsetPosX[12],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)

				MyButton[13].Create(Me,13,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[13],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[14].Create(Me,14,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[14],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[15].Create(Me,15,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[15],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[16].Create(Me,16,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[16],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[17].Create(Me,17,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[17],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[18].Create(Me,18,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[18],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[19].Create(Me,19,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[19],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[20].Create(Me,20,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[20],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[21].Create(Me,21,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[21],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[22].Create(Me,22,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[22],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[23].Create(Me,23,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[23],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
			 //Enter
				MyButton[24].Create(Me,24,ButtonEnterUp,ButtonEnterDown,0,Nothing,BOffsetPosX[24],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)	
			 //Shift
			 	MyButton[25].CreateShiftButton(Me,25,ButtonUp,ButtonDown,0,KeyboardButtonShift,BOffsetPosX[25],BPosYLine3,ShiftFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ShiftButtonTextPosYUp,ButtonTextPosXDown,ShiftButtonTextPosYDown,ShiftButtPosX,False)
				MyButton[26].Create(Me,26,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[26],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[27].Create(Me,27,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[27],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[28].Create(Me,28,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[28],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[29].Create(Me,29,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[29],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[30].Create(Me,30,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[30],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[31].Create(Me,31,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[31],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[32].Create(Me,32,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[32],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[33].Create(Me,33,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[33],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[34].Create(Me,34,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[34],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[35].Create(Me,35,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[35],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
			 //Shift
			 	MyButton[36].CreateShiftButton(Me,36,ButtonBackSpRShiftUp,ButtonBackSpRShiftDown,0,KeyboardButtonShift,BOffsetPosX[36],BPosYLine3,ShiftFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ShiftButtonTextPosYUp,ButtonTextPosXDown,ShiftButtonTextPosYDown,ShiftButtPosX,False)

			 //123#)
//				MyButton[37].Create(Me,37,KeyboardButtonSwitchUp,KeyboardButtonSwitchDown,0,Nothing,BOffsetPosX[37],BPosYLine4,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[37].Create(Me,37,KeyboardButtonSwitch1UpActual,KeyboardButtonSwitch1DownActual,0,Nothing,BOffsetPosX[37],BPosYLine4,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				If ShowLanguageButton Then
					MyButton[IndexLanguage].Create(Me,IndexLanguage,KeyboardButtonUp,KeyboardButtonDown,0,KeyboardButtonLanguage,BOffsetPosX[IndexLanguage],BPosYLine4,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				Else
			 		MyButton[IndexLanguage].Create(Me,IndexLanguage,Nothing,Nothing,0,Nothing,0,0,Nothing,0,0,0,0,0,0,False)
				End If
			
				If ShowCustomButton Then
					MyButton[IndexCustom].Create(Me,IndexCustom,KeyboardButtonUp,KeyboardButtonDown,0,Nothing,BOffsetPosX[IndexCustom],BPosYLine4,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)			
				Else
			 		MyButton[IndexCustom].Create(Me,IndexCustom,Nothing,Nothing,0,Nothing,0,0,Nothing,0,0,0,0,0,0,False)				
				End If
			 //Space
				MyButton[38].Create(Me,38,KeyboardButtonSpaceUp,KeyboardButtonSpaceDown,0,Nothing,BOffsetPosX[38],BPosYLine4,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
			 //123#)
				MyButton[IndexSwitch2].Create(Me,IndexSwitch2,KeyboardButtonSwitch2UpActual,KeyboardButtonSwitch2DownActual,0,Nothing,BOffsetPosX[IndexSwitch2],BPosYLine4,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
		End If
	End Function
	
	Protected Function CreateTextFirstButtonsSmallRU()
		LargeB		 := False
//		If GetLanguage() = _LANGUAGE_NORWEGIAN_NYNORSK Or GetLanguage() = _LANGUAGE_NORWEGIAN_BOKML Then
		If KeyboardType = KEYBOARD_NORWEGIAN Then
				MyButton[1].CreateText(txtSmallQ,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[2].CreateText(txtSmallW,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[3].CreateText(txtSmallE,txtSmallE1,txtSmallE2,txtSmallE3,txtSmallE4,txtSmallE5,txtSmallE6,txtSmallE7,txtSmallE8,Nothing,Nothing)
				MyButton[4].CreateText(txtSmallR,txtSmallR1,txtSmallR2,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[5].CreateText(txtSmallT,txtSmallT1,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[6].CreateText(txtSmallY,txtSmallY1,txtSmallY2,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[7].CreateText(txtSmallU,txtSmallU1,txtSmallU2,txtSmallU3,txtSmallU4,txtSmallU5,txtSmallU6,Nothing,Nothing,Nothing,Nothing)
				MyButton[8].CreateText(txtSmallI,txtSmallI1,txtSmallI2,txtSmallI3,txtSmallI4,txtSmallI5,txtSmallI6,Nothing,Nothing,Nothing,Nothing)
				MyButton[9].CreateText(txtSmallO,txtSmallO1,txtsmallO2,txtSmallO4,txtSmallO5,txtSmallO6,txtSmallO7,txtSmallO8,Nothing,Nothing,Nothing)
				MyButton[10].CreateText(txtSmallP,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[11].CreateText(txtSmallA3,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //Backspace
				MyButton[12].CreateText(Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)

				MyButton[13].CreateText(txtSmallA,txtSmallA2,txtSmallA4,txtSmallA5,txtSmallA6,txtSmallA7,txtSmallA8,txtSmallA9,Nothing,Nothing,Nothing)
				MyButton[14].CreateText(txtSmallS,txtSmallS1,txtSmallS2,txtS3,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[15].CreateText(txtSmallD,txtSmallD1,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[16].CreateText(txtSmallF,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[17].CreateText(txtSmallG,txtSmallG1,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[18].CreateText(txtSmallH,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[19].CreateText(txtSmallJ,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[20].CreateText(txtSmallK,txtSmallK1,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[21].CreateText(txtSmallL,txtSmallL1,txtSmallL2,txtSmallL3,txtSmallL4,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[22].CreateText(txtSmallO3,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[23].CreateText(txtSmallA1,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //Enter
				MyButton[24].CreateText(txtEnter,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)	
	
			 //Shift
			 	MyButton[25].CreateText(MyTextABC,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[26].CreateText(txtSmallZ,txtSmallZ1,txtSmallZ2,txtSmallZ3,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[27].CreateText(txtSmallX,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[28].CreateText(txtSmallC,txtSmallC1,txtSmallC2,txtSmallC3,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[29].CreateText(txtSmallV,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[30].CreateText(txtSmallB,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[31].CreateText(txtSmallN,txtSmallN1,txtSmallN2,txtSmallN3,txtSmallN4,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[32].CreateText(txtSmallM,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[33].CreateText(txtPoint,txtLine,txtInterrogation,txtExclamation,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[34].CreateText(txtQuotation5,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[35].CreateText(txtSlash,txtReverseSlash,txtVertical,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //Shift
			 	MyButton[36].CreateText(MyTextABC,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)

			 //123#)
				MyButton[37].CreateText(txt123,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[40].CreateText(Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //Space
				MyButton[38].CreateText(txtSpace,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //123#)
				MyButton[39].CreateText(txt123,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
		Else
				MyButton[1].CreateText(txtRUSym1Small,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[2].CreateText(txtRUSym2Small,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[3].CreateText(txtRUSym3Small,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[4].CreateText(txtRUSym4Small,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[5].CreateText(txtRUSym5Small,txtRUSym51Small,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[6].CreateText(txtRUSym6Small,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[7].CreateText(txtRUSym7Small,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[8].CreateText(txtRUSym8Small,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[9].CreateText(txtRUSym9Small,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[10].CreateText(txtRUSym10Small,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[11].CreateText(txtRUSym11Small,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //Backspace
				MyButton[12].CreateText(Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)

				MyButton[13].CreateText(txtRUSym13Small,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[14].CreateText(txtRUSym14Small,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[15].CreateText(txtRUSym15Small,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[16].CreateText(txtRUSym16Small,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[17].CreateText(txtRUSym17Small,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[18].CreateText(txtRUSym18Small,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[19].CreateText(txtRUSym19Small,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[20].CreateText(txtRUSym20Small,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[21].CreateText(txtRUSym21Small,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[22].CreateText(txtRUSym22Small,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[23].CreateText(txtRUSym23Small,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //Enter
				MyButton[24].CreateText(txtEnter,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)	
	
			 //Shift
			 	MyButton[25].CreateText(MyTextABC,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[26].CreateText(txtRUSym26Small,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[27].CreateText(txtRUSym27Small,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[28].CreateText(txtRUSym28Small,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[29].CreateText(txtRUSym29Small,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[30].CreateText(txtRUSym30Small,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[31].CreateText(txtRUSym31Small,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[32].CreateText(txtRUSym32Small,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[33].CreateText(txtRUSym33Small,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[34].CreateText(txtRUSym34Small,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[35].CreateText(txtRUSym35Small,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //Shift
			 	MyButton[36].CreateText(MyTextABC,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)

			 //123#)
				MyButton[37].CreateText(txt123,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[40].CreateText(Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //Space
				MyButton[38].CreateText(txtSpace,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //123#)
				MyButton[39].CreateText(txt123,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
		End If
		If ShowCustomButton Then
			MyButton[IndexCustom].CreateText(CustomButtonText,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)			
		Else
			MyButton[IndexCustom].CreateText(Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)			
		End If
	End Function
	
	Protected Function CreateTextFirstButtonsLarge()	
		LargeB		 := True
//		If GetLanguage() = _LANGUAGE_GREEK Then
		If KeyboardType = KEYBOARD_GREEK Then
			 //;
				MyButton[1].CreateText(txtSemicolon,txtColon,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //ς
				MyButton[2].CreateText(txtEndsigma,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //E
				MyButton[3].CreateText(txtE,txtEpsilon1,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //P
				MyButton[4].CreateText(txtP,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //T
				MyButton[5].CreateText(txtT,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //Y
				MyButton[6].CreateText(txtY,txtY2,txtYpsilon1,txtYpsilon2,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //Θ
				MyButton[7].CreateText(txtTheta,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //I
				MyButton[8].CreateText(txtI_Greek,txtI3_Greek,txtIota1,txtIota2,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //O
				MyButton[9].CreateText(txtO,txtOmicron1,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //Π
				MyButton[10].CreateText(txtPi,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //Backspace
				MyButton[11].CreateText(Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)

			 //A
				MyButton[12].CreateText(txtA,txtAlpha1,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //Σ
				MyButton[13].CreateText(txtSigma,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //Δ
				MyButton[14].CreateText(txtDelta,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //Φ
				MyButton[15].CreateText(txtPhi,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //Γ
				MyButton[16].CreateText(txtGama,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //H
				MyButton[17].CreateText(txtH,txtEta1,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //Ξ
				MyButton[18].CreateText(txtXi,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //K
				MyButton[19].CreateText(txtK,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //Λ
				MyButton[20].CreateText(txtLambda,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //Enter
				MyButton[21].CreateText(txtEnter,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)	
 
			 //Shift
			 	MyButton[22].CreateText(MyTextABCSmall,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //Z
			 	MyButton[23].CreateText(txtZ_Greek,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)		
			 //X
				MyButton[24].CreateText(txtX,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //Ψ
				MyButton[25].CreateText(txtPsi,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //Ω
				MyButton[26].CreateText(txtOmega,txtOmega1,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //B
				MyButton[27].CreateText(txtB_Greek,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //N
				MyButton[28].CreateText(txtN_Greek,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //M
				MyButton[29].CreateText(txtM_Greek,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //.
				MyButton[30].CreateText(txtPoint,txtLine,txtInterrogation,txtExclamation,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //'
				MyButton[31].CreateText(txtQuotation5,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //Shift
				MyButton[32].CreateText(MyTextABCSmall,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
		Else
			 //Q
				MyButton[1].CreateText(txtQ,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //W
				MyButton[2].CreateText(txtW,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //E
				MyButton[3].CreateText(txtE,txtE1,txtE2,txtE3,txtE4,txtE5,txtE6,txtE7,txtE8,Nothing,Nothing)
			 //R
				MyButton[4].CreateText(txtR,txtR1,txtR2,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //T
				MyButton[5].CreateText(txtT,txtT1,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //Y
				MyButton[6].CreateText(txtY,txtY1,txtY2,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //U
				MyButton[7].CreateText(txtU,txtU1,txtU2,txtU3,txtU4,txtU5,txtU6,Nothing,Nothing,Nothing,Nothing)
			 //I
				MyButton[8].CreateText(txtI,txtI1,txtI2,txtI3,txtI4,txtI5,txtI6,Nothing,Nothing,Nothing,Nothing)
			 //O
				MyButton[9].CreateText(txtO,txtO1,txtO2,txtO3,txtO4,txtO5,txtO6,txtO7,txtO8,Nothing,Nothing)
			 //P
				MyButton[10].CreateText(txtP,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //Backspace
				MyButton[11].CreateText(Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)

			 //A
				MyButton[12].CreateText(txtA,txtA1,txtA2,txtA3,txtA4,txtA5,txtA6,txtA7,txtA8,txtA9,Nothing)
			 //S
				MyButton[13].CreateText(txtS,txtS1,txtS2,txtS3,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //D
				MyButton[14].CreateText(txtD,txtD1,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //F
				MyButton[15].CreateText(txtF,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //G
				MyButton[16].CreateText(txtG,txtG1,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //H
				MyButton[17].CreateText(txtH,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //J
				MyButton[18].CreateText(txtJ,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //K
				MyButton[19].CreateText(txtK,txtK1,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //L
				MyButton[20].CreateText(txtL,txtL1,txtL2,txtL3,txtL4,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //Enter
				MyButton[21].CreateText(txtEnter,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)	
 
			 //Shift
			 	MyButton[22].CreateText(MyTextABCSmall,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //Z
			 	MyButton[23].CreateText(txtZ,txtZ1,txtZ2,txtZ3,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)		
			 //X
				MyButton[24].CreateText(txtX,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //C
				MyButton[25].CreateText(txtC,txtC1,txtC2,txtC3,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //V
				MyButton[26].CreateText(txtV,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //B
				MyButton[27].CreateText(txtB,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //N
				MyButton[28].CreateText(txtN,txtN1,txtN2,txtN3,txtN4,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //M
				MyButton[29].CreateText(txtM,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //.
				MyButton[30].CreateText(txtPoint,txtLine,txtInterrogation,txtExclamation,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //'
				MyButton[31].CreateText(txtQuotation5,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //Shift
				MyButton[32].CreateText(MyTextABCSmall,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
		End If
			 //123#)
				MyButton[33].CreateText(txt123,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[36].CreateText(Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //Space
				MyButton[34].CreateText(txtSpace,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //123#)
				MyButton[35].CreateText(txt123,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				If ShowCustomButton Then
					MyButton[IndexCustom].CreateText(CustomButtonText,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)			
				Else
			 		MyButton[IndexCustom].CreateText(Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)			
				End If
	End Function

	Protected Function CreateFirstButtons()	
		CreateFirstB := True
//			If GetLanguage() = _LANGUAGE_GREEK Then
			If KeyboardType = KEYBOARD_GREEK Then
				MyButton[1].Create(Me,1,ButtonUp,ButtonDown,1,Nothing,BOffsetPosX[1],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
				MyButton[2].Create(Me,2,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[2],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[3].Create(Me,3,ButtonUp,ButtonDown,1,Nothing,BOffsetPosX[3],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
				MyButton[4].Create(Me,4,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[4],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[5].Create(Me,5,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[5],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[6].Create(Me,6,ButtonUp,ButtonDown,3,Nothing,BOffsetPosX[6],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
				MyButton[7].Create(Me,7,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[7],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[8].Create(Me,8,ButtonUp,ButtonDown,3,Nothing,BOffsetPosX[8],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
				MyButton[9].Create(Me,9,ButtonUp,ButtonDown,1,Nothing,BOffsetPosX[9],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
				MyButton[10].Create(Me,10,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[10],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
			 //Backspace
				MyButton[11].Create(Me,11,ButtonBackSpRShiftUp,ButtonBackSpRShiftDown,0,KeyboardButtonBackspace,BOffsetPosX[11],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)

				MyButton[12].Create(Me,12,ButtonUp,ButtonDown,1,Nothing,BOffsetPosX[12],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
				MyButton[13].Create(Me,13,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[13],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[14].Create(Me,14,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[14],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[15].Create(Me,15,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[15],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[16].Create(Me,16,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[16],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[17].Create(Me,17,ButtonUp,ButtonDown,1,Nothing,BOffsetPosX[17],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
				MyButton[18].Create(Me,18,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[18],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[19].Create(Me,19,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[19],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[20].Create(Me,20,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[20],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
			 //Enter
				MyButton[21].Create(Me,21,ButtonEnterUp,ButtonEnterDown,0,Nothing,BOffsetPosX[21],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				
			 //Shift
			 	MyButton[22].CreateShiftButton(Me,22,ButtonUp,ButtonDown,0,KeyboardButtonShift,BOffsetPosX[22],BPosYLine3,ShiftFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ShiftButtonTextPosYUp,ButtonTextPosXDown,ShiftButtonTextPosYDown,ShiftButtPosX,False)
			 	
			 	MyButton[23].Create(Me,23,KeyboardButtonUp,KeyboardButtonDown,0,Nothing,BOffsetPosX[23],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[24].Create(Me,24,KeyboardButtonUp,KeyboardButtonDown,0,Nothing,BOffsetPosX[24],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[25].Create(Me,25,KeyboardButtonUp,KeyboardButtonDown,0,Nothing,BOffsetPosX[25],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[26].Create(Me,26,KeyboardButtonUp,KeyboardButtonDown,1,Nothing,BOffsetPosX[26],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
				MyButton[27].Create(Me,27,KeyboardButtonUp,KeyboardButtonDown,0,Nothing,BOffsetPosX[27],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[28].Create(Me,28,KeyboardButtonUp,KeyboardButtonDown,0,Nothing,BOffsetPosX[28],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[29].Create(Me,29,KeyboardButtonUp,KeyboardButtonDown,0,Nothing,BOffsetPosX[29],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
			 //.
				MyButton[30].Create(Me,30,KeyboardButtonUp,KeyboardButtonDown,3,Nothing,BOffsetPosX[30],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
			 //'
				MyButton[31].Create(Me,31,KeyboardButtonUp,KeyboardButtonDown,0,Nothing,BOffsetPosX[31],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
			 //Shift
				MyButton[32].CreateShiftButton(Me,32,ButtonBackSpRShiftUp,ButtonBackSpRShiftDown,0,KeyboardButtonShift,BOffsetPosX[32],BPosYLine3,ShiftFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ShiftButtonTextPosYUp,ButtonTextPosXDown,ShiftButtonTextPosYDown,ShiftButtPosX,False)			
			Else
			 //Q
				MyButton[1].Create(Me,1,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[1],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
			 //W
				MyButton[2].Create(Me,2,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[2],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
			 //E
				MyButton[3].Create(Me,3,ButtonUp,ButtonDown,8,Nothing,BOffsetPosX[3],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
			 //R
				MyButton[4].Create(Me,4,ButtonUp,ButtonDown,2,Nothing,BOffsetPosX[4],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
			 //T
				MyButton[5].Create(Me,5,ButtonUp,ButtonDown,1,Nothing,BOffsetPosX[5],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
			 //Y
				MyButton[6].Create(Me,6,ButtonUp,ButtonDown,2,Nothing,BOffsetPosX[6],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
			 //U
				MyButton[7].Create(Me,7,ButtonUp,ButtonDown,6,Nothing,BOffsetPosX[7],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
			 //I
				MyButton[8].Create(Me,8,ButtonUp,ButtonDown,6,Nothing,BOffsetPosX[8],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
			 //O
				MyButton[9].Create(Me,9,ButtonUp,ButtonDown,8,Nothing,BOffsetPosX[9],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
			 //P
				MyButton[10].Create(Me,10,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[10],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
			 //Backspace
				MyButton[11].Create(Me,11,ButtonBackSpRShiftUp,ButtonBackSpRShiftDown,0,KeyboardButtonBackspace,BOffsetPosX[11],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)

			 //A
				MyButton[12].Create(Me,12,ButtonUp,ButtonDown,9,Nothing,BOffsetPosX[12],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
			 //S
				MyButton[13].Create(Me,13,ButtonUp,ButtonDown,3,Nothing,BOffsetPosX[13],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
			 //D
				MyButton[14].Create(Me,14,ButtonUp,ButtonDown,1,Nothing,BOffsetPosX[14],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
			 //F
				MyButton[15].Create(Me,15,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[15],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
			 //G
				MyButton[16].Create(Me,16,ButtonUp,ButtonDown,1,Nothing,BOffsetPosX[16],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
			 //H
				MyButton[17].Create(Me,17,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[17],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
			 //J
				MyButton[18].Create(Me,18,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[18],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
			 //K
				MyButton[19].Create(Me,19,ButtonUp,ButtonDown,1,Nothing,BOffsetPosX[19],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
			 //L
				MyButton[20].Create(Me,20,ButtonUp,ButtonDown,4,Nothing,BOffsetPosX[20],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
			 //Enter
				MyButton[21].Create(Me,21,ButtonEnterUp,ButtonEnterDown,0,Nothing,BOffsetPosX[21],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				
			 //Shift
			 	MyButton[22].CreateShiftButton(Me,22,ButtonUp,ButtonDown,0,KeyboardButtonShift,BOffsetPosX[22],BPosYLine3,ShiftFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ShiftButtonTextPosYUp,ButtonTextPosXDown,ShiftButtonTextPosYDown,ShiftButtPosX,False)
			 //Z
			 	MyButton[23].Create(Me,23,KeyboardButtonUp,KeyboardButtonDown,3,Nothing,BOffsetPosX[23],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
			 //X
				MyButton[24].Create(Me,24,KeyboardButtonUp,KeyboardButtonDown,0,Nothing,BOffsetPosX[24],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
			 //C
				MyButton[25].Create(Me,25,KeyboardButtonUp,KeyboardButtonDown,3,Nothing,BOffsetPosX[25],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
			 //V
				MyButton[26].Create(Me,26,KeyboardButtonUp,KeyboardButtonDown,0,Nothing,BOffsetPosX[26],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
			 //B
				MyButton[27].Create(Me,27,KeyboardButtonUp,KeyboardButtonDown,0,Nothing,BOffsetPosX[27],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
			 //N
				MyButton[28].Create(Me,28,KeyboardButtonUp,KeyboardButtonDown,4,Nothing,BOffsetPosX[28],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
			 //M
				MyButton[29].Create(Me,29,KeyboardButtonUp,KeyboardButtonDown,0,Nothing,BOffsetPosX[29],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
			 //.
				MyButton[30].Create(Me,30,KeyboardButtonUp,KeyboardButtonDown,3,Nothing,BOffsetPosX[30],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
			 //'
				MyButton[31].Create(Me,31,KeyboardButtonUp,KeyboardButtonDown,0,Nothing,BOffsetPosX[31],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
			 //Shift
				MyButton[32].CreateShiftButton(Me,32,ButtonBackSpRShiftUp,ButtonBackSpRShiftDown,0,KeyboardButtonShift,BOffsetPosX[32],BPosYLine3,ShiftFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ShiftButtonTextPosYUp,ButtonTextPosXDown,ShiftButtonTextPosYDown,ShiftButtPosX,False)
		End If
			 //123#)
//				MyButton[33].Create(Me,33,KeyboardButtonSwitchUp,KeyboardButtonSwitchDown,0,Nothing,BOffsetPosX[33],BPosYLine4,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[33].Create(Me,33,KeyboardButtonSwitch1UpActual,KeyboardButtonSwitch1DownActual,0,Nothing,BOffsetPosX[33],BPosYLine4,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)

				If ShowLanguageButton Then
					MyButton[IndexLanguage].Create(Me,IndexLanguage,KeyboardButtonUp,KeyboardButtonDown,0,KeyboardButtonLanguage,BOffsetPosX[IndexLanguage],BPosYLine4,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
			 	Else
			 		MyButton[IndexLanguage].Create(Me,IndexLanguage,Nothing,Nothing,0,Nothing,0,0,Nothing,0,0,0,0,0,0,False)
			 	End If

			 	If ShowCustomButton Then
					MyButton[IndexCustom].Create(Me,IndexCustom,KeyboardButtonUp,KeyboardButtonDown,0,Nothing,BOffsetPosX[IndexCustom],BPosYLine4,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)			
				Else
			 		MyButton[IndexCustom].Create(Me,IndexCustom,Nothing,Nothing,0,Nothing,0,0,Nothing,0,0,0,0,0,0,False)				
				End If
				
			 //Space
				MyButton[34].Create(Me,34,KeyboardButtonSpaceUp,KeyboardButtonSpaceDown,0,Nothing,BOffsetPosX[34],BPosYLine4,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
			 //123#)
				MyButton[35].Create(Me,35,KeyboardButtonSwitch2UpActual,KeyboardButtonSwitch2DownActual,0,Nothing,BOffsetPosX[35],BPosYLine4,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
	
//			MyButton[36].Create(Me,36,Nothing,Nothing,0,Nothing,0,0,Nothing,0,0,0,0,0,0,False)
//			MyButton[37].Create(Me,37,Nothing,Nothing,0,Nothing,0,0,Nothing,0,0,0,0,0,0,False)
			MyButton[38].Create(Me,38,Nothing,Nothing,0,Nothing,0,0,Nothing,0,0,0,0,0,0,False)
			MyButton[39].Create(Me,39,Nothing,Nothing,0,Nothing,0,0,Nothing,0,0,0,0,0,0,False)
			MyButton[40].Create(Me,40,Nothing,Nothing,0,Nothing,0,0,Nothing,0,0,0,0,0,0,False)
	End Function
	
	Protected Function CreateTextFirstButtonsSmall()
		LargeB		 := False
//		If GetLanguage() = _LANGUAGE_GREEK Then
		If KeyboardType = KEYBOARD_GREEK Then
			 //;
				MyButton[1].CreateText(txtSemicolon,txtColon,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //ς
				MyButton[2].CreateText(txtEndsigma,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //ε
				MyButton[3].CreateText(txtSmallEpsilon,txtSmallEpsilon1,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //ρ
				MyButton[4].CreateText(txtSmallRho,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //τ
				MyButton[5].CreateText(txtSmallTau,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //υ
				MyButton[6].CreateText(txtSmalUpsilon,txtSmalUpsilon1,txtSmalUpsilon2,txtSmalUpsilon3,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //θ
				MyButton[7].CreateText(txtSmallTheta,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //ι
				MyButton[8].CreateText(txtSmallIota,txtSmallIota1,txtSmallIota2,txtSmallIota3,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //o
				MyButton[9].CreateText(txtSmallO,txtSmallO6,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //π
				MyButton[10].CreateText(txtSmallPi,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //Backspace
				MyButton[11].CreateText(Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)

			 //α
				MyButton[12].CreateText(txtSmallAlpha,txtSmallAlpha1,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //σ
				MyButton[13].CreateText(txtSmallSigma,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //δ
				MyButton[14].CreateText(txtSmallDelta,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //Φ
				MyButton[15].CreateText(txtSmallPhi,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //γ
				MyButton[16].CreateText(txtSmallGama,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //η
				MyButton[17].CreateText(txtSmallEta,txtSmallEta1,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //ξ
				MyButton[18].CreateText(txtSmallXi,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //κ
				MyButton[19].CreateText(txtSmallKappa,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //λ
				MyButton[20].CreateText(txtSmallLambda,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //Enter
				MyButton[21].CreateText(txtEnter,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)	
 
			 //Shift
			 	MyButton[22].CreateText(MyTextABCSmall,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //ζ
			 	MyButton[23].CreateText(txtSmallZ_Greek,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)		
			 //χ
				MyButton[24].CreateText(txtSmallChi,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //ψ
				MyButton[25].CreateText(txtSmallPsi,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //ω
				MyButton[26].CreateText(txtSmallOmega,txtSmallOmega1,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //β
				MyButton[27].CreateText(txtSmallB_Greek,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //ν
				MyButton[28].CreateText(txtSmallN_Greek,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //μ
				MyButton[29].CreateText(txtSmallM_Greek,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //.
				MyButton[30].CreateText(txtPoint,txtLine,txtInterrogation,txtExclamation,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //'
				MyButton[31].CreateText(txtQuotation5,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //Shift
				MyButton[32].CreateText(MyTextABCSmall,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
		Else
			 //Q
				MyButton[1].CreateText(txtSmallQ,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //W
				MyButton[2].CreateText(txtSmallW,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //E
				MyButton[3].CreateText(txtSmallE,txtSmallE1,txtSmallE2,txtSmallE3,txtSmallE4,txtSmallE5,txtSmallE6,txtSmallE7,txtSmallE8,Nothing,Nothing)
			 //R
				MyButton[4].CreateText(txtSmallR,txtSmallR1,txtSmallR2,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //T
				MyButton[5].CreateText(txtSmallT,txtSmallT1,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //Y
				MyButton[6].CreateText(txtSmallY,txtSmallY1,txtSmallY2,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //U
				MyButton[7].CreateText(txtSmallU,txtSmallU1,txtSmallU2,txtSmallU3,txtSmallU4,txtSmallU5,txtSmallU6,Nothing,Nothing,Nothing,Nothing)
			 //I
				MyButton[8].CreateText(txtSmallI,txtSmallI1,txtSmallI2,txtSmallI3,txtSmallI4,txtSmallI5,txtSmallI6,Nothing,Nothing,Nothing,Nothing)
			 //O
				MyButton[9].CreateText(txtSmallO,txtSmallO1,txtsmallO2,txtSmallO3,txtSmallO4,txtSmallO5,txtSmallO6,txtSmallO7,txtSmallO8,Nothing,Nothing)
			 //P
				MyButton[10].CreateText(txtSmallP,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //Backspace
				MyButton[11].CreateText(Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)

			 //A
				MyButton[12].CreateText(txtSmallA,txtSmallA1,txtSmallA2,txtSmallA3,txtSmallA4,txtSmallA5,txtSmallA6,txtSmallA7,txtSmallA8,txtSmallA9,Nothing)
			 //S
				MyButton[13].CreateText(txtSmallS,txtSmallS1,txtSmallS2,txtS3,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //D
				MyButton[14].CreateText(txtSmallD,txtSmallD1,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //F
				MyButton[15].CreateText(txtSmallF,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //G
				MyButton[16].CreateText(txtSmallG,txtSmallG1,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //H
				MyButton[17].CreateText(txtSmallH,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //J
				MyButton[18].CreateText(txtSmallJ,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //K
				MyButton[19].CreateText(txtSmallK,txtSmallK1,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //L
				MyButton[20].CreateText(txtSmallL,txtSmallL1,txtSmallL2,txtSmallL3,txtSmallL4,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //Enter
				MyButton[21].CreateText(txtEnter,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)	

			 //Shift
			 	MyButton[22].CreateText(MyTextABC,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)	
			 //Z
			 	MyButton[23].CreateText(txtSmallZ,txtSmallZ1,txtSmallZ2,txtSmallZ3,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)		
			 //X
				MyButton[24].CreateText(txtSmallX,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //C
				MyButton[25].CreateText(txtSmallC,txtSmallC1,txtSmallC2,txtSmallC3,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //V
				MyButton[26].CreateText(txtSmallV,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //B
				MyButton[27].CreateText(txtSmallB,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //N
				MyButton[28].CreateText(txtSmallN,txtSmallN1,txtSmallN2,txtSmallN3,txtSmallN4,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //M
				MyButton[29].CreateText(txtSmallM,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //.
				MyButton[30].CreateText(txtPoint,txtLine,txtInterrogation,txtExclamation,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //'
				MyButton[31].CreateText(txtQuotation5,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //Shift
				MyButton[32].CreateText(MyTextABC,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)	
		End If
			 //123#)
				MyButton[33].CreateText(txt123,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[36].CreateText(Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)						
			 //Space
				MyButton[34].CreateText(txtSpace,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //123#)
				MyButton[35].CreateText(txt123,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)	
	
//			MyButton[36].Create(Me,36,Nothing,Nothing,0,Nothing,0,0,Nothing,0,0,0,0,0,0,False)
//			MyButton[37].Create(Me,37,Nothing,Nothing,0,Nothing,0,0,Nothing,0,0,0,0,0,0,False)
			MyButton[38].Create(Me,38,Nothing,Nothing,0,Nothing,0,0,Nothing,0,0,0,0,0,0,False)
			MyButton[39].Create(Me,39,Nothing,Nothing,0,Nothing,0,0,Nothing,0,0,0,0,0,0,False)
			MyButton[40].Create(Me,40,Nothing,Nothing,0,Nothing,0,0,Nothing,0,0,0,0,0,0,False)
				If ShowCustomButton Then
					MyButton[IndexCustom].CreateText(CustomButtonText,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)			
				Else
			 		MyButton[IndexCustom].CreateText(Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)			
				End If
				
	End Function
	
	Protected Function CreateTextSecondButtons() 

			 //1
				MyButton[1].CreateText(txt1,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //2
				MyButton[2].CreateText(txt2,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //3
				MyButton[3].CreateText(txt3,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //4
				MyButton[4].CreateText(txt4,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //5
				MyButton[5].CreateText(txt5,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //6
				MyButton[6].CreateText(txt6,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //7
				MyButton[7].CreateText(txt7,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //8
				MyButton[8].CreateText(txt8,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //9
				MyButton[9].CreateText(txt9,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //0
				MyButton[10].CreateText(txt0,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //Backspace
				MyButton[IndexBackspace].CreateText(Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)

			 //-
				MyButton[IndexBackspace+1].CreateText(txtDash,txtUnderscore,txtPointItem,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 ///
				MyButton[IndexBackspace+2].CreateText(txtSlash,txtReverseSlash,txtVertical,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //:
				MyButton[IndexBackspace+3].CreateText(txtColon,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //;
				MyButton[IndexBackspace+4].CreateText(txtSemicolon,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //(
				MyButton[IndexBackspace+5].CreateText(txtLeftBracket,txtLeftAngularBracket,txtLeftCompBracket,txtLeftLessThanSign,txtTwoLeftLessThanSign,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //)
				MyButton[IndexBackspace+6].CreateText(txtRightBracket,txtRightAngularBracket,txtRightCompBracket,txtRightLessThanSign,txtTwoRightLessThanSign,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //€
				MyButton[IndexBackspace+7].CreateText(txtEuro,txtYen,txtDollar,txtCent,txtPound,txtWon,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //&
				MyButton[IndexBackspace+8].CreateText(txtAnd,txtArticle ,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //@
				MyButton[IndexBackspace+9].CreateText(txtAtSign,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //Enter
				MyButton[IndexEnter].CreateText(txtEnter,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)	
			
			 //Shift
			 	MyButton[IndexShift1].CreateText(Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //+
			 	MyButton[IndexShift1+1].CreateText(txtPlus,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)		
 			 //*
				MyButton[IndexShift1+2].CreateText(txtMultip,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //=
				MyButton[IndexShift1+3].CreateText(txtEqualSign,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //.
				MyButton[IndexShift1+4].CreateText(txtPoint,txtThreePoints,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //,
				MyButton[IndexShift1+5].CreateText(txtLine,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //?
				MyButton[IndexShift1+6].CreateText(txtInterrogation,txtRevInterrogation,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //!
				MyButton[IndexShift1+7].CreateText(txtExclamation,txtRevExclamation,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //"
				MyButton[IndexShift1+8].CreateText(txtQuotationUp,txtQuotationDown,txtQuotation1,txtQuotation2,txtQuotation3,txtQuotation4,txtQuotation5,txtAcute,txtRevAcute,txtHacek,txtUmlaut)
			 //%
				MyButton[IndexShift1+9].CreateText(txtPercent,txtPromile,txtSharp,txtCircumflex,txtWave,txtDegree,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //Shift
				MyButton[IndexShift2].CreateText(Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
	
			 //ABC
				MyButton[IndexSwitch1].CreateText(MyTextABC,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
 				MyButton[IndexLanguage].CreateText(Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			
 			 //Space
				MyButton[IndexSwitch1+1].CreateText(txtSpace,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //ABC
				MyButton[IndexSwitch2].CreateText(MyTextABC,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)	
			
//			If GetLanguage() = _LANGUAGE_RUSSIAN Or GetLanguage() = _LANGUAGE_NORWEGIAN_NYNORSK Or GetLanguage() = _LANGUAGE_NORWEGIAN_BOKML Then
			If KeyboardType = KEYBOARD_CYRILLIC Or KeyboardType = KEYBOARD_NORWEGIAN Then
				MyButton[11].CreateText(Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[22].CreateText(Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[23].CreateText(Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
				MyButton[35].CreateText(Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			End If
			
				If ShowCustomButton Then
					MyButton[IndexCustom].CreateText(CustomButtonText,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)			
				Else
			 		MyButton[IndexCustom].CreateText(Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)			
				End If
			If ShowCustomButton Then
				MyButton[IndexCustom].CreateText(CustomButtonText,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)			
			Else
			 	MyButton[IndexCustom].CreateText(Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)			
			End If					
	End Function
	
	Protected Function CreateSecondButtons() 
	Var i As Long		
		CreateFirstB := False

			 //1
				MyButton[1].Create(Me,1,KeyboardButtonUp,KeyboardButtonDown,0,Nothing,SecBOffsetPosX[1],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
			 //2
				MyButton[2].Create(Me,2,KeyboardButtonUp,KeyboardButtonDown,0,Nothing,SecBOffsetPosX[2],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
			 //3
				MyButton[3].Create(Me,3,KeyboardButtonUp,KeyboardButtonDown,0,Nothing,SecBOffsetPosX[3],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
			 //4
				MyButton[4].Create(Me,4,KeyboardButtonUp,KeyboardButtonDown,0,Nothing,SecBOffsetPosX[4],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
			 //5
				MyButton[5].Create(Me,5,KeyboardButtonUp,KeyboardButtonDown,0,Nothing,SecBOffsetPosX[5],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
			 //6
				MyButton[6].Create(Me,6,KeyboardButtonUp,KeyboardButtonDown,0,Nothing,SecBOffsetPosX[6],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
			 //7
				MyButton[7].Create(Me,7,KeyboardButtonUp,KeyboardButtonDown,0,Nothing,SecBOffsetPosX[7],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
			 //8
				MyButton[8].Create(Me,8,KeyboardButtonUp,KeyboardButtonDown,0,Nothing,SecBOffsetPosX[8],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
			 //9
				MyButton[9].Create(Me,9,KeyboardButtonUp,KeyboardButtonDown,0,Nothing,SecBOffsetPosX[9],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
			 //0
				MyButton[10].Create(Me,10,KeyboardButtonUp,KeyboardButtonDown,0,Nothing,SecBOffsetPosX[10],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
			 //Backspace
				MyButton[IndexBackspace].Create(Me,IndexBackspace,KeyboardButtonUp,KeyboardButtonDown,0,KeyboardButtonBackspace,SecBOffsetPosX[11],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)

			 //-
				MyButton[IndexBackspace+1].Create(Me,IndexBackspace+1,KeyboardButtonUp,KeyboardButtonDown,2,Nothing,SecBOffsetPosX[12],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
			 ///
				MyButton[IndexBackspace+2].Create(Me,IndexBackspace+2,KeyboardButtonUp,KeyboardButtonDown,2,Nothing,SecBOffsetPosX[13],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
			 //:
				MyButton[IndexBackspace+3].Create(Me,IndexBackspace+3,KeyboardButtonUp,KeyboardButtonDown,0,Nothing,SecBOffsetPosX[14],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
			 //;
				MyButton[IndexBackspace+4].Create(Me,IndexBackspace+4,KeyboardButtonUp,KeyboardButtonDown,0,Nothing,SecBOffsetPosX[15],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
			 //(
				MyButton[IndexBackspace+5].Create(Me,IndexBackspace+5,KeyboardButtonUp,KeyboardButtonDown,4,Nothing,SecBOffsetPosX[16],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
			 //)
				MyButton[IndexBackspace+6].Create(Me,IndexBackspace+6,KeyboardButtonUp,KeyboardButtonDown,4,Nothing,SecBOffsetPosX[17],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
			 //€
				MyButton[IndexBackspace+7].Create(Me,IndexBackspace+7,KeyboardButtonUp,KeyboardButtonDown,5,Nothing,SecBOffsetPosX[18],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
			 //&
				MyButton[IndexBackspace+8].Create(Me,IndexBackspace+8,KeyboardButtonUp,KeyboardButtonDown,1,Nothing,SecBOffsetPosX[19],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
			 //@
				MyButton[IndexBackspace+9].Create(Me,IndexBackspace+9,KeyboardButtonUp,KeyboardButtonDown,0,Nothing,SecBOffsetPosX[20],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
			 //Enter
				MyButton[IndexEnter].Create(Me,IndexEnter,KeyboardButtonEnterUp,KeyboardButtonEnterDown,0,Nothing,SecBOffsetPosX[21],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
			
			 //Shift
			 	MyButton[IndexShift1].Create(Me,IndexShift1,Nothing,Nothing,0,Nothing,SecBOffsetPosX[22],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
			 //+
			 	MyButton[IndexShift1+1].Create(Me,IndexShift1+1,KeyboardButtonUp,KeyboardButtonDown,0,Nothing,SecBOffsetPosX[23],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)		
 			 //*
				MyButton[IndexShift1+2].Create(Me,IndexShift1+2,KeyboardButtonUp,KeyboardButtonDown,0,Nothing,SecBOffsetPosX[24],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
			 //=
				MyButton[IndexShift1+3].Create(Me,IndexShift1+3,KeyboardButtonUp,KeyboardButtonDown,0,Nothing,SecBOffsetPosX[25],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
			 //.
				MyButton[IndexShift1+4].Create(Me,IndexShift1+4,KeyboardButtonUp,KeyboardButtonDown,1,Nothing,SecBOffsetPosX[26],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
			 //,
				MyButton[IndexShift1+5].Create(Me,IndexShift1+5,KeyboardButtonUp,KeyboardButtonDown,0,Nothing,SecBOffsetPosX[27],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
			 //?
				MyButton[IndexShift1+6].Create(Me,IndexShift1+6,KeyboardButtonUp,KeyboardButtonDown,1,Nothing,SecBOffsetPosX[28],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
			 //!
				MyButton[IndexShift1+7].Create(Me,IndexShift1+7,KeyboardButtonUp,KeyboardButtonDown,1,Nothing,SecBOffsetPosX[29],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
			 //"
				MyButton[IndexShift1+8].Create(Me,IndexShift1+8,KeyboardButtonUp,KeyboardButtonDown,7,Nothing,SecBOffsetPosX[30],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp,ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
			 //%
				MyButton[IndexShift1+9].Create(Me,IndexShift1+9,KeyboardButtonUp,KeyboardButtonDown,5,Nothing,SecBOffsetPosX[31],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
			 //Shift
				MyButton[IndexShift2].Create(Me,IndexShift2,Nothing,Nothing,0,Nothing,SecBOffsetPosX[32],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
			 	
			 //ABC
//				MyButton[IndexSwitch1].Create(Me,IndexSwitch1,KeyboardButtonSwitchUp,KeyboardButtonSwitchDown,0,Nothing,SecBOffsetPosX[IndexSwitch1],BPosYLine4,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[IndexSwitch1].Create(Me,IndexSwitch1,KeyboardButtonSwitch1UpActual,KeyboardButtonSwitch1DownActual,0,Nothing,SecBOffsetPosX[IndexSwitch1],BPosYLine4,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				If ShowLanguageButton Then
					MyButton[IndexLanguage].Create(Me,IndexLanguage,KeyboardButtonUp,KeyboardButtonDown,0,KeyboardButtonLanguage,SecBOffsetPosX[IndexSwitch2+1],BPosYLine4,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
  				Else
			 		MyButton[IndexLanguage].Create(Me,IndexLanguage,Nothing,Nothing,0,Nothing,0,0,Nothing,0,0,0,0,0,0,False)
  				End If
  				If ShowCustomButton Then
					MyButton[IndexCustom].Create(Me,IndexCustom,KeyboardButtonUp,KeyboardButtonDown,0,Nothing,BOffsetPosX[IndexCustom],BPosYLine4,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)			
				Else
			 		MyButton[IndexCustom].Create(Me,IndexCustom,Nothing,Nothing,0,Nothing,0,0,Nothing,0,0,0,0,0,0,False)				
				End If
 			 //Space
				MyButton[IndexSwitch1+1].Create(Me,IndexSwitch1+1,KeyboardButtonSpaceUp,KeyboardButtonSpaceDown,0,Nothing,SecBOffsetPosX[IndexSwitch1+1],BPosYLine4,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
			 //ABC
				MyButton[IndexSwitch2].Create(Me,IndexSwitch2,KeyboardButtonSwitch2UpActual,KeyboardButtonSwitch2DownActual,0,Nothing,SecBOffsetPosX[IndexSwitch2],BPosYLine4,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
			
//			If GetLanguage() = _LANGUAGE_RUSSIAN Or GetLanguage() = _LANGUAGE_NORWEGIAN_NYNORSK Or GetLanguage() = _LANGUAGE_NORWEGIAN_BOKML Then
			If KeyboardType = KEYBOARD_CYRILLIC Or KeyboardType = KEYBOARD_NORWEGIAN Then
				MyButton[11].Create(Me,11,Nothing,Nothing,0,Nothing,SecBOffsetPosX[11],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[22].Create(Me,22,Nothing,Nothing,0,Nothing,SecBOffsetPosX[22],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[23].Create(Me,23,Nothing,Nothing,0,Nothing,SecBOffsetPosX[23],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[35].Create(Me,35,Nothing,Nothing,0,Nothing,SecBOffsetPosX[35],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
			End If

	End Function

	Protected Function OpenKeyboardCell()
		If  MyButton[IndexButtonOnDown].HaveCell And MyButton[IndexButtonOnDown].ButtonActive = MyButton[IndexButtonOnDown].ButtonDown Then
			MyButtonCell.MyOpen(MyButton[IndexButtonOnDown].ButtonCellActive,MyButton[IndexButtonOnDown].MyPosX+MyButton[IndexButtonOnDown].ButtonDown.GetWidth()/2,MyButton[IndexButtonOnDown].MyPosY,MyButton[IndexButtonOnDown].MyCBTexts[1],MyButton[IndexButtonOnDown].MyCBTexts[2],MyButton[IndexButtonOnDown].MyCBTexts[3],MyButton[IndexButtonOnDown].MyCBTexts[4],MyButton[IndexButtonOnDown].MyCBTexts[5],MyButton[IndexButtonOnDown].MyCBTexts[6],MyButton[IndexButtonOnDown].MyCBTexts[7],MyButton[IndexButtonOnDown].MyCBTexts[8],MyButton[IndexButtonOnDown].MyCBTexts[9],MyButton[IndexButtonOnDown].MyCBTexts[9])
			MyButton[IndexButtonOnDown].MyTextColor := MyButton[IndexButtonOnDown].TextActiveColor
			ButtCellOpen := True
			Redraw(MyButtonCell.BackgroundPosX,MyButtonCell.BackgroundPosY,MyButtonCell.MyCellBackground.GetWidth(),MyButtonCell.MyCellBackground.GetHeight()+MyButtonCell.MyIndic.GetHeight())			
		End If
	End Function
	
	Protected Function WriteFSymbol(TextButton As AddressOf Text)
	Var n As Long
	Var i As Long
	
		ConcatenateText(MDT,MDT,TextButton)
		
		If IsPasswordmask And Not ButtonEyeOn Then
			n := GetTextActualLength(TextButton)
			PasswordText := ""
			If n > 0 Then		
				For i := 1 To n
					ConcatenateText(PasswordText,"*",PasswordText)
				End For
			End If
			
			TextButton := PasswordText
		End If
		
		ConcatenateText(MyDialogText,MyDialogText,TextButton)	
		LengthScrText()
		MumKursorPos := GetTextActualLength(MyDialogText)+1
		DrawKurzor()	
	End Function

	Protected Function WriteSymbol(TextButton As AddressOf Text)
		Var MyTextL As Text [500]
		Var MyTextR As Text [500]
		Var MyTextLMDT As Text [500]
		Var MyTextRMDT As Text [500]
		Var DontDrawText As Text [500]
		Var n As Long
		Var i As Long
	
		GetTextLeft(MDT,MumKursorPos-1,MyTextLMDT)
		GetTextRight(MDT,GetTextActualLength(MDT)- GetTextActualLength(MyTextLMDT),MyTextRMDT)		
		ConcatenateText(MDT,MyTextLMDT,TextButton,MyTextRMDT)		

		If IsPasswordmask And Not ButtonEyeOn Then
			n := GetTextActualLength(TextButton)
			PasswordText := ""
			If n > 0 Then		
				For i := 1 To n
					ConcatenateText(PasswordText,"*",PasswordText)
				End For
			End If
			
			TextButton := PasswordText
		End If
		
		GetTextLeft(MyDialogText,MumKursorPos-1,MyTextL)
		GetTextRight(MyDialogText,GetTextActualLength(MyDialogText)- GetTextActualLength(MyTextL),MyTextR)
		ConcatenateText(MyDialogText,MyTextL,TextButton,MyTextR)
			
		LengthScrText()

		If LeftDialogText Then
			If NumDontDrawText <> 0 Then
				GetTextRight(MyDialogText,NumDontDrawText,DontDrawText)
			Else
				DontDrawText := ""
			End If	
			KurzorX1 := DialogTextPosX + DialogFont.CalculateTextWidth(MyTextL) + DialogFont.CalculateTextWidth(TextButton)
			ConcatenateText(TextDial,MyTextL,TextButton)
		Else	
			If NumDontDrawText <> 0 Then
				GetTextLeft(MyDialogText,NumDontDrawText,DontDrawText)
			Else
				DontDrawText := ""
			End If								
			KurzorX1 := DialogTextPosX + DialogFont.CalculateTextWidth(MyTextL) - DialogFont.CalculateTextWidth(DontDrawText) + DialogFont.CalculateTextWidth(TextButton)
			ConcatenateText(TextDial,MyTextL,TextButton)
			GetTextRight(TextDial,GetTextActualLength(TextDial)-NumDontDrawText,TextDial)
		End If
		
		LengthScrText()
		If GetTextActualLength(TextButton) > 0 Then 
			MumKursorPos += GetTextActualLength(TextButton)
//		MumKursorPos += 1
		End If	
	End Function	
	
	Protected Function Enter()
		TouchEnter := True
		LastError := 0
//		CloseWindow()
		IsClose := True
		Close()
		RaiseEvent OnEnter(MDT,ObjectID)
	End Function
	
	Protected Function OnShow()
		StartTimer(2,:0.5,_TIMER_PERIODIC)
	End Function
	
	Protected Function OnHide()
		StopTimer(2)
	End Function

	Protected Function Delete()
		Var MyTextL As Text [500]
		Var MyTextR As Text [500]
		Var MyTextLMDT As Text [500]
		Var MyTextRMDT As Text [500]
		Var MyDontDrawText As Text [500]
		Var NumSymbol As Long
		Var NumSymbolTextDial As Long
		MyTextL := TextDial
		
		NumSymbolTextDial := GetTextActualLength(DialogText)-(GetTextActualLength(TextDial))
		GetTextRight(DialogText,NumSymbolTextDial-1,MyTextR)
		
		If NumDontDrawText <> 0 Then 
			If LeftDialogText Then
				GetTextRight(MyDialogText,NumDontDrawText,MyDontDrawText)		
			Else
				GetTextLeft(MyDialogText,NumDontDrawText,MyDontDrawText)
			End If
		Else
			MyDontDrawText := ""
		End If
		NumSymbol := GetTextActualLength(MyTextR)
		
		If LeftDialogText Then
			GetTextLeft(MDT,MumKursorPos-1,MyTextLMDT)
			GetTextRight(MDT,GetTextActualLength(MDT)-(MumKursorPos-1),MyTextRMDT)	
		Else
			GetTextLeft(MDT,MumKursorPos-1,MyTextLMDT)
			GetTextRight(MDT,NumSymbolTextDial,MyTextRMDT)		
		End If

		If GetTextActualLength(MyTextRMDT) > 0 Then
			
			If LeftDialogText Then	
				GetTextRight(MDT,GetTextActualLength(MDT)-(MumKursorPos),MyTextRMDT)		
				ConcatenateText(MyDialogText,MyTextL,MyTextR,MyDontDrawText)
				ConcatenateText(MDT,MyTextLMDT,MyTextRMDT)
			Else
				GetTextRight(MDT,NumSymbolTextDial-1,MyTextRMDT)
				ConcatenateText(MyDialogText,MyDontDrawText,MyTextL,MyTextR)
				ConcatenateText(MDT,MyTextLMDT,MyTextRMDT)
			End If
			LengthScrText()	
		
			If  GetTextActualLength(MyDialogText) >	GetTextActualLength(DialogText) Then
				If LeftDialogText Then
					GetTextLeft(DialogText,MumKursorPos-1,MyTextL)
				Else
					GetTextLeft(DialogText,MumKursorPos-NumDontDrawText-1,MyTextL)
				End If
			Else
				GetTextLeft(DialogText,MumKursorPos-1,MyTextL)	
			End If		
			TextDial := MyTextL	
		End If

		KurzorX1 := DialogTextPosX + DialogFont.CalculateTextWidth(MyTextL)	
	End Function
	
	Protected Function Backspace()
		Var MyTextL As Text [500]
		Var MyTextR As Text [500]
		Var MyTextLMDT As Text [500]
		Var MyTextRMDT As Text [500]
		Var MyDontDrawText As Text [500]
		Var NumSymbol As Long
		Var NumSymbolTextDial As Long

		MyTextL := TextDial
		
		NumSymbolTextDial := GetTextActualLength(DialogText)-(GetTextActualLength(TextDial))
		GetTextRight(DialogText,NumSymbolTextDial,MyTextR)
					
		If NumDontDrawText <> 0 Then 
			If LeftDialogText Then
				GetTextRight(MyDialogText,NumDontDrawText,MyDontDrawText)
			Else
				GetTextLeft(MyDialogText,NumDontDrawText,MyDontDrawText)
			End If
		Else
			MyDontDrawText := ""
		End If	

		NumSymbol := GetTextActualLength(MyTextL)

		If LeftDialogText Then
			GetTextLeft(MDT,MumKursorPos-2,MyTextLMDT)
			GetTextRight(MDT,GetTextActualLength(MDT)-(MumKursorPos-1),MyTextRMDT)	
		Else
			GetTextLeft(MDT,MumKursorPos-2,MyTextLMDT)
			GetTextRight(MDT,NumSymbolTextDial,MyTextRMDT)		
		End If

		If NumSymbol > 0 Then
			SetTextActualLength(MyTextL,NumSymbol-1)

			If LeftDialogText Then
				ConcatenateText(MyDialogText,MyTextL,MyTextR,MyDontDrawText)
				ConcatenateText(MDT,MyTextLMDT,MyTextRMDT)	
			Else
				ConcatenateText(MyDialogText,MyDontDrawText,MyTextL,MyTextR)
				ConcatenateText(MDT,MyTextLMDT,MyTextRMDT)
			End If

			MumKursorPos -= 1
			LengthScrText()	
		
			If  GetTextActualLength(MyDialogText) >	GetTextActualLength(DialogText) Then
				If LeftDialogText Then
					GetTextLeft(DialogText,MumKursorPos-1,MyTextL)
				Else
					GetTextLeft(DialogText,MumKursorPos-NumDontDrawText-1,MyTextL)
				End If
			Else
				GetTextLeft(DialogText,MumKursorPos-1,MyTextL)	
			End If		
			KurzorX1 := DialogTextPosX + DialogFont.CalculateTextWidth(MyTextL)
			TextDial := MyTextL	
		End If
		
	End Function

	Protected Function LengthScrText()
		Var NumSymbol As Long
		Var DialogtextWidth As Long:=DialogTextPosX+MyDialogTextBoxWidth
		Var DialogtextHeight As Long:=DialogFont.CalculateTextHeight("A",0,0)
		
		DialogText := MyDialogText	
		
		Do While DialogFont.CalculateTextWidth(DialogText) > MyDialogTextBoxWidth
			NumSymbol := GetTextActualLength(DialogText)
			If LeftDialogText Then		
				GetTextLeft(DialogText,NumSymbol-1,DialogText)
			Else
				GetTextRight(DialogText,NumSymbol-1,DialogText)
			End If	
		End Do

		If NumSymbol <= GetTextActualLength(MyDialogText) And NumSymbol <> 0 Then
			NumDontDrawText := GetTextActualLength(MyDialogText) - NumSymbol + 1
		Else
			NumDontDrawText := 0
		End If

		Redraw(DialogTextPosX,DialogTextPosY,DialogtextWidth,DialogtextHeight)
	End Function

	Protected Function OnTimer (timerId As Long)
		Select timerId
		Case 1
			If IndexButtonOnDown = IndexBackspace Then 		//backspace
				Backspace()
			End If
			StartTimer(1,:0.1)
		Case 2
			If KurzorX2 = 0 Then
				KurzorX2 := 3
			Else
				KurzorX2 := 0
			End If
		Case 3
			OpenKeyboardCell()
		End Select
		Redraw(KurzorX1,KurzorY1,3,KurzorY2)
	End Function 
	
	Protected Function DrawKurzor()
		KurzorX1 := DialogTextPosX + DialogFont.CalculateTextWidth(DialogText)
		KurzorY1 := DialogTextPosY
		KurzorY2 := DialogFont.CalculateTextHeight("A",0,0)
	End Function
	
	Protected Function Myredraw(x As Long, y As Long, width As Long, height As Long)
		Redraw(x,y,width,height)
	End Function
	
	Protected Function OnDraw()
		Var i 				As Long
		Var TextPosX 		As Long
		Var TextPosY 		As Long
		Var PosXButtCell 	As Long
		Var PosYButtCell 	As Long
		Var PosXCellText 	As Long
		Var PosYCellText 	As Long

		DrawRectangle(RectangleColor,0,DialogWindowRectanglePosY,KeyboardBackgroundWidth,KeyboardBackgroundHeight)
			
		If IsPasswordmask Then
			DrawPicture(DialogWindowEye,0,DialogWindowPosY)	
		Else
			DrawPicture(DialogWindow,0,DialogWindowPosY)
		End If
		
		If IsPasswordmask Then	
			DrawPicture(ButtonEyeActual,BClosePosX - ButtonEyeActual.GetWidth(),BClosePosY)
			DrawPicture(ButtonCloseActual,BClosePosX,BClosePosY)		
		Else
			DrawPicture(ButtonCloseActual,BClosePosX,BClosePosY)
		End If
		
		If GetTextActualLength(DialogText) < 1 Then
			DrawText(DialogFont,MyPromtText,PromtTextColor,DialogTextPosX,DialogTextPosY,DialogTextBoxWidth,-1)			
		Else
			DrawText(DialogFont,DialogText,ButtonDialogTextColor,DialogTextPosX,DialogTextPosY,DialogTextBoxWidth,-1)
		End If
	
		DrawRectangle(KurzorColor, KurzorX1,KurzorY1,KurzorX2,KurzorY2)
		
		For i := 1 To MaxButtons // IndexSwitch2//KEYBOARDBUTTONS
			TextPosX := ((MyButton[i].ButtonActive.GetWidth()/2) - (MyButton[i].ButtonFont.CalculateTextWidth(MyButton[i].ButtonText)/2)) + MyButton[i].MyPosX + MyButton[i].TextPosX
			TextPosY := ((MyButton[i].ButtonActive.GetHeight()/2) - (MyButton[i].ButtonFont.CalculateTextHeight(MyButton[i].ButtonText,0,0)/2)) + MyButton[i].MyPosY + MyButton[i].TextPosY

			DrawPicture(MyButton[i].ButtonActive,MyButton[i].MyPosX,MyButton[i].MyPosY)
			DrawPicture(MyButton[i].ButtonSymbol,MyButton[i].MyPosX + MyButton[i].ButtonCentreX + MyButton[i].TextPosX,MyButton[i].MyPosY + MyButton[i].ButtonCentreY + MyButton[i].TextPosY,-1,-1)
			DrawText(MyButton[i].ButtonFont,MyButton[i].ButtonText,_COLOR_WHITE,TextPosX + 1 ,TextPosY + 1 ,-1,-1)
			DrawText(MyButton[i].ButtonFont,MyButton[i].ButtonText,MyButton[i].MyTextColor,TextPosX,TextPosY,-1,-1)	
			
		End For 

		If ButtCellOpen Then
			DrawPicture(MyButtonCell.MyCellBackground,MyButtonCell.BackgroundPosX,MyButtonCell.BackgroundPosY)
			DrawPicture(KeyboardCellIndic,MyButtonCell.IndicPosX,MyButtonCell.IndicPosY)
	
			For i := 1 To MyButtonCell.ButtonsNumber
				PosXButtCell := MyButtonCell.BackgroundPosX+MyButtonCell.MyButton[i].PosXB
				PosYButtCell := MyButtonCell.BackgroundPosY+MyButtonCell.MyButton[i].PosYB
				PosXCellText := PosXButtCell+MyButtonCell.MyButton[i].TextPosX
				PosYCellText := PosYButtCell+MyButtonCell.MyButton[i].TextPosY
			
				DrawPicture(MyButtonCell.MyButton[i].MyButton, PosXButtCell, PosYButtCell)
				DrawText(KeyBoardFont,MyButtonCell.MyButton[i].ButtonText,_COLOR_WHITE,PosXCellText+1,PosYCellText+1,-1,-1)
				DrawText(KeyBoardFont,MyButtonCell.MyButton[i].ButtonText,ButtonTextColor,PosXCellText,PosYCellText,-1,-1)					
			End For	
		End If

	End Function
End GraphicClass

Class KeyboardButton 
	Friend BaseKeyboard
	Friend BaseNumpad
	
	Protected Var MyKeyboard					As AddressOf BaseKeyboard
	Public Var ButtonActive						As AddressOf _Picture := Nothing
	Public Var ButtonUp						As AddressOf _Picture := Nothing
	Public Var ButtonDown					As AddressOf _Picture := Nothing
	Public Var ButtonCellActive				As Long								//počet dalších tlačítek áä....
	Public Var ButtonSymbol						As AddressOf _Picture := Nothing

	Public Var ButtonText						As AddressOf Text := Nothing	
	Protected Var ShiftButtonTextLarge			As AddressOf Text := Nothing
	Protected Var ShiftButtonTextSmall			As AddressOf Text := Nothing
	Protected Var ShiftButtonTextFirstLarge 	As AddressOf Text := Nothing
	Public Var ButtonFont						As AddressOf _Font := Nothing
	
	Public Var TextColor						As Long := 0
	Public Var TextActiveColor				As Long := 0
	Public Var MyTextColor						As Long := 0
	Public Var TextPosXUp					As Long := 0
	Public Var TextPosYUp					As Long := 0
	Public Var TextPosXDown					As Long := 0
	Public Var TextPosYDown					As Long := 0
	Public Var TextPosX							As Long := 0
	Public Var TextPosY							As Long := 0
	Public Var ButtonCentreX					As Long := 0
	Public Var ButtonCentreY					As Long := 0
	Public Var MyPosX							As Long := 0
	Public Var MyPosY							As Long := 0
	Protected Var MyIndex						As Long := 0
	
//	Protected Var MyCBText1		As AddressOf Text := Nothing
//	Protected Var MyCBText2		As AddressOf Text := Nothing
//	Protected Var MyCBText3		As AddressOf Text := Nothing
//	Protected Var MyCBText4		As AddressOf Text := Nothing
//	Protected Var MyCBText5		As AddressOf Text := Nothing
//	Protected Var MyCBText6		As AddressOf Text := Nothing
//	Protected Var MyCBText7		As AddressOf Text := Nothing
//	Protected Var MyCBText8		As AddressOf Text := Nothing
//	Protected Var MyCBText9		As AddressOf Text := Nothing
//	Protected Var MyCBText10	As AddressOf Text := Nothing
	
	Public Var MyCBTexts [10] As Text[5]
	
	Public Var HaveCell		As Boolean
			
	Public Function Redraw()
		MyKeyboard.Myredraw(MyPosX,MyPosY,ButtonUp.GetWidth(),ButtonUp.GetHeight())
	End Function
	
	Protected Function GetPosition(x As Long, y As Long)
	End Function
	
	Protected Function CreateText(BText As AddressOf Text,CBText1 As Text,CBText2 As Text,CBText3 As Text,CBText4 As Text,CBText5 As Text,CBText6 As Text,CBText7 As Text,CBText8 As Text,CBText9 As Text,CBText10 As Text)
		Var i As Long
		ButtonText		:= BText
//		MyCBText1		:= CBText1
//		MyCBText2		:= CBText2
//		MyCBText3		:= CBText3
//		MyCBText4		:= CBText4
//		MyCBText5		:= CBText5
//		MyCBText6		:= CBText6
//		MyCBText7		:= CBText7
//		MyCBText8		:= CBText8
//		MyCBText9		:= CBText9
//		MyCBText10		:= CBText10 
		
		MyCBTexts[1]		:= CBText1
		MyCBTexts[2]		:= CBText2
		MyCBTexts[3]		:= CBText3
		MyCBTexts[4]		:= CBText4
		MyCBTexts[5]		:= CBText5
		MyCBTexts[6]		:= CBText6
		MyCBTexts[7]		:= CBText7
		MyCBTexts[8]		:= CBText8
		MyCBTexts[9]		:= CBText9
		MyCBTexts[10]		:= CBText10 
		Redraw()
	End Function
	
	Protected Function Create(parent As AddressOf BaseKeyboard,IndexB As Long, BAct As AddressOf _Picture, BNonAct As AddressOf _Picture, BCellAct As Long 
								,BSymbol As AddressOf _Picture, BPosX As Long, BPosY As Long, MyFont As AddressOf _Font,BTextCol As Long,BTextActCol As Long,
								BTextPosXUp As Long, BTextPosYUp As Long, BTextPosXDown As Long, BTextPosYDown As Long, BHaveCell As Boolean)
		MyKeyboard		:= parent
		ButtonUp		:= BAct
		ButtonDown		:= BNonAct
		ButtonCellActive:= BCellAct
		ButtonSymbol	:= BSymbol
		ButtonFont		:= MyFont
		TextColor		:= BTextCol
		TextActiveColor	:= BTextActCol
		HaveCell		:= BHaveCell
		TextPosXUp		:= BTextPosXUp
		TextPosYUp		:= BTextPosYUp
		TextPosXDown	:= BTextPosXDown
		TextPosYDown	:= BTextPosYDown
		MyPosX 			:= BPosX
		MyPosY			:= BPosY
		MyIndex			:= IndexB

		MyTextColor := TextColor

		ButtonCentreX := ButtonUp.GetWidth()/2 - ButtonSymbol.GetWidth()/2
		ButtonCentreY := ButtonUp.GetHeight()/2 - ButtonSymbol.GetHeight()/2
		
		ButtonActive := ButtonUp
		TextPosX := TextPosXUp
		TextPosY :=	TextPosYUp
		
	End Function
	
	Protected Function CreateShiftButton(parent As AddressOf BaseKeyboard,IndexB As Long, BAct As AddressOf _Picture, BNonAct As AddressOf _Picture, BCellAct As Long 
											,BSymbol As AddressOf _Picture,BPosX As Long, BPosY As Long, MyFont As AddressOf _Font,BTextCol As Long,BTextActCol As Long,
											BTextPosXUp As Long, ShiftBTextPosYUp As Long, BTextPosXDown As Long, ShiftBTextPosYDown As Long,PicShiftButtPosX As Long, BHaveCell As Boolean)
		Var ShiftPosXPic	As Long
		MyKeyboard		:= parent
		ButtonUp		:= BAct
		ButtonDown		:= BNonAct
		ButtonCellActive:= BCellAct
		ButtonSymbol	:= BSymbol

		ButtonFont		:= MyFont
		TextColor		:= BTextCol
		TextActiveColor	:= BTextActCol
		HaveCell		:= BHaveCell
		TextPosXUp		:= BTextPosXUp
		TextPosYUp		:= ShiftBTextPosYUp 
		TextPosXDown	:= BTextPosXDown
		TextPosYDown	:= ShiftBTextPosYDown 
		MyPosX 			:= BPosX
		MyPosY			:= BPosY
		MyIndex			:= IndexB
		ShiftPosXPic	:= PicShiftButtPosX

		MyTextColor := TextColor
			
		ButtonCentreX := ButtonUp.GetWidth()/2 - ButtonSymbol.GetWidth()/2
		ButtonCentreY := ButtonUp.GetHeight()/2 - ButtonSymbol.GetHeight()/2 - ButtonFont.CalculateTextHeight(ButtonText,0,0)/2 + PicShiftButtPosX
		ButtonActive := ButtonUp
		TextPosX := TextPosXUp 
		TextPosY :=	TextPosYUp
	End Function
	
	Protected Function DoubleButtonDownSwitch(SecondButtonIndex As Long)
		MyKeyboard.MyButton[SecondButtonIndex].ButtonActive := MyKeyboard.MyButton[SecondButtonIndex].ButtonDown
		MyKeyboard.MyButton[SecondButtonIndex].TextPosX := TextPosXDown
		MyKeyboard.MyButton[SecondButtonIndex].TextPosY := TextPosYDown
		MyKeyboard.MyButton[SecondButtonIndex].Redraw()	
	End Function
	
	Protected Function DoubleButtonUpSwitch(SecondButtonIndex As Long)
		MyKeyboard.MyButton[SecondButtonIndex].ButtonActive := MyKeyboard.MyButton[SecondButtonIndex].ButtonUp
		MyKeyboard.MyButton[SecondButtonIndex].TextPosX := TextPosXUp
		MyKeyboard.MyButton[SecondButtonIndex].TextPosY := TextPosYUp
		MyKeyboard.MyButton[SecondButtonIndex].Redraw()	
	End Function
	
	Protected Function DoubleButtonDownShift(SecondButtonIndex As Long)
		MyKeyboard.MyButton[SecondButtonIndex].ButtonActive := MyKeyboard.MyButton[SecondButtonIndex].ButtonDown
		MyKeyboard.MyButton[SecondButtonIndex].TextPosX 	:= TextPosXDown
		MyKeyboard.MyButton[SecondButtonIndex].TextPosY 	:= TextPosYDown
		MyKeyboard.MyButton[SecondButtonIndex].Redraw()	
	End Function
	
	Protected Function DoubleButtonUpShift(SecondButtonIndex As Long)
		MyKeyboard.MyButton[SecondButtonIndex].ButtonActive := MyKeyboard.MyButton[SecondButtonIndex].ButtonUp
		MyKeyboard.MyButton[SecondButtonIndex].TextPosX := TextPosXUp
		MyKeyboard.MyButton[SecondButtonIndex].TextPosY := TextPosYUp
		MyKeyboard.MyButton[SecondButtonIndex].Redraw()	
	End Function
	
	Protected Function MyOnDown()
		ButtonActive := ButtonDown
		TextPosX := TextPosXDown
		TextPosY :=	TextPosYDown

 		If MyIndex = MyKeyboard.IndexSwitch1  Then
			DoubleButtonDownSwitch(MyKeyboard.IndexSwitch2)
		ElseIf MyIndex = MyKeyboard.IndexSwitch2 Then
			DoubleButtonDownSwitch(MyKeyboard.IndexSwitch1)
		ElseIf MyIndex = MyKeyboard.IndexShift1 Then
			DoubleButtonDownShift(MyKeyboard.IndexShift2)
		ElseIf MyIndex = MyKeyboard.IndexShift2 Then
			DoubleButtonDownShift(MyKeyboard.IndexShift1)
		End If
			
		Redraw()
	End Function
	
	Protected Function MyOnUp(isinside As Boolean)
		ButtonActive := ButtonUp
		MyTextColor := TextColor
		TextPosX := TextPosXUp
		TextPosY :=	TextPosYUp

 		If MyIndex = MyKeyboard.IndexSwitch1 Then
			DoubleButtonUpSwitch(MyKeyboard.IndexSwitch2)
			If isinside  Then
				MyKeyboard.CreateButtons()
			End If		
		ElseIf MyIndex = MyKeyboard.IndexSwitch2 Then
			DoubleButtonUpSwitch(MyKeyboard.IndexSwitch1)
			If isinside  Then
				MyKeyboard.CreateButtons()
			End If	
		ElseIf MyIndex = MyKeyboard.IndexShift1 Then
			DoubleButtonUpShift(MyKeyboard.IndexShift2)
			If isinside Then
				MyKeyboard.ChooseSmallLargeSymbols()
			End If
		ElseIf MyIndex = MyKeyboard.IndexShift2 Then
			DoubleButtonUpShift(MyKeyboard.IndexShift1)
			If isinside Then
				MyKeyboard.ChooseSmallLargeSymbols()
			End If
		ElseIf	MyIndex = MyKeyboard.IndexLanguage Then									// change language button	
			MyKeyboard.SetNextKeyboardType()
		Else
			If MyIndex = MyKeyboard.IndexBackspace And isinside Then 					//backspace
				MyKeyboard.Backspace()
			ElseIf MyIndex = MyKeyboard.IndexEnter And isinside Then 					// enter
				MyKeyboard.Enter()
			Else																		//ostatní znaky
				If isinside Then														//když se dotku uvnitř, vložím svůj znak
					MyKeyboard.WriteSymbol(ButtonText)
				ElseIf 	HaveCell Then																//když se dotku v buňce, vložím znak z buňky
					MyKeyboard.WriteSymbol(MyKeyboard.MyButtonCell.GetActiveButton())
				End If					
			End If			
		End If
		Redraw()
	End Function
	
	Protected Function MyOnClose()
		ButtonActive := ButtonUp
		MyTextColor := TextColor
		TextPosX := TextPosXUp
		TextPosY :=	TextPosYUp
		If MyIndex = MyKeyboard.IndexSwitch1 Then
			DoubleButtonUpSwitch(MyKeyboard.IndexSwitch2)	
		ElseIf MyIndex = MyKeyboard.IndexSwitch2 Then
			DoubleButtonUpSwitch(MyKeyboard.IndexSwitch1)	
		ElseIf MyIndex = MyKeyboard.IndexShift1 Then
			DoubleButtonUpShift(MyKeyboard.IndexShift2)
		ElseIf MyIndex = MyKeyboard.IndexShift2 Then
			DoubleButtonUpShift(MyKeyboard.IndexShift1)
		End If
		
		Redraw()
	End Function
End Class

Class KeyboardCellButton Inherits BaseGraphicClass
	Friend KeyboardCell
	Friend KeyboardButton
	Friend BaseKeyboard
	Public Var MyButton			As AddressOf _Picture := Nothing
	Public Var ButtonText		As AddressOf Text := Nothing
	Protected Var IsActive 		As Boolean
	Public Var PosXB			As Long := 0
	Public Var PosYB			As Long := 0
	Public Var TextPosX			As Long := 0
	Public Var TextPosY			As Long := 0	
End Class

Class KeyboardCell
	Friend BaseKeyboard
	Friend KeyboardButton
	
	Public Var MyButton[10]					As KeyboardCellButton
	
	Protected Var MyKeyboard				As AddressOf BaseKeyboard
	Protected Var MyButtonNonActive			As AddressOf _Picture := Nothing
	Protected Var MyButtonActive			As AddressOf _Picture := Nothing
	Public Var MyCellBackground				As AddressOf _Picture := Nothing
	Protected Var BackgroundFor1Butt		As AddressOf _Picture := Nothing
	Protected Var BackgroundFor2Butt		As AddressOf _Picture := Nothing
	Protected Var BackgroundFor3Butt		As AddressOf _Picture := Nothing
	Protected Var BackgroundFor4Butt		As AddressOf _Picture := Nothing
	Protected Var BackgroundFor5Butt		As AddressOf _Picture := Nothing
	Protected Var BackgroundFor6To10Butt	As AddressOf _Picture := Nothing	
	Public Var MyIndic						As AddressOf _Picture := Nothing
	
	Protected Var MyFont					As AddressOf _Font 
	Protected Var TextPosX					As Long := 0
	Protected Var TextPosY					As Long := 0
			
	Protected Var MyButtonOffsetPosX		As Long := 0
	Protected Var MyButtonOffsetPosY		As Long := 0
	Public Var ButtonsNumber				As Long := 0
	Public Var IndicPosX					As Long := 0
	Public Var IndicPosY					As Long := 0
	Protected Var MyIndicMovePosY			As Long := 0
	Protected Var MyCellMovePosY			As Long := 0	
	Public Var BackgrPosX					As Long := 0
	
	Public Var BackgroundPosX 				As Long := 0
	Public Var BackgroundPosY 				As Long := 0
	
	Public Var MyActB						As Long
	Public Var MyShift						As Boolean
	
	Public Function Create(parent As AddressOf BaseKeyboard,CIndic As AddressOf _Picture,CButtonNonActive As AddressOf _Picture,CButtonActive As AddressOf _Picture,CButtonOffsetPosX As Long,CButtonOffsetPosY As Long		
								,BFor1Butt As AddressOf _Picture,BFor2Butt As AddressOf _Picture,BFor3Butt As AddressOf _Picture,BFor4Butt As AddressOf _Picture,BFor5Butt As AddressOf _Picture,BFor6To10Butt As AddressOf _Picture
								,IndicMovePosY As Long,CellMovePosY As Long, CBFont As AddressOf _Font,CBTextPosX As Long, CBTextPosY As Long)
		Var i As Long
		MyKeyboard				:= parent
		MyButtonNonActive		:= CButtonActive
		MyButtonActive			:= CButtonNonActive
		MyIndic					:= CIndic
		MyButtonOffsetPosX		:= CButtonOffsetPosX
		MyButtonOffsetPosY		:= CButtonOffsetPosY
		BackgroundFor1Butt		:= BFor1Butt
		BackgroundFor2Butt		:= BFor2Butt
		BackgroundFor3Butt		:= BFor3Butt
		BackgroundFor4Butt		:= BFor4Butt
		BackgroundFor5Butt		:= BFor5Butt
		BackgroundFor6To10Butt	:= BFor6To10Butt
		MyIndicMovePosY			:= IndicMovePosY
		MyCellMovePosY			:= CellMovePosY
		MyFont					:= CBFont
		TextPosX				:= CBTextPosX
		TextPosY				:= CBTextPosY
		
		CalculateButtonPos()
		
		For i := 1 To 10
			MyButton[i].MyButton := MyButtonNonActive
		End For
	End Function
	
	Protected Function CalculateButtonPos()
		Var offsetX As Long
		Var offsetY As Long
		
		offsetX := (BackgroundFor6To10Butt.GetWidth() - 5 * MyButtonNonActive.GetWidth())/6
		offsetY := (BackgroundFor6To10Butt.GetHeight() - 2 * MyButtonNonActive.GetHeight())/3		
	
		GetButtonPos(offsetX,offsetY)
	End Function
	
	Protected Function GetButtonPos(OffsetPosX As Long, OffsetPosY As Long)
		Var i As Long
		Var x As Long
		Var y As Long
		x := OffsetPosX
		y := OffsetPosY
		
		For i := 1 To 5
			MyButton[i].PosXB := x
			MyButton[i].PosYB := y
			x += OffsetPosX + MyButtonNonActive.GetWidth()
		End For
		
			x := OffsetPosX
			y += OffsetPosY + MyButtonNonActive.GetHeight()
		
		MyButton[9].PosXB := x
		MyButton[9].PosYB := y
		
			x += OffsetPosX + MyButtonNonActive.GetWidth()
		
		MyButton[7].PosXB := x
		MyButton[7].PosYB := y
		
			x += OffsetPosX + MyButtonNonActive.GetWidth()	

		MyButton[6].PosXB := x
		MyButton[6].PosYB := y
		
			x += OffsetPosX + MyButtonNonActive.GetWidth()	

		MyButton[8].PosXB := x
		MyButton[8].PosYB := y
		
			x += OffsetPosX + MyButtonNonActive.GetWidth()	
			
		MyButton[10].PosXB := x
		MyButton[10].PosYB := y
		
			x += OffsetPosX + MyButtonNonActive.GetWidth()		
	End Function
	
	Protected Function CalculateTextPos()
		Var i As Long

		For i := 1 To ButtonsNumber
			MyButton[i].TextPosX := TextPosX + MyButtonActive.GetWidth()/2 - MyFont.CalculateTextWidth(MyButton[i].ButtonText)/2
			MyButton[i].TextPosY := TextPosY + MyButtonActive.GetHeight()/2 - MyFont.CalculateTextHeight(MyButton[i].ButtonText,0,0)/2
		End For
	End Function
	
	Protected Function GetDataButton(BNumber As Long, BText As Text, BPic As AddressOf _Picture)
		MyButton[BNumber].ButtonText 	:= BText
		MyButton[BNumber].MyButton		:= BPic
	End Function
	
	Protected Function MyOpen(CBNumber As Long,CPosX As Long, CPosY As Long, TextB1 As Text, TextB2 As Text, TextB3 As Text, TextB4 As Text, TextB5 As Text, TextB6 As Text, TextB7 As Text, TextB8 As Text, TextB9 As Text, TextB10 As Text)//dostanu sem pozici X středu tlačítka
		ButtonsNumber := CBNumber
		If CBNumber = 1 Then
			MyCellBackground := BackgroundFor1Butt
			GetDataButton(1,TextB1,MyButtonNonActive)
			GetDataButton(2,Nothing,Nothing)
			GetDataButton(3,Nothing,Nothing)
			GetDataButton(4,Nothing,Nothing)
			GetDataButton(5,Nothing,Nothing)
			GetDataButton(6,Nothing,Nothing)
			GetDataButton(7,Nothing,Nothing)
			GetDataButton(8,Nothing,Nothing)
			GetDataButton(9,Nothing,Nothing)
			GetDataButton(10,Nothing,Nothing)
		ElseIf CBNumber = 2 Then
			MyCellBackground := BackgroundFor2Butt
			GetDataButton(1,TextB1,MyButtonNonActive)
			GetDataButton(2,TextB2,MyButtonNonActive)
			GetDataButton(3,Nothing,Nothing)
			GetDataButton(4,Nothing,Nothing)
			GetDataButton(5,Nothing,Nothing)
			GetDataButton(6,Nothing,Nothing)
			GetDataButton(7,Nothing,Nothing)
			GetDataButton(8,Nothing,Nothing)
			GetDataButton(9,Nothing,Nothing)
			GetDataButton(10,Nothing,Nothing)
		ElseIf CBNumber = 3 Then
			MyCellBackground := BackgroundFor3Butt
			GetDataButton(1,TextB1,MyButtonNonActive)
			GetDataButton(2,TextB2,MyButtonNonActive)
			GetDataButton(3,TextB3,MyButtonNonActive)
			GetDataButton(4,Nothing,Nothing)
			GetDataButton(5,Nothing,Nothing)
			GetDataButton(6,Nothing,Nothing)
			GetDataButton(7,Nothing,Nothing)
			GetDataButton(8,Nothing,Nothing)
			GetDataButton(9,Nothing,Nothing)
			GetDataButton(10,Nothing,Nothing)
		ElseIf CBNumber = 4 Then
			MyCellBackground := BackgroundFor4Butt
			GetDataButton(1,TextB1,MyButtonNonActive)
			GetDataButton(2,TextB2,MyButtonNonActive)
			GetDataButton(3,TextB3,MyButtonNonActive)
			GetDataButton(4,TextB4,MyButtonNonActive)
			GetDataButton(5,Nothing,Nothing)
			GetDataButton(6,Nothing,Nothing)
			GetDataButton(7,Nothing,Nothing)
			GetDataButton(8,Nothing,Nothing)
			GetDataButton(9,Nothing,Nothing)
			GetDataButton(10,Nothing,Nothing)
		ElseIf CBNumber = 5 Then
			MyCellBackground := BackgroundFor5Butt
			GetDataButton(1,TextB1,MyButtonNonActive)
			GetDataButton(2,TextB2,MyButtonNonActive)
			GetDataButton(3,TextB3,MyButtonNonActive)
			GetDataButton(4,TextB4,MyButtonNonActive)
			GetDataButton(5,TextB5,MyButtonNonActive)
			GetDataButton(6,Nothing,Nothing)
			GetDataButton(7,Nothing,Nothing)
			GetDataButton(8,Nothing,Nothing)
			GetDataButton(9,Nothing,Nothing)
			GetDataButton(10,Nothing,Nothing)
		ElseIf CBNumber = 6 Then
			MyCellBackground := BackgroundFor6To10Butt
			GetDataButton(1,TextB1,MyButtonNonActive)
			GetDataButton(2,TextB2,MyButtonNonActive)
			GetDataButton(3,TextB3,MyButtonNonActive)
			GetDataButton(4,TextB4,MyButtonNonActive)
			GetDataButton(5,TextB5,MyButtonNonActive)
			GetDataButton(6,TextB6,MyButtonNonActive)
			GetDataButton(7,Nothing,Nothing)
			GetDataButton(8,Nothing,Nothing)
			GetDataButton(9,Nothing,Nothing)
			GetDataButton(10,Nothing,Nothing)
		ElseIf CBNumber = 7 Then
			MyCellBackground := BackgroundFor6To10Butt
			GetDataButton(1,TextB1,MyButtonNonActive)
			GetDataButton(2,TextB2,MyButtonNonActive)
			GetDataButton(3,TextB3,MyButtonNonActive)
			GetDataButton(4,TextB4,MyButtonNonActive)
			GetDataButton(5,TextB5,MyButtonNonActive)
			GetDataButton(6,TextB6,MyButtonNonActive)
			GetDataButton(7,TextB7,MyButtonNonActive)
			GetDataButton(8,Nothing,Nothing)
			GetDataButton(9,Nothing,Nothing)
			GetDataButton(10,Nothing,Nothing)
		ElseIf CBNumber = 8 Then
			MyCellBackground := BackgroundFor6To10Butt
			GetDataButton(1,TextB1,MyButtonNonActive)
			GetDataButton(2,TextB2,MyButtonNonActive)
			GetDataButton(3,TextB3,MyButtonNonActive)
			GetDataButton(4,TextB4,MyButtonNonActive)
			GetDataButton(5,TextB5,MyButtonNonActive)
			GetDataButton(6,TextB6,MyButtonNonActive)
			GetDataButton(7,TextB7,MyButtonNonActive)
			GetDataButton(8,TextB8,MyButtonNonActive)
			GetDataButton(9,Nothing,Nothing)
			GetDataButton(10,Nothing,Nothing)
		ElseIf CBNumber = 9 Then
			MyCellBackground := BackgroundFor6To10Butt
			GetDataButton(1,TextB1,MyButtonNonActive)
			GetDataButton(2,TextB2,MyButtonNonActive)
			GetDataButton(3,TextB3,MyButtonNonActive)
			GetDataButton(4,TextB4,MyButtonNonActive)
			GetDataButton(5,TextB5,MyButtonNonActive)
			GetDataButton(6,TextB6,MyButtonNonActive)
			GetDataButton(7,TextB7,MyButtonNonActive)
			GetDataButton(8,TextB8,MyButtonNonActive)
			GetDataButton(9,TextB9,MyButtonNonActive)
			GetDataButton(10,Nothing,Nothing)
		Else
			MyCellBackground := BackgroundFor6To10Butt
			GetDataButton(1,TextB1,MyButtonNonActive)
			GetDataButton(2,TextB2,MyButtonNonActive)
			GetDataButton(3,TextB3,MyButtonNonActive)
			GetDataButton(4,TextB4,MyButtonNonActive)
			GetDataButton(5,TextB5,MyButtonNonActive)
			GetDataButton(6,TextB6,MyButtonNonActive)
			GetDataButton(7,TextB7,MyButtonNonActive)
			GetDataButton(8,TextB8,MyButtonNonActive)
			GetDataButton(9,TextB9,MyButtonNonActive)
			GetDataButton(10,TextB10,MyButtonNonActive)
		End If
	//spočítat pozice pro background a indic
		IndicPosX := MyCellBackground.GetWidth()/2 - MyIndic.GetWidth()/2
		IndicPosY := MyCellBackground.GetHeight()-MyIndicMovePosY

		BackgroundPosX := CPosX - MyCellBackground.GetWidth()/2
		BackgroundPosY := CPosY - MyIndic.GetHeight() - MyCellBackground.GetHeight()+MyCellMovePosY
		
		If BackgroundPosX < 0 Then				// když se cell zobrazí mimo obrazovku, posunuho v pozici X
			BackgrPosX := 0-BackgroundPosX
			MyShift := True
			IndicPosX -= 0 - BackgroundPosX
			BackgroundPosX := 0 
		ElseIf 	BackgroundPosX + MyCellBackground.GetWidth() > GetPrimaryDisplay().GetWidth() Then
			BackgrPosX := GetPrimaryDisplay().GetWidth() - (BackgroundPosX + MyCellBackground.GetWidth())
			MyShift := True
			IndicPosX += BackgroundPosX + MyCellBackground.GetWidth() - GetPrimaryDisplay().GetWidth() 
			BackgroundPosX := GetPrimaryDisplay().GetWidth() - MyCellBackground.GetWidth()
		Else
			MyShift := False
		End If
		
		IndicPosX += BackgroundPosX
		IndicPosY += BackgroundPosY		

		CalculateTextPos()	
	End Function
	
	Public Function SetActiveButton(x As Long, y As Long)
		Var i As Long
		Var ActB As Long
		If MyShift Then				// musím řešit při posunu cell background
			x -= BackgrPosX
		End If
			
		If ButtonsNumber >= 6 Then

			If y < 0 - (MyCellBackground.GetHeight()+MyIndic.GetHeight())/2 And y >= 0 - (MyCellBackground.GetHeight()+MyIndic.GetHeight())  Then
				For i := 1 To 5
					If x >= MyButton[i].PosXB - MyCellBackground.GetWidth()/2 And x <= MyButton[i].PosXB - MyCellBackground.GetWidth()/2 + MyButtonActive.GetWidth() Then
						ActB := i
					End If
				End For
			ElseIf y < 0 And y >= 0 - (MyCellBackground.GetHeight()+MyIndic.GetHeight()) Then
				For i := 6 To ButtonsNumber	
					If x >= MyButton[i].PosXB - MyCellBackground.GetWidth()/2 And x <= MyButton[i].PosXB - MyCellBackground.GetWidth()/2 + MyButtonActive.GetWidth() Then
						ActB := i	
					End If	
				End For
			End If
		ElseIf  ButtonsNumber < 6 Then
			If y < 0 And y >= 0 - (MyCellBackground.GetHeight()+MyIndic.GetHeight()) Then
				For i := 1 To ButtonsNumber
					If x >= MyButton[i].PosXB - MyCellBackground.GetWidth()/2 And x <= MyButton[i].PosXB - MyCellBackground.GetWidth()/2 + MyButtonActive.GetWidth() Then
						ActB := i
					End If
				End For
			End If
		End If
		
		For i := 1 To ButtonsNumber
			If i = ActB Then
				MyButton[i].MyButton := MyButtonActive
				MyButton[i].IsActive := True
				MyActB := ActB
			Else
				MyButton[i].MyButton := MyButtonNonActive
				MyButton[i].IsActive := False
			End If
		End For
	End Function
	
	Public Function GetActiveButton() As AddressOf Text
		If MyButton[MyActB].IsActive Then
			Return Value MyButton[MyActB].ButtonText
		Else
			Return Value ""	
		End If
	End Function
	
End Class 




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//**************************************************************************************************************************//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Class UnderlyingButtPicture Inherits BaseGraphicClass
	Public Var UnderlyingButtonPicture			As AddressOf _Picture := Nothing
	Public Var UnderlyingButtonPictureForSymb	As AddressOf _Picture := Nothing
End Class

Public GraphicClass KeyboardSquareRenderer Inherits BaseKeyboard
WithAttributes {hiddeninide}
	Protected Const COLOR_GREYDARK 			As Long		:= Namespace "CUE.GraphicCollection.MulticolorPalette.1".COLOR_GREYDARK
	Protected Const COLOR_REDPASTEL 		As Long		:= Namespace "CUE.GraphicCollection.MulticolorPalette.1".COLOR_REDPASTEL
	
	Protected Var 		KeyboardButton						As AddressOf _Picture 	:= Nothing
	Protected Var 		ButtonClose							As AddressOf _Picture 	:= Nothing
	Protected Var 		KeyboardButtonEnter					As AddressOf _Picture 	:= Nothing
	Protected Var 		KeyboardButtonSpace					As AddressOf _Picture 	:= Nothing
	Protected Var 		KeyboardButtonSwitch				As AddressOf _Picture 	:= Nothing
	Protected Var 		KeyboardButtonSwitchLeft			As AddressOf _Picture 	:= Nothing
	Protected Var 		KeyboardNextButton					As AddressOf _Picture 	:= Nothing	
	Protected Var 		KeyboardButtonBackspRShift			As AddressOf _Picture 	:= Nothing
	Protected Var 		KeyboardButtonBackspRShiftRU		As AddressOf _Picture 	:= Nothing
	Protected Var 		KeyboardButtonRU					As AddressOf _Picture 	:= Nothing
	Protected Var 		KeyboardButtonEnterRU				As AddressOf _Picture 	:= Nothing
	
	Protected Var 		KeyboardButton2						As AddressOf _Picture 	:= Nothing
	Protected Var 		ButtonClose2						As AddressOf _Picture 	:= Nothing
	Protected Var 		KeyboardButtonEnter2				As AddressOf _Picture 	:= Nothing
	Protected Var 		KeyboardButtonSpace2				As AddressOf _Picture 	:= Nothing
	Protected Var 		KeyboardButtonSwitch2				As AddressOf _Picture 	:= Nothing
	Protected Var 		KeyboardNextButton2					As AddressOf _Picture 	:= Nothing
	Protected Var 		KeyboardButtonBackspRShift2			As AddressOf _Picture 	:= Nothing
	Protected Var 		KeyboardButtonBackspRShiftRU2		As AddressOf _Picture 	:= Nothing
	Protected Var 		KeyboardButtonRU2					As AddressOf _Picture 	:= Nothing
	Protected Var 		KeyboardButtonEnterRU2				As AddressOf _Picture 	:= Nothing	
	
	Protected Var 		KeyboardButtonClose					As AddressOf _Picture 	:= Nothing
	
	Protected Var 		UnderlyingButtPic[KEYBOARDBUTTONS]	As UnderlyingButtPicture
	
	Protected Var		BCloseIconColor						As Long
	Protected Var		BCloseIconColorUp					As Long	
	Protected Var		BCloseIconColorDown					As Long	
		
	Protected Var		BCloseIconColorOpacity				As Byte	
	Protected Var		BCloseIconColorOpacityUp			As Byte	
	Protected Var		BCloseIconColorOpacityDown			As Byte
	
	Protected Var		BCloseColor							As Long
	Protected Var		BCloseColorUp						As Long
	Protected Var		BCloseColorDown						As Long
	
	Protected Var		BCloseColorOpacity					As Byte
	Protected Var		BCloseColorOpacityUp				As Byte
	Protected Var		BCloseColorOpacityDown				As Byte
	
	Protected Var 		BColor[KEYBOARDBUTTONS]				As Long		
	Protected Var		BColorUp							As Long
	Protected Var		BColorDown							As Long
	
	Protected Var 		BColorOpacity[KEYBOARDBUTTONS]		As Byte
	Protected Var		ButtonOpacityUp						As Byte
	Protected Var		ButtonOpacityDown					As Byte	
	
	Protected Var		CellBCol[10]						As Long
	Protected Var		CellBColOpacity[10]					As Long
	Protected Var		CelBTextCol[10]						As Long

		
	Protected Property BackgroundColor					As Long := &H7Fffffff WithAttributes
			{	PropertyGroup := "Appearance",
				EditMode := "color"
			}	
	Protected Property TextColorUp						As Long := _COLOR_WHITE WithAttributes
			{	PropertyGroup := "Up",
				EditMode := "color"
			}
	Protected Property TextColorDown					As Long := _COLOR_BLACK WithAttributes
			{	PropertyGroup := "Down",
				EditMode := "color"
			}
	Protected Property CloseIconColorUp						As Long := _COLOR_WHITE WithAttributes
			{	PropertyGroup := "Up",
				EditMode := "color"
			}
	Protected Property CloseIconColorDown					As Long := _COLOR_BLACK WithAttributes
			{	PropertyGroup := "Down",
				EditMode := "color"
			}			
	Protected Property ButtonColorUp  							As Long := COLOR_GREYDARK 	WithAttributes  
			{	 PropertyGroup := "Up",
				EditMode := "color"
			}	
	Protected Property ButtonColorDown 							As Long := _COLOR_WHITE 	WithAttributes  
			{	 PropertyGroup := "Down",
				 EditMode := "color"
			}
	Protected Property ButtonCloseColorUp  						As Long := COLOR_REDPASTEL 	WithAttributes  
			{  	 PropertyGroup := "Up",
	  			 EditMode := "color"
			}	  		
	Protected Property ButtonCloseColorDown  						As Long := COLOR_GREYDARK 	WithAttributes  
			{	 PropertyGroup := "Down",
	  			 EditMode := "color"
			}


	
	Protected Function OnSetLanguage(newlanguageid As Long)
		SetIndexByLanguage(newlanguageid)
//		LockRedraw() 
//		CreateButByGetLanguag()
//		SetUnderlyingButtonPicture()
//		UnlockRedraw()
//		Redraw()
	End Function

	Protected Function SetKeyboardType(newkeyboardtype As Long)
		KeyboardType := newkeyboardtype
		LockRedraw()
		CreateButByGetLanguag()
		SetUnderlyingButtonPicture()
		UnlockRedraw()
		Redraw()
	End Function
	
	Protected Function SetComponentColor()
		SetTextColorDown(TextColorDown)
		SetTextColorUp(TextColorUp)
		SetButtonColorDown(ButtonColorDown)
		SetButtonColorUp(ButtonColorUp)
		SetButtonCloseColorDown(ButtonCloseColorDown)
		SetButtonCloseColorUp(ButtonCloseColorUp)
		SetCloseIconColorDown(CloseIconColorDown)
		SetCloseIconColorUp(CloseIconColorUp)
	End Function
	
	Public Function EnableCustomButton(buttontext As Text)
		If GetMemorySegment(buttontext) = _MSEG_RESOURCEDATA Then
			CustomButtonText := buttontext
		Else
			CustomButtonTextBuffer := buttontext
			CustomButtonText := CustomButtonTextBuffer
		End If
		
		If Not ShowCustomButton Then		
			LockRedraw()
			ShowCustomButton := True
			CalculateButtonPosition()
			CreateButByGetLanguag()
			SetUnderlyingButtonPicture()
			UnlockRedraw()
			Redraw()
		End If
		
	End Function
	
	Public Function DisableCustomButton()
		If ShowCustomButton Then
			LockRedraw()
			ShowCustomButton := False
			CalculateButtonPosition()
			CreateButByGetLanguag()
			SetUnderlyingButtonPicture()
			UnlockRedraw()
			Redraw()
		End If
		
	End Function	
	
	Public Function SetTextColorDown(newtextcolordown As Long) As Boolean
		Var i As Long
		TextColorDown	:= newtextcolordown
		ButtonTextColorActive:= newtextcolordown
		
		For i := 1 To KEYBOARDBUTTONS
			If i = IndexButtonOnDown Then
				MyButton[i].MyTextColor := TextColorDown	
			End If
			MyButton[i].TextActiveColor	:= TextColorDown	
		End For	
		Redraw()
		Return Value True
	End Function
	
	Public Function GetTextColorDown()As Long
		Return Value TextColorDown
	End Function

	Public Function SetTextColorUp(newtextcolorup As Long) As Boolean
		Var i As Long
		TextColorUp		:= newtextcolorup
		ButtonTextColor	:= newtextcolorup

		For i := 1 To 10
			CelBTextCol[i] := ButtonTextColor
		End For
		
		For i := 1 To KEYBOARDBUTTONS
			If Not i = IndexButtonOnDown Then
				MyButton[i].MyTextColor := TextColorUp
			End If
			MyButton[i].TextColor	:= TextColorUp	
		End For	
		Redraw()
		Return Value True
	End Function
		
	Public Function GetTextColorUp()As Long
		Return Value TextColorUp
	End Function
			
	Public Function SetButtonColorDown(newbuttoncolordown As Long) As Boolean
		ButtonColorDown 	:= newbuttoncolordown
		BColorDown 			:= SetColorComponentOpacity(ButtonColorDown,255)
		ButtonOpacityDown 	:= GetColorComponentOpacity(ButtonColorDown)
		Redraw()
		Return Value True
	End Function
	
	Public Function GetButtonColorDown()As Long
		Return Value ButtonColorDown
	End Function
	
	Public Function SetButtonColorUp(newbuttoncolorup As Long) As Boolean
		Var i As Long
			ButtonColorUp 			:= newbuttoncolorup
			ButtonOpacityUp 		:= GetColorComponentOpacity(ButtonColorUp)
			BColorUp 				:= SetColorComponentOpacity(ButtonColorUp,255)
			For i := 1 To KEYBOARDBUTTONS
				BColor[i]			:= BColorUp
				BColorOpacity[i] 	:= ButtonOpacityUp
			End For	
			For i := 1 To 10
				CellBCol[i] 		:= BColorUp
				CellBColOpacity[i] 	:= ButtonOpacityUp
			End For
			Redraw()	
			Return Value True
	End Function
	
	Public Function GetButtonColorUp()As Long
		Return Value ButtonColorUp
	End Function
			
	Public Function SetButtonCloseColorDown(newclosebuttoncolordown As Long) As Boolean
		
		ButtonCloseColorDown 	:= newclosebuttoncolordown
		BCloseColorOpacityDown	:= GetColorComponentOpacity(ButtonCloseColorDown)
		BCloseColorDown 		:= SetColorComponentOpacity(ButtonCloseColorDown,255)
		SetButtonEye(ButtonEyeOn)
		Redraw()
		Return Value True			
	End Function
		
	Public Function GetButtonCloseColorDown()As Long
		Return Value ButtonCloseColorDown
	End Function

	Public Function SetButtonCloseColorUp(newclosebuttoncolorup As Long) As Boolean
		ButtonCloseColorUp 		:= newclosebuttoncolorup
		BCloseColorUp 			:= SetColorComponentOpacity(ButtonCloseColorUp,255)
		BCloseColorOpacityUp	:= GetColorComponentOpacity(ButtonCloseColorUp)
		
		BCloseColor 			:= BCloseColorUp
		BCloseColorOpacity 		:= BCloseColorOpacityUp
			
		Redraw()
		Return Value True		
	End Function
	
	Public Function GetButtonCloseColorUp()As Long
		Return Value ButtonCloseColorUp
	End Function
			
	Public Function SetCloseIconColorDown(newcloseiconcolordown As Long) As Boolean
		CloseIconColorDown 			:= newcloseiconcolordown
		BCloseIconColorDown 		:= SetColorComponentOpacity(CloseIconColorDown,255)
		BCloseIconColorOpacityDown 	:= GetColorComponentOpacity(CloseIconColorDown)
		If ButtonCloseOndown Then	
			BCloseIconColor := BCloseIconColorDown
			BCloseIconColorOpacity := BCloseIconColorOpacityDown
		End If
		SetButtonEye(ButtonEyeOn)	
		Return Value True
	End Function
	
	Public Function GetCloseIconColorDown()As Long
		Return Value CloseIconColorDown
	End Function

	Public Function SetCloseIconColorUp(newcloseiconcolorup As Long) As Boolean
		CloseIconColorUp 			:= newcloseiconcolorup
		BCloseIconColorUp 			:= SetColorComponentOpacity(CloseIconColorUp,255)
		BCloseIconColorOpacityUp 	:= GetColorComponentOpacity(CloseIconColorUp)
		If Not ButtonCloseOndown Then
			BCloseIconColor := BCloseIconColorUp
			BCloseIconColorOpacity := BCloseIconColorOpacityUp
		End If 
		Return Value True
	End Function

	Public Function GetCloseIconColorUp()As Long
		Return Value CloseIconColorUp
	End Function
		
	Public Function SetBackgroundColor(newbackgroundcolor As Long) As Boolean
		BackgroundColor := newbackgroundcolor
		RectangleColor := newbackgroundcolor
		Redraw()
		Return Value True
	End Function
	
	Public Function GetBackgroundColor()As Long
		Return Value BackgroundColor
	End Function

	Protected Function SetUnderlyingButtonPicture()
		Var i As Long

		For i := 1 To KEYBOARDBUTTONS
//			If GetLanguage() = _LANGUAGE_RUSSIAN Or GetLanguage() = _LANGUAGE_NORWEGIAN_NYNORSK Or GetLanguage() = _LANGUAGE_NORWEGIAN_BOKML Then
			If KeyboardType = KEYBOARD_CYRILLIC Or KeyboardType = KEYBOARD_NORWEGIAN Then
					If i = IndexShift1  Then
						UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButtonRU
						UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButton
					ElseIf i = IndexShift2 Then
						UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButtonBackspRShiftRU
						UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButtonBackspRShift
					ElseIf i = IndexSwitch1 Then
						If ShowLanguageButton Then
							UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButtonSwitchLeft
							UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButtonSwitchLeft 
						Else
							UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButtonSwitch
							UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButtonSwitch 						
						End If
					ElseIf i = IndexSwitch2 Then
						If ShowCustomButton Then
							UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButtonSwitchLeft
							UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButtonSwitchLeft
						Else
							UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButtonSwitch
							UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButtonSwitch
						End If
					ElseIf i = IndexSwitch1+1 Then
						UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButtonSpace
						UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButtonSpace
					ElseIf i = IndexEnter Then
						UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButtonEnterRU
						UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButtonEnter
					ElseIf i = IndexBackspace Then
						UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButtonBackspRShiftRU
						UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButtonBackspRShift
//					ElseIf i = IndexLanguage Then
//						UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButton
//						UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButton
					ElseIf i = IndexLanguage Then
						If ShowLanguageButton Then
							UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButton
							UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButton		
						Else
							UnderlyingButtPic[i].UnderlyingButtonPicture 		:= Nothing
							UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := Nothing								
						End If							
					ElseIf i = IndexCustom Then
						If ShowCustomButton Then
							UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButton
							UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButton		
						Else
							UnderlyingButtPic[i].UnderlyingButtonPicture 		:= Nothing
							UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := Nothing								
						End If	
					ElseIf i > MaxButtons Then
						UnderlyingButtPic[i].UnderlyingButtonPicture 		:= Nothing
						UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := Nothing												
					Else
						UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButtonRU
						UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButton
					End If
			Else
					If i = IndexShift1 Then
						UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButton
						UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButton
					ElseIf i = IndexShift2 Then
						UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButtonBackspRShift
						UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButtonBackspRShift
					ElseIf i = IndexSwitch1 Then
						Select GetLanguage()
						Case 	_LANGUAGE_RUSSIAN,
								_LANGUAGE_RUSSIAN_REPUBLIC_OF_MOLDOVA,
								_LANGUAGE_UKRAINIAN,
								_LANGUAGE_SERBIAN_CYRILLIC,
								_LANGUAGE_BULGARIAN,
								_LANGUAGE_BELARUSIAN,
								_LANGUAGE_NORWEGIAN_NYNORSK,
								_LANGUAGE_NORWEGIAN_BOKML,
								_LANGUAGE_GREEK
							UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButtonSwitchLeft
							UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButtonSwitchLeft
						Case Else
							UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButtonSwitch
							UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButtonSwitch
						End Select
					ElseIf i = IndexSwitch2 Then
						If ShowCustomButton Then
							UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButtonSwitchLeft
							UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButtonSwitchLeft
						Else
							UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButtonSwitch
							UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButtonSwitch
						End If
					ElseIf i = IndexSwitch1+1 Then
						UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButtonSpace
						UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButtonSpace
					ElseIf i = IndexEnter Then
						UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButtonEnter
						UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButtonEnter
					ElseIf i = IndexBackspace Then
						UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButtonBackspRShift
						UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButtonBackspRShift
					ElseIf i = IndexLanguage Then
						If ShowLanguageButton Then
							UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButton
							UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButton		
						Else
							UnderlyingButtPic[i].UnderlyingButtonPicture 		:= Nothing
							UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := Nothing								
						End If		
					ElseIf i = IndexCustom Then	
						If ShowCustomButton Then
							UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButton
							UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButton		
						Else
							UnderlyingButtPic[i].UnderlyingButtonPicture 		:= Nothing
							UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := Nothing								
						End If							
					ElseIf i > MaxButtons Then
						UnderlyingButtPic[i].UnderlyingButtonPicture 		:= Nothing
						UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := Nothing						
					Else
						UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButton
						UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButton
					End If
			End If
		End For
//		Redraw()
	End Function
		
	Protected Function OnDraw()
		Var i 				As Long
		Var TextPosX 		As Long
		Var TextPosY 		As Long
		Var PosXButtCell 	As Long
		Var PosYButtCell 	As Long
		Var PosXCellText 	As Long
		Var PosYCellText 	As Long
//CLOSE		 
		DrawRectangle(RectangleColor,0,DialogWindowRectanglePosY - DialogWindow.GetHeight(),KeyboardBackgroundWidth,KeyboardBackgroundHeight + DialogWindow.GetHeight())

		If IsPasswordmask Then
			DrawPicture(DialogWindowEye,0,DialogWindowPosY)	
		Else
			DrawPicture(DialogWindow,0,DialogWindowPosY)
		End If
		
		If IsPasswordmask Then	
			DrawTintedPicture(ButtonClose,BEyeColor,BClosePosX - ButtonClose.GetWidth(),BClosePosY,-1,-1,0,0,BEyeColorOpacity)
			DrawPicture(ButtonEyeActual,BClosePosX - ButtonEyeActual.GetWidth(),BClosePosY)
			DrawTintedPicture(EyeIcon,BEyeIconColor,BClosePosX - ButtonCloseActual.GetWidth() + (ButtonCloseActual.GetWidth() - EyeIcon.GetWidth())/2,BClosePosY + (ButtonCloseActual.GetHeight() - EyeIcon.GetHeight())/2,-1,-1,0,0,BEyeIconColorOpacity)
		
			DrawTintedPicture(ButtonClose,BCloseColor,BClosePosX,BClosePosY,-1,-1,0,0,BCloseColorOpacity)
			DrawPicture(ButtonCloseActual,BClosePosX,BClosePosY)
			DrawTintedPicture(KeyboardButtonClose,BCloseIconColor,BClosePosX + (ButtonCloseActual.GetWidth() - KeyboardButtonClose.GetWidth())/2,BClosePosY + (ButtonCloseActual.GetHeight() - KeyboardButtonClose.GetHeight())/2,-1,-1,0,0,BCloseIconColorOpacity)
		Else
			DrawTintedPicture(ButtonClose,BCloseColor,BClosePosX,BClosePosY,-1,-1,0,0,BCloseColorOpacity)
			DrawPicture(ButtonCloseActual,BClosePosX,BClosePosY)
			DrawTintedPicture(KeyboardButtonClose,BCloseIconColor,BClosePosX + (ButtonCloseActual.GetWidth() - KeyboardButtonClose.GetWidth())/2,BClosePosY + (ButtonCloseActual.GetHeight() - KeyboardButtonClose.GetHeight())/2,-1,-1,0,0,BCloseIconColorOpacity)
		End If
//TEXT KURZOR		
		If GetTextActualLength(DialogText) < 1 Then
			DrawText(DialogFont,MyPromtText,PromtTextColor,DialogTextPosX,DialogTextPosY,DialogTextBoxWidth,-1)			
		Else
			DrawText(DialogFont,DialogText,ButtonDialogTextColor,DialogTextPosX,DialogTextPosY,DialogTextBoxWidth,-1)
		End If
		DrawRectangle(KurzorColor, KurzorX1,KurzorY1,KurzorX2,KurzorY2)

		For i := 1 To MaxButtons//IndexSwitch2//KEYBOARDBUTTONS
			TextPosX := ((MyButton[i].ButtonActive.GetWidth()/2) - (MyButton[i].ButtonFont.CalculateTextWidth(MyButton[i].ButtonText)/2)) + MyButton[i].MyPosX + MyButton[i].TextPosX
			TextPosY := ((MyButton[i].ButtonActive.GetHeight()/2) - (MyButton[i].ButtonFont.CalculateTextHeight(MyButton[i].ButtonText,0,0)/2)) + MyButton[i].MyPosY + MyButton[i].TextPosY
//BUTTONS			
			If CreateFirstB Then				
				If i > MaxButtons Then//IndexSwitch2 Then
					DrawTintedPicture(UnderlyingButtPic[i].UnderlyingButtonPicture,_COLOR_BLACK,MyButton[i].MyPosX,MyButton[i].MyPosY,-1,-1,0,0,0)
				Else
					DrawTintedPicture(UnderlyingButtPic[i].UnderlyingButtonPicture,BColor[i],MyButton[i].MyPosX,MyButton[i].MyPosY,-1,-1,0,0,BColorOpacity[i])
				End If				
			Else
//				If ((GetLanguage() = _LANGUAGE_RUSSIAN Or GetLanguage() = _LANGUAGE_NORWEGIAN_NYNORSK Or GetLanguage() = _LANGUAGE_NORWEGIAN_BOKML) And (i = 11 Or i = 22 Or i = 23 Or i = 35)) Or (i = IndexShift1 Or i = IndexShift2) Then
				If ((KeyboardType = KEYBOARD_CYRILLIC Or KeyboardType = KEYBOARD_NORWEGIAN) And (i = 11 Or i = 22 Or i = 23 Or i = 35)) Or (i = IndexShift1 Or i = IndexShift2) Then
					DrawTintedPicture(UnderlyingButtPic[i].UnderlyingButtonPictureForSymb,_COLOR_BLACK,MyButton[i].MyPosX,MyButton[i].MyPosY,-1,-1,0,0,0)
				Else
					DrawTintedPicture(UnderlyingButtPic[i].UnderlyingButtonPictureForSymb,BColor[i],MyButton[i].MyPosX,MyButton[i].MyPosY,-1,-1,0,0,BColorOpacity[i])				
				End If
			End If
			DrawPicture(MyButton[i].ButtonActive,MyButton[i].MyPosX,MyButton[i].MyPosY)
//SYMBOL BACKSPACE,SHIFT
			DrawTintedPicture(MyButton[i].ButtonSymbol,SetColorComponentOpacity(MyButton[i].MyTextColor,255), MyButton[i].MyPosX + MyButton[i].ButtonCentreX + MyButton[i].TextPosX,MyButton[i].MyPosY + MyButton[i].ButtonCentreY + MyButton[i].TextPosY,-1,-1,0,0,GetColorComponentOpacity(MyButton[i].MyTextColor))
			DrawText(MyButton[i].ButtonFont,MyButton[i].ButtonText,MyButton[i].MyTextColor,TextPosX,TextPosY,-1,-1)	
		End For
//CELL		
		If ButtCellOpen Then

			DrawRectangle(RectangleColor,MyButtonCell.BackgroundPosX,MyButtonCell.BackgroundPosY,MyButtonCell.MyCellBackground.GetWidth()-CellShadowSize,MyButtonCell.MyCellBackground.GetHeight()-CellShadowSize)
			DrawPicture(MyButtonCell.MyCellBackground,MyButtonCell.BackgroundPosX,MyButtonCell.BackgroundPosY)
			DrawPicture(KeyboardCellIndic,MyButtonCell.IndicPosX,MyButtonCell.IndicPosY)
	
			For i := 1 To MyButtonCell.ButtonsNumber
				PosXButtCell := MyButtonCell.BackgroundPosX+MyButtonCell.MyButton[i].PosXB
				PosYButtCell := MyButtonCell.BackgroundPosY+MyButtonCell.MyButton[i].PosYB
				PosXCellText := PosXButtCell+MyButtonCell.MyButton[i].TextPosX
				PosYCellText := PosYButtCell+MyButtonCell.MyButton[i].TextPosY

				DrawTintedPicture(KeyboardNextButton,CellBCol[i],PosXButtCell, PosYButtCell,-1,-1,0,0,CellBColOpacity[i])
				DrawPicture(MyButtonCell.MyButton[i].MyButton, PosXButtCell, PosYButtCell)
				DrawText(KeyBoardFont,MyButtonCell.MyButton[i].ButtonText,CelBTextCol[i],PosXCellText,PosYCellText,-1,-1)							
			End For	
		End If		
	End Function
	
	Protected Function DBDownSwitch(SecondButtonIndex As Long)
		MyButton[SecondButtonIndex].ButtonActive := MyButton[SecondButtonIndex].ButtonDown
		MyButton[SecondButtonIndex].TextPosX := MyButton[SecondButtonIndex].TextPosXDown
		MyButton[SecondButtonIndex].TextPosY := MyButton[SecondButtonIndex].TextPosYDown
		MyButton[SecondButtonIndex].Redraw()	
	End Function
	
	Protected Function DBDownShift(SecondButtonIndex As Long)
		MyButton[SecondButtonIndex].ButtonActive := MyButton[SecondButtonIndex].ButtonDown
		MyButton[SecondButtonIndex].TextPosX 	:= MyButton[SecondButtonIndex].TextPosXDown
		MyButton[SecondButtonIndex].TextPosY 	:= MyButton[SecondButtonIndex].TextPosYDown
		MyButton[SecondButtonIndex].Redraw()	
	End Function
	
	Protected Function DBUpSwitch(SecondButtonIndex As Long)
		MyButton[SecondButtonIndex].ButtonActive := MyButton[SecondButtonIndex].ButtonUp
		MyButton[SecondButtonIndex].TextPosX := MyButton[SecondButtonIndex].TextPosXUp
		MyButton[SecondButtonIndex].TextPosY := MyButton[SecondButtonIndex].TextPosYUp
		MyButton[SecondButtonIndex].Redraw()	
	End Function

	Protected Function DBUpShift(SecondButtonIndex As Long)
		MyButton[SecondButtonIndex].ButtonActive := MyButton[SecondButtonIndex].ButtonUp
		MyButton[SecondButtonIndex].TextPosX := MyButton[SecondButtonIndex].TextPosXUp
		MyButton[SecondButtonIndex].TextPosY := MyButton[SecondButtonIndex].TextPosYUp
		MyButton[SecondButtonIndex].Redraw()
	End Function

	Protected Function MyOnDownButton(id As Long)
		MyButton[id].ButtonActive 	:= MyButton[id].ButtonDown
		MyButton[id].TextPosX 		:= MyButton[id].TextPosXDown
		MyButton[id].TextPosY 		:= MyButton[id].TextPosYDown

 		BColor[id] := BColorDown
 		BColorOpacity[id] := ButtonOpacityDown	
		MyButton[id].MyTextColor := ButtonTextColorActive //ButtonTextColor
 		
 		If id = IndexSwitch1  Then
			DBDownSwitch(IndexSwitch2)
			BColor[IndexSwitch2] := BColorDown 
			BColorOpacity[IndexSwitch2] := ButtonOpacityDown
			MyButton[IndexSwitch2].MyTextColor := ButtonTextColorActive //ButtonTextColor
		ElseIf id = IndexSwitch2 Then
			DBDownSwitch(IndexSwitch1)
			BColor[IndexSwitch1] := BColorDown
			BColorOpacity[IndexSwitch1] := ButtonOpacityDown
			MyButton[IndexSwitch1].MyTextColor := ButtonTextColorActive //ButtonTextColor
		ElseIf id = IndexShift1 Then
			DBDownShift(IndexShift2)
			BColor[IndexShift2] := BColorDown
			BColorOpacity[IndexShift2] := ButtonOpacityDown
			MyButton[IndexShift2].MyTextColor := ButtonTextColorActive //ButtonTextColor
		ElseIf id = IndexShift2 Then
			DBDownShift(IndexShift1)
			BColor[IndexShift1] := BColorDown
			BColorOpacity[IndexShift1] := ButtonOpacityDown
			MyButton[IndexShift1].MyTextColor := ButtonTextColorActive //ButtonTextColor
		End If	
		MyButton[id].Redraw()
	End Function
	
	Protected Function MyOnCloseButton(id As Long)
		MyButton[id].ButtonActive 	:= MyButton[id].ButtonUp
		MyButton[id].MyTextColor 	:= MyButton[id].TextColor
		MyButton[id].TextPosX 		:= MyButton[id].TextPosXUp
		MyButton[id].TextPosY 		:=	MyButton[id].TextPosYUp
		
		BColor[id] := BColorUp
		BColorOpacity[id] := ButtonOpacityUp
		MyButton[id].MyTextColor := ButtonTextColor		
		
		If id = IndexSwitch1 Then
			DBUpSwitch(IndexSwitch2)
			BColor[IndexSwitch2] := BColorUp
			BColorOpacity[IndexSwitch2] := ButtonOpacityUp	
			MyButton[IndexSwitch2].MyTextColor := ButtonTextColor		
		ElseIf id = IndexSwitch2 Then
			DBUpSwitch(IndexSwitch1)
			BColor[IndexSwitch1] := BColorUp
			BColorOpacity[IndexSwitch1] := ButtonOpacityUp
			MyButton[IndexSwitch1].MyTextColor := ButtonTextColor			
		ElseIf id = IndexShift1 Then
			DBUpShift(IndexShift2)
			BColor[IndexShift2] := BColorUp
			BColorOpacity[IndexShift2] := ButtonOpacityUp
			MyButton[IndexShift2].MyTextColor := ButtonTextColor		
		ElseIf id = IndexShift2 Then
			DBUpShift(IndexShift1)
			BColor[IndexShift1] := BColorUp
			BColorOpacity[IndexShift1] := ButtonOpacityUp
			MyButton[IndexShift1].MyTextColor := ButtonTextColor		
		End If	
		Redraw(MyButton[id].MyPosX,MyButton[id].MyPosY,MyButton[id].ButtonUp.GetWidth(),MyButton[id].ButtonUp.GetHeight())
	End Function
	
	Protected Function MyOnUpButton(isinside As Boolean, id As Long)
		MyButton[id].ButtonActive 	:= MyButton[id].ButtonUp
		MyButton[id].MyTextColor 	:= MyButton[id].TextColor
		MyButton[id].TextPosX 		:= MyButton[id].TextPosXUp
		MyButton[id].TextPosY 		:= MyButton[id].TextPosYUp
		
		BColor[id] := BColorUp
		BColorOpacity[id] := ButtonOpacityUp
 		MyButton[id].MyTextColor := ButtonTextColor		
 		If id = IndexSwitch1 Then
 			
 			BColor[IndexSwitch2] := BColorUp
 			BColorOpacity[IndexSwitch2] := ButtonOpacityUp
			MyButton[IndexSwitch2].MyTextColor := ButtonTextColor	
			DBUpSwitch(IndexSwitch2)
			If isinside  Then
				CreateButtons()
			End If
		ElseIf id = IndexSwitch2 Then
			BColor[IndexSwitch1] := BColorUp
			BColorOpacity[IndexSwitch1] := ButtonOpacityUp	
			MyButton[IndexSwitch1].MyTextColor := ButtonTextColor
			DBUpSwitch(IndexSwitch1)
			If isinside  Then
				CreateButtons()
			End If

		ElseIf id = IndexShift1 Then
			DBUpShift(IndexShift2)
			If isinside Then
				ChooseSmallLargeSymbols()
			End If
			BColor[IndexShift2] := BColorUp
			BColorOpacity[IndexShift2] := ButtonOpacityUp
			MyButton[IndexShift2].MyTextColor := ButtonTextColor
		ElseIf id = IndexShift2 Then
			DBUpShift(IndexShift1)
			If isinside Then
				ChooseSmallLargeSymbols()
			End If
			BColor[IndexShift1] := BColorUp
			BColorOpacity[IndexShift1] := ButtonOpacityUp
			MyButton[IndexShift1].MyTextColor := ButtonTextColor
		ElseIf	id = IndexLanguage Then									// change language button	
			SetNextKeyboardType()
		Else
			If id = IndexBackspace And isinside Then 					//backspace
				Backspace()
			ElseIf id = IndexEnter And isinside Then 					// enter
				Enter()
			Else														//ostatní znaky
				If isinside Then										//když se dotku uvnitř, vložím svůj znak
					WriteSymbol(MyButton[id].ButtonText)
				ElseIf 	MyButton[id].HaveCell Then						//když se dotku v buňce, vložím znak z buňky	
					WriteSymbol(MyButtonCell.GetActiveButton())
					CellBCol[MyButtonCell.MyActB] := BColorUp
					CellBColOpacity[MyButtonCell.MyActB]	:= ButtonOpacityUp
					CelBTextCol[MyButtonCell.MyActB] := TextColorUp 
				End If					
			End If			
		End If
	
		Redraw(MyButton[id].MyPosX,MyButton[id].MyPosY,MyButton[id].ButtonUp.GetWidth(),MyButton[id].ButtonUp.GetHeight())//UnderlyingButtPic[id].UnderlyingButtonPictureForSymb.GetHeight())	
	End Function
	
	Protected Function SetButtonEye(ison As Boolean)
		If ison Then
			ButtonEyeActual := ButtonCloseUp
			BEyeColor		:= BCloseColorUp
			BEyeColorOpacity := BCloseColorOpacityUp
			BEyeIconColor := CloseIconColorUp
			BEyeIconColorOpacity := BCloseIconColorOpacityUp
		Else
			ButtonEyeActual := ButtonCloseDown
			BEyeColor		:= BCloseColorDown
			BEyeColorOpacity := BCloseColorOpacityDown	
			BEyeIconColor := CloseIconColorDown
			BEyeIconColorOpacity := BCloseIconColorOpacityDown/2	
		End If
		Redraw(BClosePosX- ButtonCloseUp.GetWidth(),BClosePosY,ButtonCloseUp.GetWidth(),ButtonCloseUp.GetHeight())	
	End Function
	
	Protected Function OnDown(x As Long,y As Long,eventtime As Time) As Boolean
		Var i As Long
		LockRedraw()
		If x >= BClosePosX And x <= BClosePosX + ButtonCloseUp.GetWidth() And y >= BClosePosY And y <= BClosePosY + ButtonCloseUp.GetHeight() Then
			ButtonCloseActual := ButtonCloseDown
			ButtonCloseOndown := True
			BCloseIconColor := CloseIconColorDown
			BCloseColor		:= BCloseColorDown
			BCloseColorOpacity := BCloseColorOpacityDown
			BCloseIconColorOpacity := BCloseIconColorOpacityDown
			Redraw(BClosePosX,BClosePosY,ButtonCloseUp.GetWidth(),ButtonCloseUp.GetHeight())
		ElseIf IsPasswordmask And x >= BClosePosX - ButtonCloseUp.GetWidth() And x <= BClosePosX And y >= BClosePosY And y <= BClosePosY + ButtonCloseUp.GetHeight() Then

			ButtonEyeOndown := True
			SetButtonEye(ButtonEyeOn)
		Else
			SetButtonEye(ButtonEyeOn)
				
			BCloseIconColor := CloseIconColorUp
			BCloseColor		:= BCloseColorUp
			BCloseColorOpacity := BCloseColorOpacityUp
			BCloseIconColorOpacity := BCloseIconColorOpacityUp
			ButtonCloseOndown := False
			ButtonEyeOndown := False
		End If	
	
		If y >= DialogTextPosY And y <= DialogWindow.GetHeight() + GetPrimaryDisplay().GetHeight()- (KeyboardBackgroundHeight + DialogWindow.GetHeight()) And x >= 0 And x <= BClosePosX Then
			OldKurzorX1 := KurzorX1
			KurzorShiftPos := True
		Else
			KurzorShiftPos := False
		End If
		
		For i := 1 To MaxButtons//IndexSwitch2//KEYBOARDBUTTONS
			If x >= MyButton[i].MyPosX And x <= MyButton[i].MyPosX + MyButton[i].ButtonActive.GetWidth() And y >= MyButton[i].MyPosY And y <= MyButton[i].MyPosY + MyButton[i].ButtonActive.GetHeight() Then
				MyOnDownButton(i)
				IndexButtonOnDown := i
				OldIndexButtonOnDown := i
				If  MyButton[IndexButtonOnDown].HaveCell And MyButton[IndexButtonOnDown].ButtonActive = MyButton[IndexButtonOnDown].ButtonDown Then
					ButtCellOpen := False	
					MyButton[IndexButtonOnDown].MyTextColor := MyButton[IndexButtonOnDown].TextActiveColor
					StartTimer(3,:0.5)
				End If		
				If i=IndexBackspace Then
					StartTimer(1,:0.5)
				End If
				Exit For
			End If
		End For
		
		If MyButton[IndexButtonOnDown].HaveCell Then
			MyButtonCell.SetActiveButton(x-MyButton[IndexButtonOnDown].ButtonActive.GetWidth()/2-MyButton[IndexButtonOnDown].MyPosX ,y-MyButton[IndexButtonOnDown].MyPosY)
		End If	
		UnlockRedraw()
		Return Value True
	End Function

	
	Protected Function OnMove(x As Long,y As Long,eventtime As Time,isinside As Boolean)
		Var i As Long
		Var PosBX1 As Long
		Var PosBX2 As Long
		Var PosBY1 As Long
		Var PosBY2 As Long
		LockRedraw()
		If KurzorShiftPos = True Then
			If x >= 0 And x <= DialogTextPosX Then
				LeftDialogText:=True
				LengthScrText()
				KurzorX1 := DialogTextPosX
			ElseIf x >= DialogTextPosX And x <= DialogFont.CalculateTextWidth(DialogText)  Then
				CalculateKursorPosition(x)
			ElseIf x >= DialogFont.CalculateTextWidth(DialogText) And x <= BClosePosX Then
				LeftDialogText:=False
				LengthScrText()
				KurzorX1 := DialogTextPosX + DialogFont.CalculateTextWidth(DialogText)
			End If
			Redraw(DialogTextPosX,DialogTextPosY,DialogTextPosX+DialogTextBoxWidth,DialogFont.CalculateTextHeight("A",100,0))

		Else

			PosBX1 := MyButton[IndexButtonOnDown].MyPosX
			PosBX2 := MyButton[IndexButtonOnDown].MyPosX + MyButton[IndexButtonOnDown].ButtonActive.GetWidth()
			PosBY1 := MyButton[IndexButtonOnDown].MyPosY
			PosBY2 := MyButton[IndexButtonOnDown].MyPosY + MyButton[IndexButtonOnDown].ButtonActive.GetHeight()
	
			If x <= PosBX1 Or x >= PosBX2 Or y <= PosBY1 Or y >= PosBY2 Then	
				For i := 1 To MaxButtons//IndexSwitch2//KEYBOARDBUTTONS
					If x >= MyButton[i].MyPosX And x <= MyButton[i].MyPosX + MyButton[i].ButtonActive.GetWidth() And y >= MyButton[i].MyPosY And y <= MyButton[i].MyPosY + MyButton[i].ButtonActive.GetHeight() Then
	
				 		If MyButton[IndexButtonOnDown].HaveCell And x >= MyButtonCell.BackgroundPosX And x <= MyButtonCell.BackgroundPosX + MyButtonCell.MyCellBackground.GetWidth()  And y >= MyButtonCell.BackgroundPosY And y <= MyButtonCell.BackgroundPosY + MyButtonCell.MyCellBackground.GetHeight()+MyButtonCell.MyIndic.GetHeight() Then
							MyButtonCell.SetActiveButton(x-MyButton[IndexButtonOnDown].ButtonActive.GetWidth()/2-MyButton[IndexButtonOnDown].MyPosX ,y-MyButton[IndexButtonOnDown].MyPosY)
				 		Else
				 			MyOnCloseButton(IndexButtonOnDown)
							MyOnDownButton(i)
				 			If i <> OldIndexButtonOnDown Then
								IndexButtonOnDown := i		 				
								If  MyButton[IndexButtonOnDown].HaveCell And MyButton[IndexButtonOnDown].ButtonActive = MyButton[IndexButtonOnDown].ButtonDown Then
									StopTimer(3)
									ButtCellOpen := False	
									MyButton[IndexButtonOnDown].MyTextColor := MyButton[IndexButtonOnDown].TextActiveColor
									StartTimer(3,:0.5)
								End If	
							End If		 		 	
				 		End If
				 		
				 		Exit For
					End If		
				End For
			End If
		End If	
				
		If IndexButtonOnDown <> OldIndexButtonOnDown And Not MyButton[IndexButtonOnDown].HaveCell Then
			ButtCellOpen := False
		End If
			
		If MyButton[IndexButtonOnDown].HaveCell Then
			MyButtonCell.SetActiveButton(x-MyButton[IndexButtonOnDown].ButtonActive.GetWidth()/2-MyButton[IndexButtonOnDown].MyPosX ,y-MyButton[IndexButtonOnDown].MyPosY)
			SetActiveButtonCell(x-MyButton[IndexButtonOnDown].ButtonActive.GetWidth()/2-MyButton[IndexButtonOnDown].MyPosX ,y-MyButton[IndexButtonOnDown].MyPosY)
		End If
	
		If IndexButtonOnDown <> OldIndexButtonOnDown Then
			OldIndexButtonOnDown := IndexButtonOnDown	
		End If
		Redraw(MyButtonCell.BackgroundPosX,MyButtonCell.BackgroundPosY,MyButtonCell.MyCellBackground.GetWidth(),MyButtonCell.MyCellBackground.GetHeight()+MyButtonCell.MyIndic.GetHeight())		
		UnlockRedraw()
	End Function

	Protected Function OnUp(x As Long,y As Long,eventtime As Time,isinside As Boolean)
	Var i As Long
		LockRedraw()
		StopTimer(3)
		If x >= BClosePosX And x <= BClosePosX + ButtonCloseUp.GetWidth() And y >= BClosePosY And y <= BClosePosY + ButtonCloseUp.GetHeight() And ButtonCloseOndown Then		
			ButtonCloseActual := ButtonCloseUp	
			BCloseIconColor := CloseIconColorUp	
			BCloseColor		:= BCloseColorUp
			BCloseColorOpacity := BCloseColorOpacityUp
			BCloseIconColorOpacity := BCloseIconColorOpacityUp
			Redraw(BClosePosX,BClosePosY,ButtonCloseUp.GetWidth(),ButtonCloseUp.GetHeight())
			LastError := EDIT_WAS_CANCELED
			CloseWindow()
		ElseIf IsPasswordmask And x >= BClosePosX - ButtonCloseUp.GetWidth() And x <= BClosePosX And y >= BClosePosY And y <= BClosePosY + ButtonCloseUp.GetHeight() And ButtonEyeOndown Then		

			If ButtonEyeOn Then
				ButtonEyeOndown := False	
				ButtonEyeOn := False
			Else
				ButtonEyeOndown := False
				ButtonEyeOn := True
			End If
				SetFirstText(MDT)
				SetButtonEye(ButtonEyeOn)			
		ElseIf IsPasswordmask And ButtonEyeOndown  = True And Not ButtonCloseOndown Then
			ButtonEyeOndown := False
			SetButtonEye(ButtonEyeOn)	
		ElseIf ButtonCloseOndown = True Then
			ButtonCloseActual := ButtonCloseUp
			ButtonCloseOndown := False
			BCloseIconColor := CloseIconColorUp
			BCloseColor		:= BCloseColorUp
			BCloseColorOpacity := BCloseColorOpacityUp
			BCloseIconColorOpacity := BCloseIconColorOpacityUp
			Redraw(BClosePosX,BClosePosY,ButtonCloseUp.GetWidth(),ButtonCloseUp.GetHeight())
		ElseIf KurzorShiftPos = True Then
			If x >= 0 And x <= DialogTextPosX Then
				LeftDialogText:=True
				LengthScrText()
				MumKursorPos := 1
				KurzorX1 := DialogTextPosX
				TextDial := ""					
			ElseIf x >= DialogTextPosX And x <= DialogFont.CalculateTextWidth(DialogText)  Then
				CalculateKursorPosition(x)		
			ElseIf x >= DialogFont.CalculateTextWidth(DialogText) And x <= BClosePosX Then
				LeftDialogText:=False
				LengthScrText()
				MumKursorPos := GetTextActualLength(MyDialogText)+1
				KurzorX1 := DialogTextPosX + DialogFont.CalculateTextWidth(DialogText)
				TextDial := DialogText		
			End If
			Redraw(DialogTextPosX,DialogTextPosY,DialogTextPosX+DialogTextBoxWidth,DialogFont.CalculateTextHeight("A",0,0))
		End If	

		If x >= MyButton[IndexButtonOnDown].MyPosX And x <= MyButton[IndexButtonOnDown].MyPosX + MyButton[IndexButtonOnDown].ButtonActive.GetWidth() And y >= MyButton[IndexButtonOnDown].MyPosY And y <= MyButton[IndexButtonOnDown].MyPosY + MyButton[IndexButtonOnDown].ButtonActive.GetHeight() Then
			MyOnUpButton(True,IndexButtonOnDown)
		ElseIf MyButton[IndexButtonOnDown].HaveCell And ButtCellOpen Then
			MyOnUpButton(False,IndexButtonOnDown)
		Else
			MyOnCloseButton(IndexButtonOnDown)
		End If
		
		If ButtCellOpen Then
			ButtCellOpen := False
			Redraw(MyButtonCell.BackgroundPosX,MyButtonCell.BackgroundPosY,MyButtonCell.MyCellBackground.GetWidth(),MyButtonCell.MyCellBackground.GetHeight()+MyButtonCell.MyIndic.GetHeight())		
		End If
		
		StopTimer(1)
		
		Redraw(KurzorX1,KurzorY1,3,KurzorY2)
		Redraw(OldKurzorX1,KurzorY1,3,KurzorY2)	
		UnlockRedraw()
	End Function	
	
		
	Protected Function SetActiveButtonCell(x As Long, y As Long)
		Var i As Long
		Var ActB As Long

		If MyButtonCell.MyShift Then				// musím řešit při posunu cell background
			x -= MyButtonCell.BackgrPosX
		End If
			
		If MyButtonCell.ButtonsNumber >= 6 Then

			If y < 0 - (MyButtonCell.MyCellBackground.GetHeight()+MyButtonCell.MyIndic.GetHeight())/2 And y >= 0 - (MyButtonCell.MyCellBackground.GetHeight()+MyButtonCell.MyIndic.GetHeight())  Then
				For i := 1 To 5
					If x >= MyButtonCell.MyButton[i].PosXB - MyButtonCell.MyCellBackground.GetWidth()/2 And x <= MyButtonCell.MyButton[i].PosXB - MyButtonCell.MyCellBackground.GetWidth()/2 + KeyboardNextButtonActive.GetWidth() Then
						ActB := i
					End If
				End For
			ElseIf y < 0 And y >= 0 - (MyButtonCell.MyCellBackground.GetHeight()+MyButtonCell.MyIndic.GetHeight()) Then
				For i := 6 To MyButtonCell.ButtonsNumber	
					If x >= MyButtonCell.MyButton[i].PosXB - MyButtonCell.MyCellBackground.GetWidth()/2 And x <= MyButtonCell.MyButton[i].PosXB - MyButtonCell.MyCellBackground.GetWidth()/2 + KeyboardNextButtonActive.GetWidth() Then
						ActB := i	
					End If	
				End For
			End If
		ElseIf  MyButtonCell.ButtonsNumber < 6 Then
			If y < 0 And y >= 0 - (MyButtonCell.MyCellBackground.GetHeight()+MyButtonCell.MyIndic.GetHeight()) Then
				For i := 1 To MyButtonCell.ButtonsNumber
					If x >= MyButtonCell.MyButton[i].PosXB - MyButtonCell.MyCellBackground.GetWidth()/2 And x <= MyButtonCell.MyButton[i].PosXB - MyButtonCell.MyCellBackground.GetWidth()/2 + KeyboardNextButtonActive.GetWidth() Then
						ActB := i
					End If
				End For
			End If
		End If
		
		For i := 1 To MyButtonCell.ButtonsNumber
			If i = ActB Then
				CellBCol[i] 	:= BColorDown
				CellBColOpacity[i] 	:= ButtonOpacityDown
				CelBTextCol[i]	:= TextColorDown
			Else
				CellBCol[i] := BColorUp
				CellBColOpacity[i] 	:= ButtonOpacityUp
				CelBTextCol[i]	:= TextColorUp
			End If
		End For

	End Function
	
End GraphicClass




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//**************************************************************************************************************************//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




Public GraphicClass KeyboardRoundRenderer Inherits BaseKeyboard
WithAttributes {hiddeninide}
	Protected Const COLOR_ORANGE 				As Long		:= Namespace "CUE.GraphicCollection.MulticolorPalette.1".COLOR_ORANGE
	Protected Const COLOR_REDPASTEL 			As Long		:= Namespace "CUE.GraphicCollection.MulticolorPalette.1".COLOR_REDPASTEL

	Protected Var 		KeyboardButton						As AddressOf _Picture 	:= Nothing
	Protected Var 		ButtonClose							As AddressOf _Picture 	:= Nothing
	Protected Var 		KeyboardButtonEnter					As AddressOf _Picture 	:= Nothing
	Protected Var 		KeyboardButtonSpace					As AddressOf _Picture 	:= Nothing
	Protected Var 		KeyboardButtonSwitch				As AddressOf _Picture 	:= Nothing
	Protected Var 		KeyboardButtonSwitchLeft			As AddressOf _Picture 	:= Nothing
	Protected Var 		KeyboardNextButton					As AddressOf _Picture 	:= Nothing
	Protected Var 		KeyboardButtonBackspRShift			As AddressOf _Picture 	:= Nothing
	Protected Var 		KeyboardButtonBackspRShiftRU		As AddressOf _Picture 	:= Nothing
	Protected Var 		KeyboardButtonRU					As AddressOf _Picture 	:= Nothing
	Protected Var 		KeyboardButtonEnterRU				As AddressOf _Picture 	:= Nothing
	Protected Var 		UnderlyingButtPic[KEYBOARDBUTTONS]	As UnderlyingButtPicture
	
	Protected Property ButtonColor  							As Long := COLOR_ORANGE 	WithAttributes  
			{	 PropertyGroup := "Appearance",
	  			 EditMode := "color"
	  		}

	Protected Property ButtonCloseColor  						As Long := COLOR_REDPASTEL 	WithAttributes  
			{	 PropertyGroup := "Appearance",
	  			 EditMode := "color"
	  		}
		
	Protected Var BColor As Long
	Protected Var CloseBColor As Long
	Protected Var ButtonOpacity As Byte := 255
	Protected Var CloseButtonOpacity As Byte := 255
	
	Protected Function OnSetLanguage(newlanguageid As Long)
		SetIndexByLanguage(newlanguageid)
//		LockRedraw()
//		CreateButByGetLanguag()
//		SetUnderlyingButtonPicture()
//		UnlockRedraw()
//		Redraw()
	End Function

	Protected Function SetKeyboardType(newkeyboardtype As Long)
		KeyboardType := newkeyboardtype
		LockRedraw()
		CreateButByGetLanguag()
		SetUnderlyingButtonPicture()
		UnlockRedraw()
		Redraw()
	End Function
		
	Public Function EnableCustomButton(buttontext As Text)
		If GetMemorySegment(buttontext) = _MSEG_RESOURCEDATA Then
			CustomButtonText := buttontext
		Else
			CustomButtonTextBuffer := buttontext
			CustomButtonText := CustomButtonTextBuffer
		End If
		
		If Not ShowCustomButton Then		
			LockRedraw()
			ShowCustomButton := True
			CalculateButtonPosition()
			CreateButByGetLanguag()
			SetUnderlyingButtonPicture()
//			
//			SetIndexByLanguage(GetLanguage())
//			DrawKurzor()	
//			AddPosKeyboard()
//			SetComponentColor()
//			SetUnderlyingButtonPicture()
//			CreateButByGetLanguag()
			UnlockRedraw()
			Redraw()
		End If
		
	End Function
	
	Public Function DisableCustomButton()
		If ShowCustomButton Then
			LockRedraw()
			ShowCustomButton := False
			CalculateButtonPosition()
			CreateButByGetLanguag()
			SetUnderlyingButtonPicture()
//			SetIndexByLanguage(GetLanguage())
//			DrawKurzor()	
//			AddPosKeyboard()
//			SetComponentColor()
//			SetUnderlyingButtonPicture()
//			CreateButByGetLanguag()
			UnlockRedraw()
			Redraw()
		End If
		
	End Function
	
	Public Function SetButtonColor(newbuttoncolor As Long) As Boolean	
		ButtonColor := newbuttoncolor
		SetComponentButtonColor()
		Redraw()		
		Return Value True	
	End Function
	
	Public Function GetButtonColor() As Long
		Return Value ButtonColor
	End Function
	
	Public Function SetCloseButtonColors(newclosebuttoncolor As Long) As Boolean
		ButtonCloseColor := newclosebuttoncolor
		SetComponentButtonColor()
		SetButtonEye(ButtonEyeOn)
		Redraw()		
		Return Value True	
	End Function
	
	Public Function GetCloseButtonColor() As Long
		Return Value ButtonCloseColor
	End Function
	
	
	Protected Function SetComponentButtonColor()
		ButtonOpacity 		:= GetColorComponentOpacity(ButtonColor)
		CloseButtonOpacity 	:= GetColorComponentOpacity(ButtonCloseColor)
		BColor 				:= SetColorComponentOpacity(ButtonColor,255)
		CloseBColor 		:= SetColorComponentOpacity(ButtonCloseColor,255)
	End Function
	
	Protected Function SetUnderlyingButtonPicture()
		Var i As Long

		For i := 1 To KEYBOARDBUTTONS
//			If GetLanguage() = _LANGUAGE_RUSSIAN Or GetLanguage() = _LANGUAGE_NORWEGIAN_NYNORSK Or GetLanguage() = _LANGUAGE_NORWEGIAN_BOKML Then
			If KeyboardType = KEYBOARD_CYRILLIC Or KeyboardType = KEYBOARD_NORWEGIAN Then
					If i = IndexShift1  Then
						UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButtonRU
						UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButton
					ElseIf i = IndexShift2 Then
						UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButtonBackspRShiftRU
						UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButtonBackspRShift
					ElseIf i = IndexSwitch1 Then
						If ShowLanguageButton Then
							UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButtonSwitchLeft
							UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButtonSwitchLeft 
						Else
							UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButtonSwitch
							UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButtonSwitch 						
						End If
//						UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButtonSwitch
//						UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButtonSwitch 
					ElseIf i = IndexSwitch2 Then	
						If ShowCustomButton Then
							UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButtonSwitchLeft
							UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButtonSwitchLeft
						Else
							UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButtonSwitch
							UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButtonSwitch
						End If
//						UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButtonSwitch
//						UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButtonSwitch
					ElseIf i = IndexSwitch1+1 Then
						UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButtonSpace
						UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButtonSpace
					ElseIf i = IndexEnter Then
						UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButtonEnterRU
						UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButtonEnter
					ElseIf i = IndexBackspace Then
						UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButtonBackspRShiftRU
						UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButtonBackspRShift
					ElseIf i = IndexLanguage Then
//						UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButton
//						UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButton	

						If ShowLanguageButton Then
							UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButton
							UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButton		
						Else
							UnderlyingButtPic[i].UnderlyingButtonPicture 		:= Nothing
							UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := Nothing								
						End If
					ElseIf i = IndexCustom Then
						If ShowCustomButton Then
							UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButton
							UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButton		
						Else
							UnderlyingButtPic[i].UnderlyingButtonPicture 		:= Nothing
							UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := Nothing								
						End If	
					ElseIf i > MaxButtons Then
						UnderlyingButtPic[i].UnderlyingButtonPicture 		:= Nothing
						UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := Nothing												
					Else
						UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButtonRU
						UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButton
					End If
			Else
					If i = IndexShift1 Then
						UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButton
						UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButton
					ElseIf i = IndexShift2 Then
						UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButtonBackspRShift
						UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButtonBackspRShift
					ElseIf i = IndexSwitch1 Then
					


			
						Select GetLanguage()
						Case 	_LANGUAGE_RUSSIAN,
								_LANGUAGE_RUSSIAN_REPUBLIC_OF_MOLDOVA,
								_LANGUAGE_UKRAINIAN,
								_LANGUAGE_SERBIAN_CYRILLIC,
								_LANGUAGE_BULGARIAN,
								_LANGUAGE_BELARUSIAN,
								_LANGUAGE_NORWEGIAN_NYNORSK,
								_LANGUAGE_NORWEGIAN_BOKML,
								_LANGUAGE_GREEK
							UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButtonSwitchLeft
							UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButtonSwitchLeft
						Case Else
							UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButtonSwitch
							UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButtonSwitch
						End Select
//						UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButtonSwitch
//						UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButtonSwitch
					ElseIf i = IndexSwitch2 Then
					
						If ShowCustomButton Then
							UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButtonSwitchLeft
							UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButtonSwitchLeft
						Else
							UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButtonSwitch
							UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButtonSwitch
						End If
//						UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButtonSwitch
//						UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButtonSwitch
					ElseIf i = IndexSwitch1+1 Then
						UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButtonSpace
						UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButtonSpace
					ElseIf i = IndexEnter Then
						UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButtonEnter
						UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButtonEnter
					ElseIf i = IndexBackspace Then
						UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButtonBackspRShift
						UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButtonBackspRShift	
					ElseIf i = IndexLanguage Then
						If ShowLanguageButton Then
							UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButton
							UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButton		
						Else
							UnderlyingButtPic[i].UnderlyingButtonPicture 		:= Nothing
							UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := Nothing								
						End If		
					ElseIf i = IndexCustom Then	
						If ShowCustomButton Then
							UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButton
							UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButton		
						Else
							UnderlyingButtPic[i].UnderlyingButtonPicture 		:= Nothing
							UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := Nothing								
						End If							
					ElseIf i > MaxButtons Then
						UnderlyingButtPic[i].UnderlyingButtonPicture 		:= Nothing
						UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := Nothing						
					Else
						UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButton
						UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButton
					End If
			End If
		End For
		SetComponentButtonColor()
	End Function
	
	Protected Function OnDraw()
		Var i 				As Long
		Var TextPosX 		As Long
		Var TextPosY 		As Long
		Var PosXButtCell 	As Long
		Var PosYButtCell 	As Long
		Var PosXCellText 	As Long
		Var PosYCellText 	As Long

//CLOSE		 
		DrawRectangle(RectangleColor,0,DialogWindowRectanglePosY,KeyboardBackgroundWidth,KeyboardBackgroundHeight)
		
		If IsPasswordmask Then
			DrawPicture(DialogWindowEye,0,DialogWindowPosY)	
		Else
			DrawPicture(DialogWindow,0,DialogWindowPosY)
		End If
		
		If IsPasswordmask Then	
			DrawTintedPicture(ButtonClose,CloseBColor,BClosePosX - ButtonClose.GetWidth(),BClosePosY,-1,-1,0,0,CloseButtonOpacity)
			DrawPicture(ButtonEyeActual,BClosePosX - ButtonEyeActual.GetWidth(),BClosePosY)
	
			DrawTintedPicture(ButtonClose,CloseBColor,BClosePosX,BClosePosY,-1,-1,0,0,CloseButtonOpacity)
			DrawPicture(ButtonCloseActual,BClosePosX,BClosePosY)
		Else
			DrawTintedPicture(ButtonClose,CloseBColor,BClosePosX,BClosePosY,-1,-1,0,0,CloseButtonOpacity)
			DrawPicture(ButtonCloseActual,BClosePosX,BClosePosY)
		End If
					
		
		If GetTextActualLength(DialogText) < 1 Then
			DrawText(DialogFont,MyPromtText,PromtTextColor,DialogTextPosX,DialogTextPosY,DialogTextBoxWidth,-1)			
		Else
			DrawText(DialogFont,DialogText,ButtonDialogTextColor,DialogTextPosX,DialogTextPosY,DialogTextBoxWidth,-1)
		End If
	
		DrawRectangle(KurzorColor, KurzorX1,KurzorY1,KurzorX2,KurzorY2)

		For i := 1 To MaxButtons//IndexSwitch2//KEYBOARDBUTTONS
			TextPosX := ((MyButton[i].ButtonActive.GetWidth()/2) - (MyButton[i].ButtonFont.CalculateTextWidth(MyButton[i].ButtonText)/2)) + MyButton[i].MyPosX + MyButton[i].TextPosX
			TextPosY := ((MyButton[i].ButtonActive.GetHeight()/2) - (MyButton[i].ButtonFont.CalculateTextHeight(MyButton[i].ButtonText,0,0)/2)) + MyButton[i].MyPosY + MyButton[i].TextPosY
			
			If CreateFirstB Then
				If i > MaxButtons Then//IndexSwitch2 Then
					DrawTintedPicture(UnderlyingButtPic[i].UnderlyingButtonPicture,_COLOR_BLACK,MyButton[i].MyPosX,MyButton[i].MyPosY,-1,-1,0,0,0)
				Else
					DrawTintedPicture(UnderlyingButtPic[i].UnderlyingButtonPicture,BColor,MyButton[i].MyPosX,MyButton[i].MyPosY,-1,-1,0,0,ButtonOpacity)
				End If
			Else	
//				If ((GetLanguage() = _LANGUAGE_RUSSIAN Or GetLanguage() = _LANGUAGE_NORWEGIAN_NYNORSK Or GetLanguage() = _LANGUAGE_NORWEGIAN_BOKML) And (i = 11 Or i = 22 Or i = 23 Or i = 35)) Or (i = IndexShift1 Or i = IndexShift2) Then
				If ((KeyboardType = KEYBOARD_CYRILLIC Or KeyboardType = KEYBOARD_NORWEGIAN) And (i = 11 Or i = 22 Or i = 23 Or i = 35)) Or (i = IndexShift1 Or i = IndexShift2) Then
					DrawTintedPicture(UnderlyingButtPic[i].UnderlyingButtonPictureForSymb,_COLOR_BLACK,MyButton[i].MyPosX,MyButton[i].MyPosY,-1,-1,0,0,0)
				Else
					DrawTintedPicture(UnderlyingButtPic[i].UnderlyingButtonPictureForSymb,BColor,MyButton[i].MyPosX,MyButton[i].MyPosY,-1,-1,0,0,ButtonOpacity)				
				End If
			End If
			
			DrawPicture(MyButton[i].ButtonActive,MyButton[i].MyPosX,MyButton[i].MyPosY)
			DrawTintedPicture(MyButton[i].ButtonSymbol,_COLOR_WHITE, MyButton[i].MyPosX + MyButton[i].ButtonCentreX + MyButton[i].TextPosX +1,MyButton[i].MyPosY + MyButton[i].ButtonCentreY + MyButton[i].TextPosY +1,-1,-1)
			DrawTintedPicture(MyButton[i].ButtonSymbol,MyButton[i].MyTextColor, MyButton[i].MyPosX + MyButton[i].ButtonCentreX + MyButton[i].TextPosX,MyButton[i].MyPosY + MyButton[i].ButtonCentreY + MyButton[i].TextPosY,-1,-1)

			DrawText(MyButton[i].ButtonFont,MyButton[i].ButtonText,_COLOR_WHITE,TextPosX + 1 ,TextPosY + 1 ,-1,-1)
			DrawText(MyButton[i].ButtonFont,MyButton[i].ButtonText,MyButton[i].MyTextColor,TextPosX,TextPosY,-1,-1)	
		End For
		
		If ButtCellOpen Then
			DrawPicture(MyButtonCell.MyCellBackground,MyButtonCell.BackgroundPosX,MyButtonCell.BackgroundPosY)
			DrawPicture(KeyboardCellIndic,MyButtonCell.IndicPosX,MyButtonCell.IndicPosY)
	
			For i := 1 To MyButtonCell.ButtonsNumber
				PosXButtCell := MyButtonCell.BackgroundPosX+MyButtonCell.MyButton[i].PosXB
				PosYButtCell := MyButtonCell.BackgroundPosY+MyButtonCell.MyButton[i].PosYB
				PosXCellText := PosXButtCell+MyButtonCell.MyButton[i].TextPosX
				PosYCellText := PosYButtCell+MyButtonCell.MyButton[i].TextPosY
				
				DrawTintedPicture(KeyboardNextButton,BColor,PosXButtCell, PosYButtCell,-1,-1,0,0,ButtonOpacity)
				DrawPicture(MyButtonCell.MyButton[i].MyButton, PosXButtCell, PosYButtCell)
				DrawText(KeyBoardFont,MyButtonCell.MyButton[i].ButtonText,_COLOR_WHITE,PosXCellText+1,PosYCellText+1,-1,-1)
				DrawText(KeyBoardFont,MyButtonCell.MyButton[i].ButtonText,ButtonTextColor,PosXCellText,PosYCellText,-1,-1)						
			End For	
		End If		
	End Function
End GraphicClass



///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////

Public GraphicClass NumpadRoundRenderer Inherits BaseNumpad
WithAttributes {hiddeninide}
	Protected Const COLOR_ORANGE 				As Long		:= Namespace "CUE.GraphicCollection.MulticolorPalette.1".COLOR_ORANGE
	Protected Const COLOR_REDPASTEL 			As Long		:= Namespace "CUE.GraphicCollection.MulticolorPalette.1".COLOR_REDPASTEL

	Protected Var 		KeyboardButton						As AddressOf _Picture 	:= Nothing
	Protected Var 		ButtonClose							As AddressOf _Picture 	:= Nothing
	Protected Var 		KeyboardButtonEnter					As AddressOf _Picture 	:= Nothing
	Protected Var 		KeyboardNextButton					As AddressOf _Picture 	:= Nothing
	Protected Var 		UnderlyingButtPic[KEYBOARDBUTTONS]	As UnderlyingButtPicture
	
	Protected Property ButtonColor  							As Long := COLOR_ORANGE 	WithAttributes  
			{	 PropertyGroup := "Appearance",
	  			 EditMode := "color"
	  		}

	Protected Property ButtonCloseColor  						As Long := COLOR_REDPASTEL 	WithAttributes  
			{	 PropertyGroup := "Appearance",
	  			 EditMode := "color"
	  		}
		
	Protected Var BColor As Long
	Protected Var CloseBColor As Long
	Protected Var ButtonOpacity As Byte := 255
	Protected Var CloseButtonOpacity As Byte := 255
	
	Protected Function OnSetLanguage(newlanguageid As Long)
		SetIndexByLanguage(newlanguageid)
//		LockRedraw()
//		CreateButByGetLanguag()
//		SetUnderlyingButtonPicture()
//		UnlockRedraw()
//		Redraw()
	End Function
	
	Protected Function SetKeyboardType(newkeyboardtype As Long)
		KeyboardType := newkeyboardtype
		LockRedraw()
		CreateButByGetLanguag()
		SetUnderlyingButtonPicture()
		UnlockRedraw()
		Redraw()
	End Function
	
	Public Function SetButtonColor(newbuttoncolor As Long) As Boolean	
		ButtonColor := newbuttoncolor
		SetComponentButtonColor()
		Redraw()		
		Return Value True	
	End Function
	
	Public Function GetButtonColor() As Long
		Return Value ButtonColor
	End Function
	
	Public Function SetCloseButtonColors(newclosebuttoncolor As Long) As Boolean
		ButtonCloseColor := newclosebuttoncolor
		SetComponentButtonColor()
		SetButtonEye(ButtonEyeOn)
		Redraw()		
		Return Value True	
	End Function
	
	Public Function GetCloseButtonColor() As Long
		Return Value ButtonCloseColor
	End Function
	
	
	Protected Function SetComponentButtonColor()
		ButtonOpacity 		:= GetColorComponentOpacity(ButtonColor)
		CloseButtonOpacity 	:= GetColorComponentOpacity(ButtonCloseColor)
		BColor 				:= SetColorComponentOpacity(ButtonColor,255)
		CloseBColor 		:= SetColorComponentOpacity(ButtonCloseColor,255)
	End Function
	
	Protected Function SetUnderlyingButtonPicture()
		Var i As Long

		For i := 1 To MaxButtons
			If i = IndexEnter Then
				UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButtonEnter
				UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButtonEnter
			Else
				UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButton
				UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButton			
			End If
		End For
		SetComponentButtonColor()
	End Function

	Protected Function OnDraw()
		Var i 				As Long
		Var j 				As Long
		Var TextPosX 		As Long
		Var TextPosY 		As Long
		Var PosXButtCell 	As Long
		Var PosYButtCell 	As Long
		Var PosXCellText 	As Long
		Var PosYCellText 	As Long

		DrawRectangle(RectangleColor,0,DialogWindowRectanglePosY,KeyboardBackgroundWidth,KeyboardBackgroundHeight)		
	
		If IsPasswordmask Then
			DrawPicture(DialogWindowEye,0,DialogWindowPosY)	
		Else
			DrawPicture(DialogWindow,0,DialogWindowPosY)
		End If
		
		If IsPasswordmask Then	
			DrawTintedPicture(ButtonClose,CloseBColor,BClosePosX - ButtonClose.GetWidth(),BClosePosY,-1,-1,0,0,CloseButtonOpacity)
			DrawPicture(ButtonEyeActual,BClosePosX - ButtonEyeActual.GetWidth(),BClosePosY)
		
			DrawTintedPicture(ButtonClose,CloseBColor,BClosePosX,BClosePosY,-1,-1,0,0,CloseButtonOpacity)
			DrawPicture(ButtonCloseActual,BClosePosX,BClosePosY)
		Else
			DrawTintedPicture(ButtonClose,CloseBColor,BClosePosX,BClosePosY,-1,-1,0,0,CloseButtonOpacity)
			DrawPicture(ButtonCloseActual,BClosePosX,BClosePosY)
		End If

		If GetTextActualLength(DialogText) < 1 Then
			DrawText(DialogFont,MyPromtText,PromtTextColor,DialogTextPosX,DialogTextPosY,DialogTextBoxWidth,-1)			
		Else
			DrawText(DialogFont,DialogText,ButtonDialogTextColor,DialogTextPosX,DialogTextPosY,DialogTextBoxWidth,-1)
		End If
	
		DrawRectangle(KurzorColor, KurzorX1,KurzorY1,KurzorX2,KurzorY2)

		For i := 1 To MaxButtons// KEYBOARDBUTTONS
			TextPosX := ((MyButton[i].ButtonActive.GetWidth()/2) - (MyButton[i].ButtonFont.CalculateTextWidth(MyButton[i].ButtonText)/2)) + MyButton[i].MyPosX + MyButton[i].TextPosX
			TextPosY := ((MyButton[i].ButtonActive.GetHeight()/2) - (MyButton[i].ButtonFont.CalculateTextHeight(MyButton[i].ButtonText,0,0)/2)) + MyButton[i].MyPosY + MyButton[i].TextPosY
			
			DrawTintedPicture(UnderlyingButtPic[i].UnderlyingButtonPicture,BColor,MyButton[i].MyPosX,MyButton[i].MyPosY,-1,-1,0,0,ButtonOpacity)
			DrawPicture(MyButton[i].ButtonActive,MyButton[i].MyPosX,MyButton[i].MyPosY)
			DrawTintedPicture(MyButton[i].ButtonSymbol,_COLOR_WHITE, MyButton[i].MyPosX + MyButton[i].ButtonCentreX + MyButton[i].TextPosX +1,MyButton[i].MyPosY + MyButton[i].ButtonCentreY + MyButton[i].TextPosY +1,-1,-1)
			DrawTintedPicture(MyButton[i].ButtonSymbol,MyButton[i].MyTextColor, MyButton[i].MyPosX + MyButton[i].ButtonCentreX + MyButton[i].TextPosX,MyButton[i].MyPosY + MyButton[i].ButtonCentreY + MyButton[i].TextPosY,-1,-1)

			DrawText(MyButton[i].ButtonFont,MyButton[i].ButtonText,_COLOR_WHITE,TextPosX + 1 ,TextPosY + 1 ,-1,-1)
			DrawText(MyButton[i].ButtonFont,MyButton[i].ButtonText,MyButton[i].MyTextColor,TextPosX,TextPosY,-1,-1)	
			
			//Spodní index rozšíření tlačítka o další znaky
			If MyButton[i].HaveCell Then
				For j := 1 To MyButton[i].ButtonCellActive			
					DrawText(ShiftFont,MyButton[i].MyCBTexts[j],&hb3ffffff,TextPosX + 1 + MyButton[i].ButtonActive.GetWidth()/3 ,TextPosY + 1 - ShiftFont.GetHeight()/2 ,-1,-1)
					DrawText(ShiftFont,MyButton[i].MyCBTexts[j],SetColorComponentOpacity(MyButton[i].MyTextColor,GetColorComponentOpacity(MyButton[i].MyTextColor)/255 * 179),TextPosX+ MyButton[i].ButtonActive.GetWidth()/3 ,TextPosY - ShiftFont.GetHeight()/2,-1,-1)	
				End For
			End If			
		End For
		
		If ButtCellOpen Then
			DrawPicture(MyButtonCell.MyCellBackground,MyButtonCell.BackgroundPosX,MyButtonCell.BackgroundPosY)
			DrawPicture(KeyboardCellIndic,MyButtonCell.IndicPosX,MyButtonCell.IndicPosY)
	
			For i := 1 To MyButtonCell.ButtonsNumber
				PosXButtCell := MyButtonCell.BackgroundPosX+MyButtonCell.MyButton[i].PosXB
				PosYButtCell := MyButtonCell.BackgroundPosY+MyButtonCell.MyButton[i].PosYB
				PosXCellText := PosXButtCell+MyButtonCell.MyButton[i].TextPosX
				PosYCellText := PosYButtCell+MyButtonCell.MyButton[i].TextPosY
				
				DrawTintedPicture(KeyboardNextButton,BColor,PosXButtCell, PosYButtCell,-1,-1,0,0,ButtonOpacity)
				DrawPicture(MyButtonCell.MyButton[i].MyButton, PosXButtCell, PosYButtCell)
				DrawText(KeyBoardFont,MyButtonCell.MyButton[i].ButtonText,_COLOR_WHITE,PosXCellText+1,PosYCellText+1,-1,-1)
				DrawText(KeyBoardFont,MyButtonCell.MyButton[i].ButtonText,ButtonTextColor,PosXCellText,PosYCellText,-1,-1)						
			End For	
		End If		
	End Function

End GraphicClass

///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////

Public GraphicClass NumpadSquareRenderer Inherits BaseNumpad
WithAttributes {hiddeninide}
	Protected Const COLOR_GREYDARK 			As Long		:= Namespace "CUE.GraphicCollection.MulticolorPalette.1".COLOR_GREYDARK
	Protected Const COLOR_REDPASTEL 		As Long		:= Namespace "CUE.GraphicCollection.MulticolorPalette.1".COLOR_REDPASTEL
	
	Protected Var 		KeyboardButton						As AddressOf _Picture 	:= Nothing
	Protected Var 		ButtonClose							As AddressOf _Picture 	:= Nothing
	Protected Var 		KeyboardButtonEnter					As AddressOf _Picture 	:= Nothing
	Protected Var 		KeyboardNextButton					As AddressOf _Picture 	:= Nothing
		
	Protected Var 		KeyboardButton2						As AddressOf _Picture 	:= Nothing
	Protected Var 		ButtonClose2						As AddressOf _Picture 	:= Nothing
	Protected Var 		KeyboardButtonEnter2				As AddressOf _Picture 	:= Nothing
	Protected Var 		KeyboardNextButton2					As AddressOf _Picture 	:= Nothing
		
	Protected Var 		KeyboardButtonClose					As AddressOf _Picture 	:= Nothing
	
	Protected Var 		UnderlyingButtPic[KEYBOARDBUTTONS]	As UnderlyingButtPicture
	
	Protected Var		BCloseIconColor						As Long
	Protected Var		BCloseIconColorUp					As Long	
	Protected Var		BCloseIconColorDown					As Long	
		
	Protected Var		BCloseIconColorOpacity				As Byte	
	Protected Var		BCloseIconColorOpacityUp			As Byte	
	Protected Var		BCloseIconColorOpacityDown			As Byte
	
	Protected Var		BCloseColor							As Long
	Protected Var		BCloseColorUp						As Long
	Protected Var		BCloseColorDown						As Long
	
	Protected Var		BCloseColorOpacity					As Byte
	Protected Var		BCloseColorOpacityUp				As Byte
	Protected Var		BCloseColorOpacityDown				As Byte
	
	Protected Var 		BColor[KEYBOARDBUTTONS]				As Long		
	Protected Var		BColorUp							As Long
	Protected Var		BColorDown							As Long
	
	Protected Var 		BColorOpacity[KEYBOARDBUTTONS]		As Byte
	Protected Var		ButtonOpacityUp						As Byte
	Protected Var		ButtonOpacityDown					As Byte	
	
	Protected Var		CellBCol[10]						As Long
	Protected Var		CellBColOpacity[10]					As Long
	Protected Var		CelBTextCol[10]						As Long
				
	Protected Property BackgroundColor					As Long := &H7Fffffff WithAttributes
			{	PropertyGroup := "Appearance",
				EditMode := "color"
			}	
	Protected Property TextColorUp						As Long := _COLOR_WHITE WithAttributes
			{	PropertyGroup := "Up",
				EditMode := "color"
			}
	Protected Property TextColorDown					As Long := _COLOR_BLACK WithAttributes
			{	PropertyGroup := "Down",
				EditMode := "color"
			}
	Protected Property CloseIconColorUp						As Long := _COLOR_WHITE WithAttributes
			{	PropertyGroup := "Up",
				EditMode := "color"
			}
	Protected Property CloseIconColorDown					As Long := _COLOR_BLACK WithAttributes
			{	PropertyGroup := "Down",
				EditMode := "color"
			}			
	Protected Property ButtonColorUp  							As Long := COLOR_GREYDARK 	WithAttributes  
			{	 PropertyGroup := "Up",
				EditMode := "color"
			}	
	Protected Property ButtonColorDown 							As Long := _COLOR_WHITE 	WithAttributes  
			{	 PropertyGroup := "Down",
				 EditMode := "color"
			}
	Protected Property ButtonCloseColorUp  						As Long := COLOR_REDPASTEL 	WithAttributes  
			{  	 PropertyGroup := "Up",
	  			 EditMode := "color"
			}	  		
	Protected Property ButtonCloseColorDown  						As Long := COLOR_GREYDARK 	WithAttributes  
			{	 PropertyGroup := "Down",
	  			 EditMode := "color"
			}

	Protected Function OnSetLanguage(newlanguageid As Long)
		SetIndexByLanguage(newlanguageid)
//		LockRedraw()
//		CreateButByGetLanguag()
//		SetUnderlyingButtonPicture()
//		UnlockRedraw()
//		Redraw()
	End Function

	Protected Function SetKeyboardType(newkeyboardtype As Long)
		KeyboardType := newkeyboardtype
		LockRedraw()
		CreateButByGetLanguag()
		SetUnderlyingButtonPicture()
		UnlockRedraw()
		Redraw()
	End Function
	
	Protected Function SetComponentColor()
		SetTextColorDown(TextColorDown)
		SetTextColorUp(TextColorUp)
		SetButtonColorDown(ButtonColorDown)
		SetButtonColorUp(ButtonColorUp)
		SetButtonCloseColorDown(ButtonCloseColorDown)
		SetButtonCloseColorUp(ButtonCloseColorUp)
		SetCloseIconColorDown(CloseIconColorDown)
		SetCloseIconColorUp(CloseIconColorUp)
	End Function
	
	Public Function SetTextColorDown(newtextcolordown As Long) As Boolean
		Var i As Long
		TextColorDown	:= newtextcolordown
		ButtonTextColorActive:= newtextcolordown
		
		For i := 1 To KEYBOARDBUTTONS
			If i = IndexButtonOnDown Then
				MyButton[i].MyTextColor := TextColorDown	
			End If
			MyButton[i].TextActiveColor	:= TextColorDown	
		End For	
		Redraw()
		Return Value True
	End Function
	
	Public Function GetTextColorDown()As Long
		Return Value TextColorDown
	End Function

	Public Function SetTextColorUp(newtextcolorup As Long) As Boolean
		Var i As Long
		TextColorUp		:= newtextcolorup
		ButtonTextColor	:= newtextcolorup

		For i := 1 To 10
			CelBTextCol[i] := ButtonTextColor
		End For
		
		For i := 1 To KEYBOARDBUTTONS
			If Not i = IndexButtonOnDown Then
				MyButton[i].MyTextColor := TextColorUp
			End If
			MyButton[i].TextColor	:= TextColorUp	
		End For	
		Redraw()
		Return Value True
	End Function
		
	Public Function GetTextColorUp()As Long
		Return Value TextColorUp
	End Function
			
	Public Function SetButtonColorDown(newbuttoncolordown As Long) As Boolean
		ButtonColorDown 	:= newbuttoncolordown
		ButtonOpacityDown 	:= GetColorComponentOpacity(ButtonColorDown)
		BColorDown 			:= SetColorComponentOpacity(ButtonColorDown,255)
		Redraw()
		Return Value True
	End Function
	
	Public Function GetButtonColorDown()As Long
		Return Value ButtonColorDown
	End Function
	
	Public Function SetButtonColorUp(newbuttoncolorup As Long) As Boolean
		Var i As Long
			ButtonColorUp 			:= newbuttoncolorup
			ButtonOpacityUp 		:= GetColorComponentOpacity(ButtonColorUp)
			BColorUp 				:= SetColorComponentOpacity(ButtonColorUp,255)
			For i := 1 To KEYBOARDBUTTONS
				BColor[i]			:= BColorUp
				BColorOpacity[i] 	:= ButtonOpacityUp
			End For	
			For i := 1 To 10
				CellBCol[i] 		:= BColorUp
				CellBColOpacity[i] 	:= ButtonOpacityUp
			End For
			Redraw()	
			Return Value True
	End Function
	
	Public Function GetButtonColorUp()As Long
		Return Value ButtonColorUp
	End Function
			
	Public Function SetButtonCloseColorDown(newclosebuttoncolordown As Long) As Boolean
		ButtonCloseColorDown 	:= newclosebuttoncolordown
		BCloseColorOpacityDown	:= GetColorComponentOpacity(ButtonCloseColorDown)
		BCloseColorDown 		:= SetColorComponentOpacity(ButtonCloseColorDown,255)
		SetButtonEye(ButtonEyeOn)
		Redraw()
		Return Value True			
	End Function
		
	Public Function GetButtonCloseColorDown()As Long
		Return Value ButtonCloseColorDown
	End Function

	Public Function SetButtonCloseColorUp(newclosebuttoncolorup As Long) As Boolean
		ButtonCloseColorUp 		:= newclosebuttoncolorup
		BCloseColorUp 			:= SetColorComponentOpacity(ButtonCloseColorUp,255)
		BCloseColorOpacityUp	:= GetColorComponentOpacity(ButtonCloseColorUp)
		
		BCloseColor 			:= BCloseColorUp
		BCloseColorOpacity 		:= BCloseColorOpacityUp
		Redraw()
		Return Value True		
	End Function
	
	Public Function GetButtonCloseColorUp()As Long
		Return Value ButtonCloseColorUp
	End Function
			
	Public Function SetCloseIconColorDown(newcloseiconcolordown As Long) As Boolean
		CloseIconColorDown 			:= newcloseiconcolordown
		BCloseIconColorDown 		:= SetColorComponentOpacity(CloseIconColorDown,255)
		BCloseIconColorOpacityDown 	:= GetColorComponentOpacity(CloseIconColorDown)
		If ButtonCloseOndown Then	
			BCloseIconColor := BCloseIconColorDown
			BCloseIconColorOpacity := BCloseIconColorOpacityDown
		End If
		SetButtonEye(ButtonEyeOn)
		Return Value True
	End Function
	
	Public Function GetCloseIconColorDown()As Long
		Return Value CloseIconColorDown
	End Function

	Public Function SetCloseIconColorUp(newcloseiconcolorup As Long) As Boolean
		CloseIconColorUp 			:= newcloseiconcolorup
		BCloseIconColorUp 			:= SetColorComponentOpacity(CloseIconColorUp,255)
		BCloseIconColorOpacityUp 	:= GetColorComponentOpacity(CloseIconColorUp)
		If Not ButtonCloseOndown Then
			BCloseIconColor := BCloseIconColorUp
			BCloseIconColorOpacity := BCloseIconColorOpacityUp
		End If 
		Return Value True
	End Function

	Public Function GetCloseIconColorUp()As Long
		Return Value CloseIconColorUp
	End Function
		
	Public Function SetBackgroundColor(newbackgroundcolor As Long) As Boolean
		BackgroundColor := newbackgroundcolor
		RectangleColor := newbackgroundcolor
		Redraw()
		Return Value True
	End Function
	
	Public Function GetBackgroundColor()As Long
		Return Value BackgroundColor
	End Function
	
	Protected Function SetUnderlyingButtonPicture()
		Var i As Long

		For i := 1 To MaxButtons
			If i = IndexEnter Then
				UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButtonEnter
				UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButtonEnter
			Else
				UnderlyingButtPic[i].UnderlyingButtonPicture 		:= KeyboardButton
				UnderlyingButtPic[i].UnderlyingButtonPictureForSymb := KeyboardButton			
			End If
		End For
	End Function
		
	Protected Function OnDraw()
		Var i 				As Long
		Var j 				As Long
		Var TextPosX 		As Long
		Var TextPosY 		As Long
		Var PosXButtCell 	As Long
		Var PosYButtCell 	As Long
		Var PosXCellText 	As Long
		Var PosYCellText 	As Long

//CLOSE		 
		DrawRectangle(RectangleColor,0,DialogWindowRectanglePosY - DialogWindow.GetHeight(),KeyboardBackgroundWidth,KeyboardBackgroundHeight + DialogWindow.GetHeight())
		
		If IsPasswordmask Then
			DrawPicture(DialogWindowEye,0,DialogWindowPosY)	
		Else
			DrawPicture(DialogWindow,0,DialogWindowPosY)
		End If
		
		If IsPasswordmask Then	
			DrawTintedPicture(ButtonClose,BEyeColor,BClosePosX - ButtonClose.GetWidth(),BClosePosY,-1,-1,0,0,BEyeColorOpacity)
			DrawPicture(ButtonEyeActual,BClosePosX - ButtonEyeActual.GetWidth(),BClosePosY)
			DrawTintedPicture(EyeIcon,BEyeIconColor,BClosePosX - ButtonCloseActual.GetWidth() + (ButtonCloseActual.GetWidth() - EyeIcon.GetWidth())/2,BClosePosY + (ButtonCloseActual.GetHeight() - EyeIcon.GetHeight())/2,-1,-1,0,0,BEyeIconColorOpacity)
		
			DrawTintedPicture(ButtonClose,BCloseColor,BClosePosX,BClosePosY,-1,-1,0,0,BCloseColorOpacity)
			DrawPicture(ButtonCloseActual,BClosePosX,BClosePosY)
			DrawTintedPicture(KeyboardButtonClose,BCloseIconColor,BClosePosX + (ButtonCloseActual.GetWidth() - KeyboardButtonClose.GetWidth())/2,BClosePosY + (ButtonCloseActual.GetHeight() - KeyboardButtonClose.GetHeight())/2,-1,-1,0,0,BCloseIconColorOpacity)
		Else
			DrawTintedPicture(ButtonClose,BCloseColor,BClosePosX,BClosePosY,-1,-1,0,0,BCloseColorOpacity)
			DrawPicture(ButtonCloseActual,BClosePosX,BClosePosY)
			DrawTintedPicture(KeyboardButtonClose,BCloseIconColor,BClosePosX + (ButtonCloseActual.GetWidth() - KeyboardButtonClose.GetWidth())/2,BClosePosY + (ButtonCloseActual.GetHeight() - KeyboardButtonClose.GetHeight())/2,-1,-1,0,0,BCloseIconColorOpacity)
		End If

//TEXT KURZOR		
		If GetTextActualLength(DialogText) < 1 Then
			DrawText(DialogFont,MyPromtText,PromtTextColor,DialogTextPosX,DialogTextPosY,DialogTextBoxWidth,-1)			
		Else
			DrawText(DialogFont,DialogText,ButtonDialogTextColor,DialogTextPosX,DialogTextPosY,DialogTextBoxWidth,-1)
		End If
		DrawRectangle(KurzorColor, KurzorX1,KurzorY1,KurzorX2,KurzorY2)

		For i := 1 To MaxButtons
			TextPosX := ((MyButton[i].ButtonActive.GetWidth()/2) - (MyButton[i].ButtonFont.CalculateTextWidth(MyButton[i].ButtonText)/2)) + MyButton[i].MyPosX + MyButton[i].TextPosX
			TextPosY := ((MyButton[i].ButtonActive.GetHeight()/2) - (MyButton[i].ButtonFont.CalculateTextHeight(MyButton[i].ButtonText,0,0)/2)) + MyButton[i].MyPosY + MyButton[i].TextPosY
//BUTTONS		
			DrawTintedPicture(UnderlyingButtPic[i].UnderlyingButtonPicture,BColor[i],MyButton[i].MyPosX,MyButton[i].MyPosY,-1,-1,0,0,BColorOpacity[i])
			DrawPicture(MyButton[i].ButtonActive,MyButton[i].MyPosX,MyButton[i].MyPosY)
//SYMBOL BACKSPACE,SHIFT
			DrawTintedPicture(MyButton[i].ButtonSymbol,SetColorComponentOpacity(MyButton[i].MyTextColor,255), MyButton[i].MyPosX + MyButton[i].ButtonCentreX + MyButton[i].TextPosX,MyButton[i].MyPosY + MyButton[i].ButtonCentreY + MyButton[i].TextPosY,-1,-1,0,0,GetColorComponentOpacity(MyButton[i].MyTextColor))
			DrawText(MyButton[i].ButtonFont,MyButton[i].ButtonText,MyButton[i].MyTextColor,TextPosX,TextPosY,-1,-1)	

			//Spodní index rozšíření tlačítka o další znaky
			If MyButton[i].HaveCell Then
				For j := 1 To MyButton[i].ButtonCellActive			
					DrawText(ShiftFont,MyButton[i].MyCBTexts[j],SetColorComponentOpacity(MyButton[i].MyTextColor,GetColorComponentOpacity(MyButton[i].MyTextColor)/255 * 179),TextPosX+ MyButton[i].ButtonActive.GetWidth()/3 ,TextPosY - ShiftFont.GetHeight()/2,-1,-1)	
				End For
			End If	
			
		End For
//CELL		
		If ButtCellOpen Then
			DrawRectangle(RectangleColor,MyButtonCell.BackgroundPosX,MyButtonCell.BackgroundPosY,MyButtonCell.MyCellBackground.GetWidth()-CellShadowSize,MyButtonCell.MyCellBackground.GetHeight()-CellShadowSize)
			DrawPicture(MyButtonCell.MyCellBackground,MyButtonCell.BackgroundPosX,MyButtonCell.BackgroundPosY)
			DrawPicture(KeyboardCellIndic,MyButtonCell.IndicPosX,MyButtonCell.IndicPosY)
	
			For i := 1 To MyButtonCell.ButtonsNumber
				PosXButtCell := MyButtonCell.BackgroundPosX+MyButtonCell.MyButton[i].PosXB
				PosYButtCell := MyButtonCell.BackgroundPosY+MyButtonCell.MyButton[i].PosYB
				PosXCellText := PosXButtCell+MyButtonCell.MyButton[i].TextPosX
				PosYCellText := PosYButtCell+MyButtonCell.MyButton[i].TextPosY
				DrawTintedPicture(KeyboardNextButton,CellBCol[i],PosXButtCell, PosYButtCell,-1,-1,0,0,CellBColOpacity[i])
				DrawPicture(MyButtonCell.MyButton[i].MyButton, PosXButtCell, PosYButtCell)
				DrawText(KeyBoardFont,MyButtonCell.MyButton[i].ButtonText,CelBTextCol[i],PosXCellText,PosYCellText,-1,-1)							
			End For	
		End If		
	End Function

	Protected Function MyOnDownButton(id As Long)
		MyButton[id].ButtonActive 	:= MyButton[id].ButtonDown
		MyButton[id].TextPosX 		:= MyButton[id].TextPosXDown
		MyButton[id].TextPosY 		:= MyButton[id].TextPosYDown

 		BColor[id] := BColorDown
 		BColorOpacity[id] := ButtonOpacityDown	
		MyButton[id].MyTextColor := ButtonTextColorActive 	
		Redraw(MyButton[id].MyPosX,MyButton[id].MyPosY,MyButton[id].ButtonUp.GetWidth(),MyButton[id].ButtonUp.GetHeight())
	End Function
	
	Protected Function MyOnCloseButton(id As Long)
		MyButton[id].ButtonActive 	:= MyButton[id].ButtonUp
		MyButton[id].MyTextColor 	:= MyButton[id].TextColor
		MyButton[id].TextPosX 		:= MyButton[id].TextPosXUp
		MyButton[id].TextPosY 		:=	MyButton[id].TextPosYUp
		
		BColor[id] := BColorUp
		BColorOpacity[id] := ButtonOpacityUp
		MyButton[id].MyTextColor := ButtonTextColor		
		Redraw(MyButton[id].MyPosX,MyButton[id].MyPosY,MyButton[id].ButtonUp.GetWidth(),MyButton[id].ButtonUp.GetHeight())
	End Function
	
	Protected Function MyOnUpButton(isinside As Boolean, id As Long)
		
		MyButton[id].ButtonActive 	:= MyButton[id].ButtonUp
		MyButton[id].MyTextColor 	:= MyButton[id].TextColor
		MyButton[id].TextPosX 		:= MyButton[id].TextPosXUp
		MyButton[id].TextPosY 		:= MyButton[id].TextPosYUp
	
		BColor[id] := BColorUp
		BColorOpacity[id] := ButtonOpacityUp
 		MyButton[id].MyTextColor := ButtonTextColor		

		If id = IndexBackspace And isinside Then 					//backspace
			Backspace()
		ElseIf id = IndexEnter And isinside Then 					// enter
			Enter()
		Else														//ostatní znaky
			If isinside Then										//když se dotku uvnitř, vložím svůj znak
				WriteSymbol(MyButton[id].ButtonText)
			ElseIf 	MyButton[id].HaveCell Then						//když se dotku v buňce, vložím znak z buňky	
				WriteSymbol(MyButtonCell.GetActiveButton())
				CellBCol[MyButtonCell.MyActB] := BColorUp
				CellBColOpacity[MyButtonCell.MyActB]	:= ButtonOpacityUp
				CelBTextCol[MyButtonCell.MyActB] := TextColorUp 
			End If					
		End If			

		Redraw(MyButton[id].MyPosX,MyButton[id].MyPosY,MyButton[id].ButtonUp.GetWidth(),MyButton[id].ButtonUp.GetHeight())	
	End Function	

	Protected Function SetButtonEye(ison As Boolean)
		If ison Then
			ButtonEyeActual := ButtonCloseUp
			BEyeColor		:= BCloseColorUp
			BEyeColorOpacity := BCloseColorOpacityUp
			BEyeIconColor := CloseIconColorUp
			BEyeIconColorOpacity := BCloseIconColorOpacityUp
		Else
			ButtonEyeActual := ButtonCloseDown
			BEyeColor		:= BCloseColorDown
			BEyeColorOpacity := BCloseColorOpacityDown	
			BEyeIconColor := CloseIconColorDown
			BEyeIconColorOpacity := BCloseIconColorOpacityDown/2	
		End If
		Redraw(BClosePosX- ButtonCloseUp.GetWidth(),BClosePosY,ButtonCloseUp.GetWidth(),ButtonCloseUp.GetHeight())	
	End Function
	
	Protected Function OnDown(x As Long,y As Long,eventtime As Time) As Boolean
		Var i As Long
		LockRedraw()
		If x >= BClosePosX And x <= BClosePosX + ButtonCloseUp.GetWidth() And y >= BClosePosY And y <= BClosePosY + ButtonCloseUp.GetHeight() Then
			ButtonCloseActual := ButtonCloseDown
			ButtonCloseOndown := True
			BCloseIconColor := CloseIconColorDown
			BCloseColor		:= BCloseColorDown
			BCloseColorOpacity := BCloseColorOpacityDown
			BCloseIconColorOpacity := BCloseIconColorOpacityDown
			Redraw(BClosePosX,BClosePosY,ButtonCloseUp.GetWidth(),ButtonCloseUp.GetHeight())
	
		ElseIf IsPasswordmask And x >= BClosePosX - ButtonCloseUp.GetWidth() And x <= BClosePosX And y >= BClosePosY And y <= BClosePosY + ButtonCloseUp.GetHeight() Then

			ButtonEyeOndown := True
			SetButtonEye(ButtonEyeOn)
		Else
			SetButtonEye(ButtonEyeOn)
				
			BCloseIconColor := CloseIconColorUp
			BCloseColor		:= BCloseColorUp
			BCloseColorOpacity := BCloseColorOpacityUp
			BCloseIconColorOpacity := BCloseIconColorOpacityUp
			ButtonCloseOndown := False
			ButtonEyeOndown := False
		End If
	
	
		If y >= DialogTextPosY And y <= DialogWindow.GetHeight() + GetPrimaryDisplay().GetHeight()- (KeyboardBackgroundHeight + DialogWindow.GetHeight()) And x >= 0 And x <= BClosePosX Then
			OldKurzorX1 := KurzorX1
			KurzorShiftPos := True
		Else
			KurzorShiftPos := False
		End If
		
		For i := 1 To MaxButtons
			If x >= MyButton[i].MyPosX And x <= MyButton[i].MyPosX + MyButton[i].ButtonActive.GetWidth() And y >= MyButton[i].MyPosY And y <= MyButton[i].MyPosY + MyButton[i].ButtonActive.GetHeight() Then
				MyOnDownButton(i)
				IndexButtonOnDown := i
				OldIndexButtonOnDown := i
				If  MyButton[IndexButtonOnDown].HaveCell And MyButton[IndexButtonOnDown].ButtonActive = MyButton[IndexButtonOnDown].ButtonDown Then
					ButtCellOpen := False	
					MyButton[IndexButtonOnDown].MyTextColor := MyButton[IndexButtonOnDown].TextActiveColor
					StartTimer(3,:0.5)
				End If		
				If i=IndexBackspace Then
					StartTimer(1,:0.5)
				End If
				Exit For
			End If
		End For
		
		If MyButton[IndexButtonOnDown].HaveCell Then
			MyButtonCell.SetActiveButton(x-MyButton[IndexButtonOnDown].ButtonActive.GetWidth()/2-MyButton[IndexButtonOnDown].MyPosX ,y-MyButton[IndexButtonOnDown].MyPosY)
		End If	
		UnlockRedraw()
		Return Value True
	End Function

	
	Protected Function OnMove(x As Long,y As Long,eventtime As Time,isinside As Boolean)
		Var i As Long
		Var PosBX1 As Long
		Var PosBX2 As Long
		Var PosBY1 As Long
		Var PosBY2 As Long
		LockRedraw()
		If KurzorShiftPos = True Then
			If x >= 0 And x <= DialogTextPosX Then
				LeftDialogText:=True
				LengthScrText()
				KurzorX1 := DialogTextPosX
			ElseIf x >= DialogTextPosX And x <= DialogFont.CalculateTextWidth(DialogText)  Then
				CalculateKursorPosition(x)
			ElseIf x >= DialogFont.CalculateTextWidth(DialogText) And x <= BClosePosX Then
				LeftDialogText:=False
				LengthScrText()
				KurzorX1 := DialogTextPosX + DialogFont.CalculateTextWidth(DialogText)
			End If
			Redraw(DialogTextPosX,DialogTextPosY,DialogTextPosX+DialogTextBoxWidth,DialogFont.CalculateTextHeight("A",100,0))					
		Else
			PosBX1 := MyButton[IndexButtonOnDown].MyPosX
			PosBX2 := MyButton[IndexButtonOnDown].MyPosX + MyButton[IndexButtonOnDown].ButtonActive.GetWidth()
			PosBY1 := MyButton[IndexButtonOnDown].MyPosY
			PosBY2 := MyButton[IndexButtonOnDown].MyPosY + MyButton[IndexButtonOnDown].ButtonActive.GetHeight()
	
			If x <= PosBX1 Or x >= PosBX2 Or y <= PosBY1 Or y >= PosBY2 Then	
				For i := 1 To MaxButtons
					If x >= MyButton[i].MyPosX And x <= MyButton[i].MyPosX + MyButton[i].ButtonActive.GetWidth() And y >= MyButton[i].MyPosY And y <= MyButton[i].MyPosY + MyButton[i].ButtonActive.GetHeight() Then
	
				 		If MyButton[IndexButtonOnDown].HaveCell And x >= MyButtonCell.BackgroundPosX And x <= MyButtonCell.BackgroundPosX + MyButtonCell.MyCellBackground.GetWidth()  And y >= MyButtonCell.BackgroundPosY And y <= MyButtonCell.BackgroundPosY + MyButtonCell.MyCellBackground.GetHeight()+MyButtonCell.MyIndic.GetHeight() Then
							MyButtonCell.SetActiveButton(x-MyButton[IndexButtonOnDown].ButtonActive.GetWidth()/2-MyButton[IndexButtonOnDown].MyPosX ,y-MyButton[IndexButtonOnDown].MyPosY)
				 		Else
				 			MyOnCloseButton(IndexButtonOnDown)
							MyOnDownButton(i)
				 			If i <> OldIndexButtonOnDown Then
								IndexButtonOnDown := i		 				
								If  MyButton[IndexButtonOnDown].HaveCell And MyButton[IndexButtonOnDown].ButtonActive = MyButton[IndexButtonOnDown].ButtonDown Then
									StopTimer(3)
									ButtCellOpen := False	
									MyButton[IndexButtonOnDown].MyTextColor := MyButton[IndexButtonOnDown].TextActiveColor
									StartTimer(3,:0.5)
								End If	
							End If		 		 	
				 		End If
				 		
				 		Exit For
					End If		
				End For
			End If
		End If	
				
		If IndexButtonOnDown <> OldIndexButtonOnDown And Not MyButton[IndexButtonOnDown].HaveCell Then
			ButtCellOpen := False
		End If
			
		If MyButton[IndexButtonOnDown].HaveCell Then
			MyButtonCell.SetActiveButton(x-MyButton[IndexButtonOnDown].ButtonActive.GetWidth()/2-MyButton[IndexButtonOnDown].MyPosX ,y-MyButton[IndexButtonOnDown].MyPosY)
			SetActiveButtonCell(x-MyButton[IndexButtonOnDown].ButtonActive.GetWidth()/2-MyButton[IndexButtonOnDown].MyPosX ,y-MyButton[IndexButtonOnDown].MyPosY)
		End If

		If IndexButtonOnDown <> OldIndexButtonOnDown Then
			OldIndexButtonOnDown := IndexButtonOnDown	
		End If
		
		Redraw(MyButtonCell.BackgroundPosX,MyButtonCell.BackgroundPosY,MyButtonCell.MyCellBackground.GetWidth(),MyButtonCell.MyCellBackground.GetHeight()+MyButtonCell.MyIndic.GetHeight())		
		UnlockRedraw()
	End Function

	Protected Function OnUp(x As Long,y As Long,eventtime As Time,isinside As Boolean)
	Var i As Long
		LockRedraw()
		StopTimer(3)
		If x >= BClosePosX And x <= BClosePosX + ButtonCloseUp.GetWidth() And y >= BClosePosY And y <= BClosePosY + ButtonCloseUp.GetHeight() And ButtonCloseOndown Then		
			ButtonCloseActual := ButtonCloseUp	
			BCloseIconColor := CloseIconColorUp	
			BCloseColor		:= BCloseColorUp
			BCloseColorOpacity := BCloseColorOpacityUp
			BCloseIconColorOpacity := BCloseIconColorOpacityUp
			Redraw(BClosePosX,BClosePosY,ButtonCloseUp.GetWidth(),ButtonCloseUp.GetHeight())
			LastError := EDIT_WAS_CANCELED
			CloseWindow()
			
		ElseIf IsPasswordmask And x >= BClosePosX - ButtonCloseUp.GetWidth() And x <= BClosePosX And y >= BClosePosY And y <= BClosePosY + ButtonCloseUp.GetHeight() And ButtonEyeOndown Then		

			If ButtonEyeOn Then
				ButtonEyeOndown := False	
				ButtonEyeOn := False
			Else
				ButtonEyeOndown := False
				ButtonEyeOn := True
			End If
				SetFirstText(MDT)
				SetButtonEye(ButtonEyeOn)			
		ElseIf IsPasswordmask And ButtonEyeOndown  = True And Not ButtonCloseOndown Then
			ButtonEyeOndown := False
			SetButtonEye(ButtonEyeOn)	
				
		ElseIf ButtonCloseOndown = True Then
			ButtonCloseActual := ButtonCloseUp
			BCloseIconColor := CloseIconColorUp
			BCloseColor		:= BCloseColorUp
			BCloseColorOpacity := BCloseColorOpacityUp
			BCloseIconColorOpacity := BCloseIconColorOpacityUp
			Redraw(BClosePosX,BClosePosY,ButtonCloseUp.GetWidth(),ButtonCloseUp.GetHeight())
		ElseIf KurzorShiftPos = True Then
			If x >= 0 And x <= DialogTextPosX Then
				LeftDialogText:=True
				LengthScrText()
				MumKursorPos := 1
				KurzorX1 := DialogTextPosX
				TextDial := ""					
			ElseIf x >= DialogTextPosX And x <= DialogFont.CalculateTextWidth(DialogText)  Then
				CalculateKursorPosition(x)		
			ElseIf x >= DialogFont.CalculateTextWidth(DialogText) And x <= BClosePosX Then
				LeftDialogText:=False
				LengthScrText()
				MumKursorPos := GetTextActualLength(MyDialogText)+1
				KurzorX1 := DialogTextPosX + DialogFont.CalculateTextWidth(DialogText)
				TextDial := DialogText		
			End If
			Redraw(DialogTextPosX,DialogTextPosY,DialogTextPosX+DialogTextBoxWidth,DialogFont.CalculateTextHeight("A",0,0))
		End If	

		If x >= MyButton[IndexButtonOnDown].MyPosX And x <= MyButton[IndexButtonOnDown].MyPosX + MyButton[IndexButtonOnDown].ButtonActive.GetWidth() And y >= MyButton[IndexButtonOnDown].MyPosY And y <= MyButton[IndexButtonOnDown].MyPosY + MyButton[IndexButtonOnDown].ButtonActive.GetHeight() Then
			MyOnUpButton(True,IndexButtonOnDown)
		ElseIf MyButton[IndexButtonOnDown].HaveCell And ButtCellOpen Then
			MyOnUpButton(False,IndexButtonOnDown)
		Else
			MyOnCloseButton(IndexButtonOnDown)
		End If
		
		If ButtCellOpen Then
			ButtCellOpen := False
			Redraw(MyButtonCell.BackgroundPosX,MyButtonCell.BackgroundPosY,MyButtonCell.MyCellBackground.GetWidth(),MyButtonCell.MyCellBackground.GetHeight()+MyButtonCell.MyIndic.GetHeight())		
		End If
		
		StopTimer(1)
		
		Redraw(KurzorX1,KurzorY1,3,KurzorY2)
		Redraw(OldKurzorX1,KurzorY1,3,KurzorY2)	
		UnlockRedraw()
	End Function	
	
		
	Protected Function SetActiveButtonCell(x As Long, y As Long)
		Var i As Long
		Var ActB As Long

		If MyButtonCell.MyShift Then				// musím řešit při posunu cell background
			x -= MyButtonCell.BackgrPosX
		End If
			
		If MyButtonCell.ButtonsNumber >= 6 Then

			If y < 0 - (MyButtonCell.MyCellBackground.GetHeight()+MyButtonCell.MyIndic.GetHeight())/2 And y >= 0 - (MyButtonCell.MyCellBackground.GetHeight()+MyButtonCell.MyIndic.GetHeight())  Then
				For i := 1 To 5
					If x >= MyButtonCell.MyButton[i].PosXB - MyButtonCell.MyCellBackground.GetWidth()/2 And x <= MyButtonCell.MyButton[i].PosXB - MyButtonCell.MyCellBackground.GetWidth()/2 + KeyboardNextButtonActive.GetWidth() Then
						ActB := i
					End If
				End For
			ElseIf y < 0 And y >= 0 - (MyButtonCell.MyCellBackground.GetHeight()+MyButtonCell.MyIndic.GetHeight()) Then
				For i := 6 To MyButtonCell.ButtonsNumber	
					If x >= MyButtonCell.MyButton[i].PosXB - MyButtonCell.MyCellBackground.GetWidth()/2 And x <= MyButtonCell.MyButton[i].PosXB - MyButtonCell.MyCellBackground.GetWidth()/2 + KeyboardNextButtonActive.GetWidth() Then
						ActB := i	
					End If	
				End For
			End If
		ElseIf  MyButtonCell.ButtonsNumber < 6 Then
			If y < 0 And y >= 0 - (MyButtonCell.MyCellBackground.GetHeight()+MyButtonCell.MyIndic.GetHeight()) Then
				For i := 1 To MyButtonCell.ButtonsNumber
					If x >= MyButtonCell.MyButton[i].PosXB - MyButtonCell.MyCellBackground.GetWidth()/2 And x <= MyButtonCell.MyButton[i].PosXB - MyButtonCell.MyCellBackground.GetWidth()/2 + KeyboardNextButtonActive.GetWidth() Then
						ActB := i
					End If
				End For
			End If
		End If

		For i := 1 To MyButtonCell.ButtonsNumber
			If i = ActB Then
				CellBCol[i] 	:= BColorDown
				CellBColOpacity[i] 	:= ButtonOpacityDown
				CelBTextCol[i]	:= TextColorDown
			Else
				CellBCol[i] := BColorUp
				CellBColOpacity[i] 	:= ButtonOpacityUp
				CelBTextCol[i]	:= TextColorUp
			End If
		End For
	End Function
	
End GraphicClass

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Public GraphicClass BaseNumpad Inherits BaseKeyboard
WithAttributes {hiddeninide}
	Friend KeyboardButton
	Friend KeyboardCell
	
	
	Protected Var		Null								As Boolean := False
	Protected Var		NullOnDownTime						As Time
	Protected Var		PlusOffsePosX						As Long
	Protected Var		PlusOffsePosY						As Long						

	Protected Function OnChar(keyboardchar  As Char, controlkey As Long)
		Var Code As Text[1]

		Select controlkey
		Case &H00000100			// Delete
			Delete()
			Return
		Case &H00000200			//left arrow
			LeftShiftKurzor()
			Return
		Case &H00000400			//right arrow
			RightShiftKurzor()
			Return
		Case &H00000010			//home
			LeftDialogText:=True
			LengthScrText()
			MumKursorPos := 1
			KurzorX1 := DialogTextPosX
			TextDial := ""
			Return
		Case &H00000020			//end
			LeftDialogText:=False
			LengthScrText()
			MumKursorPos := GetTextActualLength(MyDialogText)+1
			KurzorX1 := DialogTextPosX + DialogFont.CalculateTextWidth(DialogText)
			TextDial := DialogText
			Return
		End Select
					
		Select keyboardchar
		Case &H08			// Backspace
			Backspace()
			Return
		Case &H0A, &H0D		// Enter
			Enter()
			Return
		Case &H1B			// Escape
			CloseWindow()
			Return
		Case 0
			Return
		Case '0' To '9'
			SetTextActualLength (Code, 1)
			Code[1] := keyboardchar
			WriteSymbol(Code)
		Case '*','#','.','+',':','-'
			SetTextActualLength (Code, 1)
			Code[1] := keyboardchar
			WriteSymbol(Code)		
		Case Else
			Return
		End Select

	End Function
					
	Protected Function CreateButByGetLanguag()
			IndexEnter		:= 8
			IndexBackspace	:= 4
			MaxButtons						:= 15
			ButtonUp				:= KeyboardButtonUp
			ButtonDown				:= KeyboardButtonDown
			ButtonEnterUp			:= KeyboardButtonEnterUp
			ButtonEnterDown			:= KeyboardButtonEnterDown
			NumFirstLine			:= ButtonNumberFirstLine
			NumSecondLine			:= ButtonNumberSecondLine
			NumThirdLine			:= ButtonNumberThLine
			NumFourLine				:= ButtonNumberFourLine	
			CalculateButtonPosition()
			CreateButtons()
	End Function

	Protected Function CreateButtons()
		CreateTextFirstButtonsLarge()	
		CreateFirstButtons()
	End Function
	
	Protected Function ChooseSmallLargeSymbols()
	End Function
	
	Protected Function CalculateButtonPosition() 
		Var i As Long
		Var BOffPosX 	As Long
		Var BOffsetPosY As Long
		Var BPosX 		As Long
				
		BOffsetPosY := (KeyboardBackgroundHeight - NumberLineButtons * ButtonUp.GetHeight())/(NumberLineButtons+1)
			
		BOffPosX := BOffsetPosY

		BPosYLine1 := DialogWindow.GetHeight() + BOffsetPosY + GetPrimaryDisplay().GetHeight()- (KeyboardBackgroundHeight + DialogWindow.GetHeight())
		BPosYLine2 := BPosYLine1 + BOffsetPosY + ButtonUp.GetHeight() 
		BPosYLine3 := BPosYLine2 + BOffsetPosY + ButtonUp.GetHeight() 
		BPosYLine4 := BPosYLine3 + BOffsetPosY + ButtonUp.GetHeight() 
		
		BPosX := (DialogWindow.GetWidth() - NumFirstLine * (BOffPosX+ButtonUp.GetWidth())+BOffPosX)/2		

		For i:= 1 To NumFirstLine		
			BOffsetPosX[i] := BPosX	
			BPosX += BOffPosX + ButtonUp.GetWidth()
		End For
		
		BPosX := (DialogWindow.GetWidth() - NumFirstLine * (BOffsetPosY+ButtonUp.GetWidth())+BOffsetPosY)/2
		
		For i := NumFirstLine+1 To NumFirstLine + NumSecondLine	
			BOffsetPosX[i] := BPosX
			BPosX += BOffPosX + ButtonUp.GetWidth()
		End For
		
		BPosX := (DialogWindow.GetWidth() - NumFirstLine * (BOffsetPosY+ButtonUp.GetWidth())+BOffsetPosY)/2
			
		For i := NumFirstLine + NumSecondLine + 1 To NumFirstLine + NumSecondLine + NumThirdLine
			BOffsetPosX[i] := BPosX			
			BPosX += BOffPosX + ButtonUp.GetWidth()
		End For	
		
		BPosX := (DialogWindow.GetWidth() - NumFirstLine * (BOffsetPosY+ButtonUp.GetWidth())+BOffsetPosY)/2	

		For i := NumFirstLine + NumSecondLine + NumThirdLine + 1 To NumFirstLine + NumSecondLine + NumThirdLine + NumFourLine
			BOffsetPosX[i] := BPosX			
			BPosX += BOffPosX + ButtonUp.GetWidth()			
		End For	
	End Function
		
	Protected Function CreateTextFirstButtonsLarge()
			 //1
				MyButton[1].CreateText("1",Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //2
				MyButton[2].CreateText("2",Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //3
				MyButton[3].CreateText("3",Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //backsp
				MyButton[4].CreateText(Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //4
				MyButton[5].CreateText("4",Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //5
				MyButton[6].CreateText("5",Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //6
				MyButton[7].CreateText("6",Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //enter
				MyButton[8].CreateText(txtEnter,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //7
				MyButton[9].CreateText("7",Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //8
				MyButton[10].CreateText("8",Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //9
				MyButton[11].CreateText("9",Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			
			 //*
				MyButton[12].CreateText("*","-",Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //0
				MyButton[13].CreateText("0","+",Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)
			 //#
				MyButton[14].CreateText("#",Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)			 
			 //.
				MyButton[15].CreateText(".",":",Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing)			 
	End Function

	Protected Function CreateFirstButtons()	
				MyButton[1].Create(Me,1,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[1],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[2].Create(Me,2,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[2],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[3].Create(Me,3,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[3],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
			 //Backspace
				MyButton[4].Create(Me,4,ButtonUp,ButtonDown,0,KeyboardButtonBackspace,BOffsetPosX[4],BPosYLine1,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
			
				MyButton[5].Create(Me,5,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[5],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[6].Create(Me,6,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[6],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[7].Create(Me,7,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[7],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
			 //Enter
				MyButton[8].Create(Me,8,ButtonEnterUp,ButtonEnterDown,0,Nothing,BOffsetPosX[8],BPosYLine2,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				
				MyButton[9].Create(Me,9,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[9],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[10].Create(Me,10,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[10],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				MyButton[11].Create(Me,11,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[11],BPosYLine3,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)
				
				MyButton[12].Create(Me,12,ButtonUp,ButtonDown,1,Nothing,BOffsetPosX[12],BPosYLine4,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)			
				MyButton[13].Create(Me,13,ButtonUp,ButtonDown,1,Nothing,BOffsetPosX[13],BPosYLine4,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
				MyButton[14].Create(Me,14,ButtonUp,ButtonDown,0,Nothing,BOffsetPosX[14],BPosYLine4,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,False)			
				MyButton[15].Create(Me,15,ButtonUp,ButtonDown,1,Nothing,BOffsetPosX[15],BPosYLine4,KeyBoardFont,ButtonTextColor,ButtonTextColorActive,ButtonTextPosXUp, ButtonTextPosYUp,ButtonTextPosXDown,ButtonTextPosYDown,True)
	End Function
	
	Protected Function OnDraw()
		Var i 				As Long
		Var j				As Long
		Var TextPosX 		As Long
		Var TextPosY 		As Long
		Var PosXButtCell 	As Long
		Var PosYButtCell 	As Long
		Var PosXCellText 	As Long
		Var PosYCellText 	As Long


		DrawRectangle(RectangleColor,0,DialogWindowRectanglePosY,KeyboardBackgroundWidth,KeyboardBackgroundHeight)
		
		If IsPasswordmask Then
			DrawPicture(DialogWindowEye,0,DialogWindowPosY)	
		Else
			DrawPicture(DialogWindow,0,DialogWindowPosY)
		End If
		
		If IsPasswordmask Then	
			DrawPicture(ButtonEyeActual,BClosePosX - ButtonEyeActual.GetWidth(),BClosePosY)
			DrawPicture(ButtonCloseActual,BClosePosX,BClosePosY)
		Else
			DrawPicture(ButtonCloseActual,BClosePosX,BClosePosY)		
		End If

		If GetTextActualLength(DialogText) < 1 Then
			DrawText(DialogFont,MyPromtText,PromtTextColor,DialogTextPosX,DialogTextPosY,DialogTextBoxWidth,-1)			
		Else
			DrawText(DialogFont,DialogText,ButtonDialogTextColor,DialogTextPosX,DialogTextPosY,DialogTextBoxWidth,-1)
		End If
	
		DrawRectangle(KurzorColor, KurzorX1,KurzorY1,KurzorX2,KurzorY2)

		For i := 1 To MaxButtons//KEYBOARDBUTTONS
			TextPosX := ((MyButton[i].ButtonActive.GetWidth()/2) - (MyButton[i].ButtonFont.CalculateTextWidth(MyButton[i].ButtonText)/2)) + MyButton[i].MyPosX + MyButton[i].TextPosX
			TextPosY := ((MyButton[i].ButtonActive.GetHeight()/2) - (MyButton[i].ButtonFont.CalculateTextHeight(MyButton[i].ButtonText,0,0)/2)) + MyButton[i].MyPosY + MyButton[i].TextPosY

			DrawPicture(MyButton[i].ButtonActive,MyButton[i].MyPosX,MyButton[i].MyPosY)
			DrawPicture(MyButton[i].ButtonSymbol,MyButton[i].MyPosX + MyButton[i].ButtonCentreX + MyButton[i].TextPosX,MyButton[i].MyPosY + MyButton[i].ButtonCentreY + MyButton[i].TextPosY,-1,-1)
			DrawText(MyButton[i].ButtonFont,MyButton[i].ButtonText,_COLOR_WHITE,TextPosX + 1 ,TextPosY + 1 ,-1,-1)
			DrawText(MyButton[i].ButtonFont,MyButton[i].ButtonText,MyButton[i].MyTextColor,TextPosX,TextPosY,-1,-1)	
		
				//Spodní index rozšíření tlačítka o další znaky
			If MyButton[i].HaveCell Then
				For j := 1 To MyButton[i].ButtonCellActive			
					DrawText(ShiftFont,MyButton[i].MyCBTexts[j],&hb3ffffff,TextPosX + 1 + MyButton[i].ButtonActive.GetWidth()/3 ,TextPosY + 1 - ShiftFont.GetHeight()/2 ,-1,-1)
					DrawText(ShiftFont,MyButton[i].MyCBTexts[j],SetColorComponentOpacity(MyButton[i].MyTextColor,GetColorComponentOpacity(MyButton[i].MyTextColor)/255 * 179),TextPosX+ MyButton[i].ButtonActive.GetWidth()/3 ,TextPosY - ShiftFont.GetHeight()/2,-1,-1)	
				End For
			End If	
		End For 

		If ButtCellOpen Then
			DrawPicture(MyButtonCell.MyCellBackground,MyButtonCell.BackgroundPosX,MyButtonCell.BackgroundPosY)
			DrawPicture(KeyboardCellIndic,MyButtonCell.IndicPosX,MyButtonCell.IndicPosY)
	
			For i := 1 To MyButtonCell.ButtonsNumber
				PosXButtCell := MyButtonCell.BackgroundPosX+MyButtonCell.MyButton[i].PosXB
				PosYButtCell := MyButtonCell.BackgroundPosY+MyButtonCell.MyButton[i].PosYB
				PosXCellText := PosXButtCell+MyButtonCell.MyButton[i].TextPosX
				PosYCellText := PosYButtCell+MyButtonCell.MyButton[i].TextPosY
			
				DrawPicture(MyButtonCell.MyButton[i].MyButton, PosXButtCell, PosYButtCell)
				DrawText(KeyBoardFont,MyButtonCell.MyButton[i].ButtonText,_COLOR_WHITE,PosXCellText+1,PosYCellText+1,-1,-1)
				DrawText(KeyBoardFont,MyButtonCell.MyButton[i].ButtonText,ButtonTextColor,PosXCellText,PosYCellText,-1,-1)					
			End For	
		End If

	End Function
	
	
End GraphicClass
