// Start of collection ***************************************************************** 
// GenericObjects
// Revised: 15.6.2016
// Author: Malcov√° Radka
// Start of object -----------------------------------------------------------------------
// HiddenNavigator

Public GraphicClass HiddenNavigator Inherits BaseGraphicClass WithAttributes
{
	ObjectCode := "OB0048-003",
	DefaultWidth := 36,
	DefaultHeight := 36
	, DesignName := "Generic", GroupName := "Navigators"
}


Protected Property DefaultButton As Long := 1 WithAttributes
{
	PropertyGroup := "Behavior"
}

Private Var ShowMe As Boolean := True
Private Var SelectedButton As Long := DefaultButton


Private Function Init ()

	StartTimer(1, :.1)

End Function


Protected Function OnTimer(timerid As Long)

	If timerid = 1 Then
		ShowMe := False
	End If
	
	Redraw()

End Function


Protected Function OnDraw()

	If ShowMe Then
		DrawText(fntWebdings36, "\0032", _COLOR_BLACK)
	End If

End Function


Protected Function OnShow ()

	SetSelectedButton (SelectedButton)

End Function


Protected Function OnHide ()

	SendJoinMessage(False, 1, -1)

End Function


Public Function SetSelectedButton (newselectedbutton As Long) As Boolean

	SelectedButton := Max (newselectedbutton, 0)

	If GetVisible() Then
		SendJoinMessage(False, 1, newselectedbutton)
	End If
	
	Redraw ()
	Return Value ((newselectedbutton = SelectedButton) And (newselectedbutton <> 0))
	
End Function


Public Function GetSelectedButton () As Long

	Return Value SelectedButton
	
End Function


End GraphicClass
 
// Start of object -----------------------------------------------------------------------
// Page

Public GraphicClass Page Inherits Namespace "CUE.GraphicCollection.GenericObjectsBase.3".BasePage WithAttributes {ObjectCode := "OB0051-003", DesignName := "Generic", GroupName := "Containers"}
// Public constant declaration
Public Const PICTURE_ALIGNLEFT As Long := _TEXT_ALIGNLEFT
Public Const PICTURE_ALIGNHCENTER As Long := _TEXT_ALIGNHCENTER
Public Const PICTURE_ALIGNRIGHT As Long := _TEXT_ALIGNRIGHT
Public Const PICTURE_ALIGNTOP As Long := _TEXT_ALIGNTOP
Public Const PICTURE_ALIGNVCENTER As Long := _TEXT_ALIGNVCENTER
Public Const PICTURE_ALIGNBOTTOM As Long := _TEXT_ALIGNBOTTOM

Public Const FITTING_NONE As Long := 0
Public Const FITTING_FIT_CONTENT_TO_OBJECT As Long := 2
Public Const FITTING_FIT_CONTENT_PROPORTIONALLY As Long := 4
Public Const FITTING_FILL_OBJECT_PROPORTIONALLY As Long := 5

// Appearance Var Group
Protected Property Color As Long := _COLOR_GREY WithAttributes {PropertyGroup := "Appearance", EditMode := "color"}
Protected Property Picture As AddressOf _Picture := Nothing WithAttributes {PropertyGroup := "Appearance"}
Protected Property PictureAlign As Long := PICTURE_ALIGNHCENTER BitOr PICTURE_ALIGNVCENTER WithAttributes {PropertyGroup := "Appearance", EditMode := "ENUM; 'Left-Top' := PICTURE_ALIGNLEFT BitOr PICTURE_ALIGNTOP, 'Left-Middle' := PICTURE_ALIGNLEFT BitOr PICTURE_ALIGNVCENTER, 'Left-Bottom' := PICTURE_ALIGNLEFT BitOr PICTURE_ALIGNBOTTOM, 'Center-Top' := PICTURE_ALIGNHCENTER BitOr PICTURE_ALIGNTOP, 'Center-Middle' := PICTURE_ALIGNHCENTER BitOr PICTURE_ALIGNVCENTER, 'Center-Bottom' := PICTURE_ALIGNHCENTER BitOr PICTURE_ALIGNBOTTOM, 'Right-Top' := PICTURE_ALIGNRIGHT BitOr PICTURE_ALIGNTOP, 'Right-Middle' := PICTURE_ALIGNRIGHT BitOr PICTURE_ALIGNVCENTER, 'Right-Bottom' := PICTURE_ALIGNRIGHT BitOr PICTURE_ALIGNBOTTOM"}
Protected Property PictureFitting As Long := 0 WithAttributes {PropertyGroup := "Appearance", EditMode := "ENUM; 'None' := 0, 'Fit Content to Object' := 2, 'Fit Content Proportionally' := 4, 'Fill Object Proportionally' := 5"}
Protected Property PictureOffsetX As Long := 0 WithAttributes {PropertyGroup := "Appearance"}
Protected Property PictureOffsetY As Long := 0 WithAttributes {PropertyGroup := "Appearance"}
Protected Property Opacity As Byte := 255 WithAttributes {PropertyGroup := "Appearance", EditMode := "opacity"}

// Behavior Property Group
Protected Property NavigationBarButtonID As Long := 0 WithAttributes {PropertyGroup := "Behavior"}

Protected Function GetProperty()
	MNavigationBarButtonID			:= NavigationBarButtonID

	SetColor(Color)
	SetPicture(Picture)
	SetPictureAlign(PictureAlign)
	SetPictureFitting(PictureFitting)
	SetPictureOffsetX(PictureOffsetX)
	SetPictureOffsetY(PictureOffsetY)
	SetOpacity(Opacity)		
End Function

Private Function Init()
	GetProperty()
	ObjectX := 0
	ObjectY := 0
	ObjectWidth := GetPrimaryDisplay().GetWidth()
	ObjectHeight := GetPrimaryDisplay().GetHeight()
	SetSize(ObjectWidth, ObjectHeight)
	SetDrawParameters()
End Function

Public Function SetColor(newcolor As Long) As Boolean
	MColor := newcolor
	UpdateDrawColors()
	Redraw()
	Return Value True	
End Function

Public Function GetColor() As Long
	Return Value MColor	
End Function

Public Function SetPicture(newpicture As AddressOf _Picture) As Boolean
	MPicture := newpicture
	SetDrawParameters()
	Redraw()
	Return Value True	
End Function

Public Function GetPicture() As AddressOf _Picture
	Return Value MPicture	
End Function

Public Function SetPictureAlign(newpicturealign As Long) As Boolean
	Select newpicturealign
		Case PICTURE_ALIGNLEFT BitOr PICTURE_ALIGNTOP, PICTURE_ALIGNLEFT BitOr PICTURE_ALIGNVCENTER, PICTURE_ALIGNLEFT BitOr PICTURE_ALIGNBOTTOM, PICTURE_ALIGNHCENTER BitOr PICTURE_ALIGNTOP, PICTURE_ALIGNHCENTER BitOr PICTURE_ALIGNVCENTER, PICTURE_ALIGNHCENTER BitOr PICTURE_ALIGNBOTTOM, PICTURE_ALIGNRIGHT BitOr PICTURE_ALIGNTOP, PICTURE_ALIGNRIGHT BitOr PICTURE_ALIGNVCENTER, PICTURE_ALIGNRIGHT BitOr PICTURE_ALIGNBOTTOM
			MPictureAlign := newpicturealign
			SetDrawParameters()
			Return Value True

		Case Else
			Return Value False
	End Select
End Function

Public Function GetPictureAlign() As Long
	Return Value MPictureAlign
End Function

Public Function SetPictureFitting(newpicturefitting As Long) As Boolean
	Select newpicturefitting
		Case FITTING_NONE, FITTING_FIT_CONTENT_TO_OBJECT, FITTING_FIT_CONTENT_PROPORTIONALLY, FITTING_FILL_OBJECT_PROPORTIONALLY
			MPictureFitting := newpicturefitting
			SetDrawParameters()
			Redraw()
			Return Value True

		Case Else
			Return Value False

	End Select	
End Function

Public Function GetPictureFitting() As Long
	Return Value MPictureFitting	
End Function

Public Function SetPictureOffsetX(newpictureoffsetx As Long) As Boolean	
	MPictureOffsetX := newpictureoffsetx 
	SetDrawParameters()
	Redraw()
	Return Value True	
End Function

Public Function GetPictureOffsetX() As Long
	Return Value MPictureOffsetX	
End Function

Public Function SetPictureOffsetY(newpictureoffsety As Long) As Boolean	
	MPictureOffsetY := newpictureoffsety 
	SetDrawParameters()
	Redraw()
	Return Value True	
End Function

Public Function GetPictureOffsetY() As Long
	Return Value MPictureOffsetY	
End Function

Public Function SetOpacity(newopacity As Byte) As Boolean
	MOpacity := newopacity
	UpdateDrawColors()
	Redraw()
	Return Value True	
End Function

Public Function GetOpacity() As Byte
	Return Value MOpacity	
End Function

End GraphicClass

// Page
// End of object -------------------------------------------------------------------------


// Start of object -----------------------------------------------------------------------
// FloatingWindow

Public GraphicClass FloatingWindow Inherits Namespace "CUE.GraphicCollection.GenericObjectsBase.3".BaseFloatingWindow WithAttributes {ObjectCode := "OB0065-003", DesignName := "Generic", GroupName := "Containers"}
// Public constant declaration
Public Const PICTURE_ALIGNLEFT As Long := _TEXT_ALIGNLEFT
Public Const PICTURE_ALIGNHCENTER As Long := _TEXT_ALIGNHCENTER
Public Const PICTURE_ALIGNRIGHT As Long := _TEXT_ALIGNRIGHT
Public Const PICTURE_ALIGNTOP As Long := _TEXT_ALIGNTOP
Public Const PICTURE_ALIGNVCENTER As Long := _TEXT_ALIGNVCENTER
Public Const PICTURE_ALIGNBOTTOM As Long := _TEXT_ALIGNBOTTOM

Public Const FITTING_NONE As Long := 0
Public Const FITTING_FIT_CONTENT_TO_OBJECT As Long := 2
Public Const FITTING_FIT_CONTENT_PROPORTIONALLY As Long := 4
Public Const FITTING_FILL_OBJECT_PROPORTIONALLY As Long := 5

// Appearance Var Group
Protected Property Color As Long := _COLOR_GREY WithAttributes {PropertyGroup := "Appearance", EditMode := "color"}
Protected Property Picture As AddressOf _Picture := Nothing WithAttributes {PropertyGroup := "Appearance"}
Protected Property PictureAlign As Long := PICTURE_ALIGNHCENTER BitOr PICTURE_ALIGNVCENTER WithAttributes {PropertyGroup := "Appearance", EditMode := "ENUM; 'Left-Top' := PICTURE_ALIGNLEFT BitOr PICTURE_ALIGNTOP, 'Left-Middle' := PICTURE_ALIGNLEFT BitOr PICTURE_ALIGNVCENTER, 'Left-Bottom' := PICTURE_ALIGNLEFT BitOr PICTURE_ALIGNBOTTOM, 'Center-Top' := PICTURE_ALIGNHCENTER BitOr PICTURE_ALIGNTOP, 'Center-Middle' := PICTURE_ALIGNHCENTER BitOr PICTURE_ALIGNVCENTER, 'Center-Bottom' := PICTURE_ALIGNHCENTER BitOr PICTURE_ALIGNBOTTOM, 'Right-Top' := PICTURE_ALIGNRIGHT BitOr PICTURE_ALIGNTOP, 'Right-Middle' := PICTURE_ALIGNRIGHT BitOr PICTURE_ALIGNVCENTER, 'Right-Bottom' := PICTURE_ALIGNRIGHT BitOr PICTURE_ALIGNBOTTOM"}
Protected Property PictureFitting As Long := 0 WithAttributes {PropertyGroup := "Appearance", EditMode := "ENUM; 'None' := 0, 'Fit Content to Object' := 2, 'Fit Content Proportionally' := 4, 'Fill Object Proportionally' := 5"}
Protected Property PictureOffsetX As Long := 0 WithAttributes {PropertyGroup := "Appearance"}
Protected Property PictureOffsetY As Long := 0 WithAttributes {PropertyGroup := "Appearance"}
Protected Property Opacity As Byte := 255 WithAttributes {PropertyGroup := "Appearance", EditMode := "opacity"}

// Behavior Property Group
Protected Property OpenMode As Long := _OW_TOPMOST WithAttributes {PropertyGroup := "Behavior", EditMode := "Enum; 'Modal' := _OW_MODAL, 'Modeless' := 0, 'Topmost' := _OW_TOPMOST"}
Protected Property NavigationBarButtonID As Long := 0 WithAttributes {PropertyGroup := "Behavior"}

Protected Function GetProperty()
	MOpenMode		:= OpenMode
	MNavigationBarButtonID := NavigationBarButtonID
	SetColor(Color)
	SetPicture(Picture)
	SetPictureAlign(PictureAlign)
	SetPictureFitting(PictureFitting)
	SetPictureOffsetX(PictureOffsetX)
	SetPictureOffsetY(PictureOffsetY)
	SetOpacity(Opacity)
End Function

Private Function Init()
	GetProperty()
	GetPosition(ObjectX, ObjectY)
	GetSize(ObjectWidth, ObjectHeight)
	SetDrawParameters()
	OpenFlags := OpenMode
End Function

Public Function SetObjectDimensions(newwidth As Long, newheight  As Long) As Boolean
	SetSize(newwidth, newheight)
	Return Value True
End Function

Public Function GetObjectDimensions(ByRef currentwidth As Long, ByRef currentheight As Long)
	GetSize (currentwidth, currentheight)
End Function

Public Function SetObjectPosition(newx As Long, newy As Long) As Boolean
	ObjectX := newx
	ObjectY := newy
	SetPosition(ObjectX, ObjectY)
	Return Value True	
End Function

Public Function GetObjectPosition(ByRef currentx As Long, ByRef currenty As Long)
	GetPosition(currentx, currenty)	
End Function

Public Function SetOpenMode(newopenmode As Long) As Boolean	
	If (newopenmode BitAnd (&HFFFFFFFF BitXor (_OW_ALIGNBOTTOM BitOr _OW_ALIGNVCENTER BitOr _OW_ALIGNTOP BitOr _OW_ALIGNLEFT BitOr _OW_ALIGNHCENTER BitOr _OW_ALIGNRIGHT BitOr _OW_BOTTOM BitOr _OW_CLOSESTANDARD BitOr _OW_CLOSETOPMOST BitOr _OW_MODAL BitOr _OW_TOPMOST))) > 0 Then
		Return Value False
	Else
		MOpenMode := newopenmode
		OpenFlags := MOpenMode
		Return Value True
	End If	
End Function

Public Function GetOpenMode() As Long
	Return Value MOpenMode	
End Function

Public Function SetColor(newcolor As Long) As Boolean
	MColor := newcolor
	UpdateDrawColors()
	Redraw()
	Return Value True	
End Function

Public Function GetColor() As Long
	Return Value MColor	
End Function

Public Function SetPicture(newpicture As AddressOf _Picture) As Boolean
	MPicture := newpicture
	SetDrawParameters()
	Redraw()
	Return Value True	
End Function

Public Function GetPicture() As AddressOf _Picture
	Return Value MPicture	
End Function

Public Function SetPictureAlign(newpicturealign As Long) As Boolean
	Select newpicturealign
		Case PICTURE_ALIGNLEFT BitOr PICTURE_ALIGNTOP, PICTURE_ALIGNLEFT BitOr PICTURE_ALIGNVCENTER, PICTURE_ALIGNLEFT BitOr PICTURE_ALIGNBOTTOM, PICTURE_ALIGNHCENTER BitOr PICTURE_ALIGNTOP, PICTURE_ALIGNHCENTER BitOr PICTURE_ALIGNVCENTER, PICTURE_ALIGNHCENTER BitOr PICTURE_ALIGNBOTTOM, PICTURE_ALIGNRIGHT BitOr PICTURE_ALIGNTOP, PICTURE_ALIGNRIGHT BitOr PICTURE_ALIGNVCENTER, PICTURE_ALIGNRIGHT BitOr PICTURE_ALIGNBOTTOM
			MPictureAlign := newpicturealign
			SetDrawParameters()
			Return Value True

		Case Else
			Return Value False
	End Select
End Function

Public Function GetPictureAlign() As Long
	Return Value MPictureAlign
End Function

Public Function SetPictureFitting(newpicturefitting As Long) As Boolean
	Select newpicturefitting
		Case FITTING_NONE, FITTING_FIT_CONTENT_TO_OBJECT, FITTING_FIT_CONTENT_PROPORTIONALLY, FITTING_FILL_OBJECT_PROPORTIONALLY
			MPictureFitting := newpicturefitting
			SetDrawParameters()
			Redraw()
			Return Value True

		Case Else
			Return Value False

	End Select	
End Function

Public Function GetPictureFitting() As Long
	Return Value MPictureFitting	
End Function

Public Function SetPictureOffsetX(newpictureoffsetx As Long) As Boolean	
	MPictureOffsetX := newpictureoffsetx 
	SetDrawParameters()
	Redraw()
	Return Value True	
End Function

Public Function GetPictureOffsetX() As Long
	Return Value MPictureOffsetX	
End Function

Public Function SetPictureOffsetY(newpictureoffsety As Long) As Boolean	
	MPictureOffsetY := newpictureoffsety 
	SetDrawParameters()
	Redraw()
	Return Value True	
End Function

Public Function GetPictureOffsetY() As Long
	Return Value MPictureOffsetY	
End Function

Public Function SetOpacity(newopacity As Byte) As Boolean
	MOpacity := newopacity
	UpdateDrawColors()
	Redraw()
	Return Value True	
End Function

Public Function GetOpacity() As Byte
	Return Value MOpacity	
End Function

End GraphicClass

// FloatingWindow
// End of object -------------------------------------------------------------------------


// Windows
// End of group ******************************************************************* 



// Start of group ***************************************************************** 
// Buttons
// Revised: 12.4.2012
// Author: Miroslav Pechl√°t


// Start of object -----------------------------------------------------------------------
// PushButton

Global GraphicClass PushButton Inherits Namespace "CUE.GraphicCollection.GenericObjectsBase.3".BasePushButton WithAttributes {DefaultWidth := 120, DefaultHeight := 60 ,ObjectCode := "OB0052-003", DesignName := "Generic", GroupName := "Buttons"}
Global Const ICON_ALIGNLEFT As Long := &H00000003	// Horizontal align left
Global Const ICON_ALIGNHCENTER As Long := &H00000002	// Horizontal align center
Global Const ICON_ALIGNRIGHT As Long :=	&H00000004	// Horizontal align right
Global Const ICON_ALIGNTOP As Long := &H00000008	// Vertical align top
Global Const ICON_ALIGNVCENTER As Long := &H00000010	// Vertical align center
Global Const ICON_ALIGNBOTTOM As Long := &H00000020	// Vertical align bottom

Global Const BUTTON_COLOR As Long := &HFFC0C0C0	// 3D Button face color
Global Const BUTTON_HIGHLIGHT_COLOR As Long := &HFFFFFFFF	// 3D Button highlight color
Global Const BUTTON_SHADOW_COLOR As Long :=	_COLOR_GREY	// 3D Button shadow color

// Appearance Property Group
Protected Property AspectRatioMaximum As Double := 10.000 WithAttributes {PropertyGroup := "Appearance"}
Protected Property AspectRatioMinimum As Double := 1.000 WithAttributes {PropertyGroup := "Appearance"}
Protected Property BevelWidth As Long := 4 WithAttributes {PropertyGroup := "Appearance"}
Protected Property ConstrainProportion As Boolean := False WithAttributes {PropertyGroup := "Appearance"}
Protected Property Opacity As Byte := 255 WithAttributes {PropertyGroup := "Appearance", EditMode := "opacity"}
Protected Property SmartScaling As Boolean := False WithAttributes {PropertyGroup := "Appearance"}

// Behavior Property Group
Protected Property Enabled As Boolean := True WithAttributes {PropertyGroup := "Behavior", EditMode := "Boolean; 'Yes' := True, 'No' := False"}
Protected Property IgnoreTransparentArea As Boolean := False WithAttributes {PropertyGroup := "Behavior", EditMode := "Boolean; 'Yes' := True, 'No' := False"}

// Up Property Group
Protected Property UpColor As Long := BUTTON_COLOR WithAttributes {PropertyGroup := "Up", EditMode := "color"}
Protected Property UpFont As AddressOf _Font := fntDefault16 WithAttributes {PropertyGroup := "Up", EditMode := "font"}
Protected Property UpFontColor As Long := _COLOR_BLACK WithAttributes {PropertyGroup := "Up", EditMode := "color"}
Protected Property UpHighlightColor As Long := BUTTON_HIGHLIGHT_COLOR WithAttributes {PropertyGroup := "Up", EditMode := "color"}
Protected Property UpIcon As AddressOf _Picture := Nothing WithAttributes {PropertyGroup := "Up"}
Protected Property UpIconAlign As Long := ICON_ALIGNHCENTER BitOr ICON_ALIGNVCENTER WithAttributes {PropertyGroup := "Up", EditMode := "ENUM; 'Left-Top' := &H09, 'Left-Middle' := &H11, 'Left-Bottom' := &H21, 'Center-Top' := &H0A, 'Center-Middle' := &H12, 'Center-Bottom' := &H22, 'Right-Top' := &H0C, 'Right-Middle' := &H14, 'Right-Bottom' := &H24"}
Protected Property UpIconOffsetX As Long := 0 WithAttributes {PropertyGroup := "Up"}
Protected Property UpIconOffsetY As Long := 0 WithAttributes {PropertyGroup := "Up"}
Protected Property UpLineSpacing As Double := 1.2 WithAttributes {PropertyGroup := "Up"}
Protected Property UpPicture As AddressOf _Picture := Nothing WithAttributes {PropertyGroup := "Up"}
Protected Property UpShadowColor As Long := BUTTON_SHADOW_COLOR WithAttributes {PropertyGroup := "Up", EditMode := "color"}
Protected Property UpText As AddressOf Text := txtCaption WithAttributes {PropertyGroup := "Up"}
Protected Property UpTextAlign As Long := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNVCENTER WithAttributes {PropertyGroup := "Up", EditMode := "ENUM; 'Left-Top' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNTOP, 'Left-Middle' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNVCENTER, 'Left-Bottom' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNBOTTOM, 'Center-Top' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNTOP, 'Center-Middle' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNVCENTER, 'Center-Bottom' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNBOTTOM, 'Right-Top' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNTOP, 'Right-Middle' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNVCENTER, 'Right-Bottom' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNBOTTOM"}
Protected Property UpTextOffsetX As Long := 0 WithAttributes {PropertyGroup := "Up"}
Protected Property UpTextOffsetY As Long := 0 WithAttributes {PropertyGroup := "Up"}

// Down Property Group
Protected Property DownColor As Long := UpColor WithAttributes {PropertyGroup := "Down", EditMode := "color"}
Protected Property DownFont As AddressOf _Font := UpFont WithAttributes {PropertyGroup := "Down", EditMode := "font"}
Protected Property DownFontColor As Long := UpFontColor WithAttributes {PropertyGroup := "Down", EditMode := "color"}
Protected Property DownHighlightColor As Long := UpHighlightColor WithAttributes {PropertyGroup := "Down", EditMode := "color"}
Protected Property DownIcon As AddressOf _Picture := UpIcon WithAttributes {PropertyGroup := "Down"}
Protected Property DownIconAlign As Long := UpIconAlign WithAttributes {PropertyGroup := "Down", EditMode := "ENUM; 'Left-Top' := &H09, 'Left-Middle' := &H11, 'Left-Bottom' := &H21, 'Center-Top' := &H0A, 'Center-Middle' := &H12, 'Center-Bottom' := &H22, 'Right-Top' := &H0C, 'Right-Middle' := &H14, 'Right-Bottom' := &H24"}
Protected Property DownIconOffsetX As Long := UpIconOffsetX WithAttributes {PropertyGroup := "Down"}
Protected Property DownIconOffsetY As Long := UpIconOffsetY WithAttributes {PropertyGroup := "Down"}
Protected Property DownLineSpacing As Double := UpLineSpacing WithAttributes {PropertyGroup := "Down"}
Protected Property DownPicture As AddressOf _Picture := UpPicture WithAttributes {PropertyGroup := "Down"}
Protected Property DownShadowColor As Long := UpShadowColor WithAttributes {PropertyGroup := "Down", EditMode := "color"}
Protected Property DownText As AddressOf Text := UpText WithAttributes {PropertyGroup := "Down"}
Protected Property DownTextAlign As Long := UpTextAlign WithAttributes {PropertyGroup := "Down", EditMode := "ENUM; 'Left-Top' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNTOP, 'Left-Middle' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNVCENTER, 'Left-Bottom' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNBOTTOM, 'Center-Top' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNTOP, 'Center-Middle' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNVCENTER, 'Center-Bottom' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNBOTTOM, 'Right-Top' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNTOP, 'Right-Middle' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNVCENTER, 'Right-Bottom' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNBOTTOM"}
Protected Property DownTextOffsetX As Long := UpTextOffsetX WithAttributes {PropertyGroup := "Down"}
Protected Property DownTextOffsetY As Long := UpTextOffsetY WithAttributes {PropertyGroup := "Down"}

Protected Function GetProperty()
	MAspectRatioMaximum		:= AspectRatioMaximum
	MAspectRatioMinimum		:= AspectRatioMinimum
	MBevelWidth				:= BevelWidth
	MConstrainProportion	:= ConstrainProportion
	MOpacity				:= Opacity
	MSmartScaling			:= SmartScaling
	MEnabled				:= Enabled
	MIgnoreTransparentArea	:= IgnoreTransparentArea
	MUpColor				:= UpColor
	MUpFont					:= UpFont
	MUpFontColor			:= UpFontColor
	MUpHighlightColor		:= UpHighlightColor
	MUpIcon					:= UpIcon
	MUpIconAlign			:= UpIconAlign
	MUpIconOffsetX			:= UpIconOffsetX
	MUpIconOffsetY			:= UpIconOffsetY
	MUpLineSpacing			:= UpLineSpacing
	MUpPicture				:= UpPicture
	MUpShadowColor			:= UpShadowColor
	MUpText					:= UpText
	MUpTextAlign			:= UpTextAlign
	MUpTextOffsetX			:= UpTextOffsetX
	MUpTextOffsetY			:= UpTextOffsetY
	MDownColor				:= DownColor
	MDownFont				:= DownFont
	MDownFontColor			:= DownFontColor
	MDownHighlightColor		:= DownHighlightColor
	MDownIcon				:= DownIcon
	MDownIconAlign			:= DownIconAlign
	MDownIconOffsetX		:= DownIconOffsetX
	MDownIconOffsetY		:= DownIconOffsetY
	MDownLineSpacing		:= DownLineSpacing
	MDownPicture			:= DownPicture
	MDownShadowColor		:= DownShadowColor
	MDownText				:= DownText
	MDownTextAlign			:= DownTextAlign
	MDownTextOffsetX		:= DownTextOffsetX
	MDownTextOffsetY		:= DownTextOffsetY
End Function

Private Function Init()

	GetProperty()
	UpFormatFlags := MUpTextAlign BitOr _TEXT_WORDWRAP
	DownFormatFlags := MDownTextAlign BitOr _TEXT_WORDWRAP
	UpdateDimensions()
	UpdateDrawColors()
	DownOffset := BevelWidthDraw / 2
	RedrawCompoundObject()

End Function


Public Function SetAspectRatioMaximum(newaspectratiomaximum As Double) As Boolean

	If newaspectratiomaximum >= MAspectRatioMinimum Then
		MAspectRatioMaximum := newaspectratiomaximum
		UpdateDimensions()
		RedrawCompoundObject()
		Return Value True
	Else
		Return Value False
	End If
	
End Function


Public Function GetAspectRatioMaximum() As Double

	Return Value MAspectRatioMaximum
	
End Function


Public Function SetAspectRatioMinimum(newaspectratiominimum As Double) As Boolean

	If newaspectratiominimum <= MAspectRatioMaximum Then
		MAspectRatioMinimum := newaspectratiominimum
		UpdateDimensions()
		RedrawCompoundObject()
		Return Value True
	Else
		Return Value False
	End If
	
End Function


Public Function GetAspectRatioMinimum() As Double

	Return Value MAspectRatioMinimum
	
End Function


Public Function SetBevelWidth(newbevelwidth As Long) As Boolean

	If newbevelwidth <= Min(ObjectWidth / 2, ObjectHeight / 2) Then
		MBevelWidth := newbevelwidth
		BevelWidthDraw := MBevelWidth
		RedrawCompoundObject()
		Return Value True
	Else
		Return Value False
	End If

End Function


Public Function GetBevelWidth() As Long

	Return Value MBevelWidth

End Function


Public Function SetConstrainProportion(newconstrainproportion As Boolean) As Boolean

	MConstrainProportion := newconstrainproportion
	UpdateDimensions()
	RedrawCompoundObject()
	Return Value True

End Function


Public Function GetConstrainProportion() As Boolean

	Return Value MConstrainProportion

End Function


Public Function SetSmartScaling(newsmartscaling As Boolean) As Boolean

	MSmartScaling := newsmartscaling
	UpdateDimensions()
	RedrawCompoundObject()
	Return Value True

End Function


Public Function GetSmartScaling() As Boolean

	Return Value MSmartScaling

End Function


Public Function SetDownColor(newdowncolor As Long) As Boolean

	MDownColor := newdowncolor
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownColor() As Long

	Return Value MDownColor
	
End Function


Public Function SetDownFont(newdownfont As AddressOf _Font) As Boolean

	MDownFont := newdownfont
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownFont() As AddressOf _Font

	Return Value MDownFont
	
End Function


Public Function SetDownFontColor(newdownfontcolor As Long) As Boolean

	MDownFontColor := newdownfontcolor
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownFontColor() As Long

	Return Value MDownFontColor
	
End Function


Public Function SetDownHighlightColor(newdownhighlightcolor As Long) As Boolean

	MDownHighlightColor := newdownhighlightcolor
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownHighlightColor() As Long

	Return Value MDownHighlightColor
	
End Function


Public Function SetDownIcon(newdownicon As AddressOf _Picture) As Boolean

	MDownIcon := newdownicon
	UpdateIconPosition()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownIcon() As AddressOf _Picture

	Return Value MDownIcon
	
End Function


Public Function SetDownIconAlign(newdowniconalign As Long) As Boolean

	Select newdowniconalign
		Case ICON_ALIGNLEFT BitOr ICON_ALIGNTOP, ICON_ALIGNLEFT BitOr ICON_ALIGNVCENTER, ICON_ALIGNLEFT BitOr ICON_ALIGNBOTTOM, ICON_ALIGNHCENTER BitOr ICON_ALIGNTOP, ICON_ALIGNHCENTER BitOr ICON_ALIGNVCENTER, ICON_ALIGNHCENTER BitOr ICON_ALIGNBOTTOM, ICON_ALIGNRIGHT BitOr ICON_ALIGNTOP, ICON_ALIGNRIGHT BitOr ICON_ALIGNVCENTER, ICON_ALIGNRIGHT BitOr ICON_ALIGNBOTTOM
			MDownIconAlign := newdowniconalign
			UpdateIconPosition()
			RedrawCompoundObject()
			Return Value True

		Case Else
			Return Value False

	End Select

End Function


Public Function GetDownIconAlign() As Long

	Return Value MDownIconAlign

End Function


Public Function SetDownIconOffsetX(newdowniconoffsetx As Long) As Boolean
	
	MDownIconOffsetX := newdowniconoffsetx
	UpdateIconPosition() 
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownIconOffsetX() As Long

	Return Value MDownIconOffsetX
	
End Function


Public Function SetDownIconOffsetY(newdowniconoffsety As Long) As Boolean
	
	MDownIconOffsetY := newdowniconoffsety 
	UpdateIconPosition()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownIconOffsetY() As Long

	Return Value MDownIconOffsetY
	
End Function


Public Function SetDownLineSpacing(newdownlinespacing As Double) As Boolean
	
	If newdownlinespacing >= 0 Then
		MDownLineSpacing := newdownlinespacing
		RedrawCompoundObject()
		Return Value True
	Else
		Return Value False
	End If

End Function


Public Function GetDownLineSpacing() As Double

	Return Value MDownLineSpacing
	
End Function


Public Function SetDownPicture(newdownpicture As AddressOf _Picture) As Boolean

	MDownPicture := newdownpicture
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownPicture() As AddressOf _Picture

	Return Value MDownPicture
	
End Function


Public Function SetDownShadowColor(newdownshadowcolor As Long) As Boolean

	MDownShadowColor := newdownshadowcolor
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownShadowColor() As Long

	Return Value MDownShadowColor 
	
End Function


Public Function SetDownText(newdowntext As Text) As Boolean

	If GetMemorySegment(newdowntext) = _MSEG_RESOURCEDATA Then
		MDownText := newdowntext
	Else
		TextBuffer := newdowntext
		MDownText := TextBuffer
	End If

	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownText() As AddressOf Text

	Return Value MDownText
	
End Function


Public Function SetDownTextAlign(newdowntextalign As Long) As Boolean

	Select newdowntextalign
		Case _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNTOP, _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNVCENTER, _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNBOTTOM, _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNTOP, _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNVCENTER, _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNBOTTOM, _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNTOP, _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNVCENTER, _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNBOTTOM
			MDownTextAlign := newdowntextalign
			DownFormatFlags := MDownTextAlign BitOr _TEXT_WORDWRAP
			RedrawCompoundObject()
			Return Value True

		Case Else
			Return Value False

	End Select

End Function


Public Function GetDownTextAlign() As Long

	Return Value MDownTextAlign

End Function


Public Function SetDownTextOffsetX(newdowntextoffsetx As Long) As Boolean
	
	MDownTextOffsetX := newdowntextoffsetx 
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownTextOffsetX() As Long

	Return Value MDownTextOffsetX
	
End Function


Public Function SetDownTextOffsetY(newdowntextoffsety As Long) As Boolean
	
	MDownTextOffsetY := newdowntextoffsety 
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownTextOffsetY() As Long

	Return Value MDownTextOffsetY
	
End Function


Public Function SetUpColor(newupcolor As Long) As Boolean

	MUpColor := newupcolor
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpColor() As Long

	Return Value MUpColor
	
End Function


Public Function SetUpFont(newupfont As AddressOf _Font) As Boolean

	MUpFont := newupfont
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpFont() As AddressOf _Font

	Return Value MUpFont
	
End Function


Public Function SetUpFontColor(newupfontcolor As Long) As Boolean

	MUpFontColor := newupfontcolor
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpFontColor() As Long

	Return Value MUpFontColor
	
End Function


Public Function SetUpHighlightColor(newuphighlightcolor As Long) As Boolean

	MUpHighlightColor := newuphighlightcolor
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpHighlightColor() As Long

	Return Value MUpHighlightColor
	
End Function


Public Function SetUpIcon(newupicon As AddressOf _Picture) As Boolean

	MUpIcon := newupicon
	UpdateIconPosition()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpIcon() As AddressOf _Picture

	Return Value MUpIcon
	
End Function


Public Function SetUpIconAlign(newupiconalign As Long) As Boolean

	Select newupiconalign
		Case ICON_ALIGNLEFT BitOr ICON_ALIGNTOP, ICON_ALIGNLEFT BitOr ICON_ALIGNVCENTER, ICON_ALIGNLEFT BitOr ICON_ALIGNBOTTOM, ICON_ALIGNHCENTER BitOr ICON_ALIGNTOP, ICON_ALIGNHCENTER BitOr ICON_ALIGNVCENTER, ICON_ALIGNHCENTER BitOr ICON_ALIGNBOTTOM, ICON_ALIGNRIGHT BitOr ICON_ALIGNTOP, ICON_ALIGNRIGHT BitOr ICON_ALIGNVCENTER, ICON_ALIGNRIGHT BitOr ICON_ALIGNBOTTOM
			MUpIconAlign := newupiconalign
			UpdateIconPosition()
			RedrawCompoundObject()
			Return Value True

		Case Else
			Return Value False

	End Select

End Function


Public Function GetUpIconAlign() As Long

	Return Value MUpIconAlign

End Function


Public Function SetUpIconOffsetX(newupiconoffsetx As Long) As Boolean
	
	MUpIconOffsetX := newupiconoffsetx 
	UpdateIconPosition()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpIconOffsetX() As Long

	Return Value MUpIconOffsetX
	
End Function


Public Function SetUpIconOffsetY(newupiconoffsety As Long) As Boolean
	
	MUpIconOffsetY := newupiconoffsety 
	UpdateIconPosition()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpIconOffsetY() As Long

	Return Value MUpIconOffsetY
	
End Function


Public Function SetUpLineSpacing(newuplinespacing As Double) As Boolean
	
	If newuplinespacing >= 0 Then
		MUpLineSpacing := newuplinespacing
		RedrawCompoundObject()
		Return Value True
	Else
		Return Value False
	End If

End Function


Public Function GetUpLineSpacing() As Double

	Return Value MUpLineSpacing
	
End Function


Public Function SetUpPicture(newuppicture As AddressOf _Picture) As Boolean

	MUpPicture := newuppicture
	UpdateDimensions()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpPicture() As AddressOf _Picture

	Return Value MUpPicture
	
End Function


Public Function SetUpShadowColor(newupshadowcolor As Long) As Boolean

	MUpShadowColor := newupshadowcolor
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpShadowColor() As Long

	Return Value MUpShadowColor
	
End Function


Public Function SetUpText(newuptext As Text) As Boolean

	If GetMemorySegment(newuptext) = _MSEG_RESOURCEDATA Then
		MUpText := newuptext
	Else
		TextBuffer := newuptext
		MUpText := TextBuffer
	End If

	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpText() As AddressOf Text

	Return Value MUpText
	
End Function


Public Function SetUpTextAlign(newuptextalign As Long) As Boolean

	Select newuptextalign
		Case _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNTOP, _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNVCENTER, _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNBOTTOM, _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNTOP, _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNVCENTER, _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNBOTTOM, _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNTOP, _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNVCENTER, _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNBOTTOM
			MUpTextAlign := newuptextalign
			UpFormatFlags := MUpTextAlign BitOr _TEXT_WORDWRAP
			RedrawCompoundObject()
			Return Value True

		Case Else
			Return Value False
	End Select

End Function


Public Function GetUpTextAlign() As Long

	Return Value MUpTextAlign

End Function


Public Function SetUpTextOffsetX(newuptextoffsetx As Long) As Boolean
	
	MUpTextOffsetX := newuptextoffsetx 
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpTextOffsetX() As Long

	Return Value MUpTextOffsetX
	
End Function


Public Function SetUpTextOffsetY(newuptextoffsety As Long) As Boolean
	
	MUpTextOffsetY := newuptextoffsety 
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpTextOffsetY() As Long

	Return Value MUpTextOffsetY
	
End Function


//Public Function SetEnabled(newenabled As Boolean) As Boolean
//
//	MEnabled := newenabled
//	UpdateDrawColors()
//	RedrawCompoundObject()
//	Return Value True
//
//End Function
//
//
//Public Function GetEnabled() As Boolean
//
//	Return Value MEnabled
//
//End Function


Public Function SetIgnoreTransparentArea(newignoretransparentarea As Boolean) As Boolean

	MIgnoreTransparentArea := newignoretransparentarea
	Return Value True

End Function


Public Function GetIgnoreTransparentArea() As Boolean

	Return Value MIgnoreTransparentArea

End Function


Public Function SetObjectDimensions(newwidth As Long, newheight As Long) As Boolean

	SetSize(newwidth, newheight)
	UpdateDimensions()
	RedrawCompoundObject()
	Return Value True

End Function


Public Function GetObjectDimensions(ByRef currentwidth As Long, ByRef currentheight As Long)

	GetSize(currentwidth, currentheight)

End Function


Public Function SetObjectPosition(newx As Long, newy As Long) As Boolean
Private Var Response As Boolean

	Response := SetPosition(newx, newy)
	RedrawCompoundObject()
	Return Value Response

End Function


Public Function GetObjectPosition(ByRef currentx As Long, ByRef currenty As Long)

	GetPosition(currentx, currenty)

End Function


Public Function SetOpacity(newopacity As Byte) As Boolean

	MOpacity := newopacity
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetOpacity() As Byte

	Return Value MOpacity
	
End Function


End GraphicClass

// PushButton
// End of object -------------------------------------------------------------------------



// Start of object -----------------------------------------------------------------------
// LongPressButton

Global GraphicClass LongPressButton Inherits Namespace "CUE.GraphicCollection.GenericObjectsBase.3".BaseLongPressButton WithAttributes {DefaultWidth := 120, DefaultHeight := 60 ,ObjectCode := "OB0056-003", DesignName := "Generic", GroupName := "Buttons"}
Global Const ICON_ALIGNLEFT As Long := &H00000003	// Horizontal align left
Global Const ICON_ALIGNHCENTER As Long := &H00000002	// Horizontal align center
Global Const ICON_ALIGNRIGHT As Long :=	&H00000004	// Horizontal align right
Global Const ICON_ALIGNTOP As Long := &H00000008	// Vertical align top
Global Const ICON_ALIGNVCENTER As Long := &H00000010	// Vertical align center
Global Const ICON_ALIGNBOTTOM As Long := &H00000020	// Vertical align bottom

Global Const BUTTON_COLOR As Long := &HFFC0C0C0	// 3D Button face color
Global Const BUTTON_HIGHLIGHT_COLOR As Long := &HFFFFFFFF	// 3D Button highlight color
Global Const BUTTON_SHADOW_COLOR As Long :=	_COLOR_GREY	// 3D Button shadow color
// Appearance Property Group
Protected Property AspectRatioMaximum As Double := 10.000 WithAttributes {PropertyGroup := "Appearance"}
Protected Property AspectRatioMinimum As Double := 1.000 WithAttributes {PropertyGroup := "Appearance"}
Protected Property BevelWidth As Long := 4 WithAttributes {PropertyGroup := "Appearance"}
Protected Property ConstrainProportion As Boolean := False WithAttributes {PropertyGroup := "Appearance"}
Protected Property Opacity As Byte := 255 WithAttributes {PropertyGroup := "Appearance", EditMode := "opacity"}
Protected Property SmartScaling As Boolean := False WithAttributes {PropertyGroup := "Appearance"}

// Behavior Property Group
Protected Property Enabled As Boolean := True WithAttributes {PropertyGroup := "Behavior", EditMode := "Boolean; 'Yes' := True, 'No' := False"}
Protected Property IgnoreTransparentArea As Boolean := False WithAttributes {PropertyGroup := "Behavior", EditMode := "Boolean; 'Yes' := True, 'No' := False"}

// Behavior Property Group
Protected Property LongPressTime As Time := :.4 WithAttributes {PropertyGroup := "Behavior",	EditMode := "TimeInterval"}

// Up Property Group
Protected Property UpColor As Long := BUTTON_COLOR WithAttributes {PropertyGroup := "Up", EditMode := "color"}
Protected Property UpFont As AddressOf _Font := fntDefault16 WithAttributes {PropertyGroup := "Up", EditMode := "font"}
Protected Property UpFontColor As Long := _COLOR_BLACK WithAttributes {PropertyGroup := "Up", EditMode := "color"}
Protected Property UpHighlightColor As Long := BUTTON_HIGHLIGHT_COLOR WithAttributes {PropertyGroup := "Up", EditMode := "color"}
Protected Property UpIcon As AddressOf _Picture := Nothing WithAttributes {PropertyGroup := "Up"}
Protected Property UpIconAlign As Long := ICON_ALIGNHCENTER BitOr ICON_ALIGNVCENTER WithAttributes {PropertyGroup := "Up", EditMode := "ENUM; 'Left-Top' := &H09, 'Left-Middle' := &H11, 'Left-Bottom' := &H21, 'Center-Top' := &H0A, 'Center-Middle' := &H12, 'Center-Bottom' := &H22, 'Right-Top' := &H0C, 'Right-Middle' := &H14, 'Right-Bottom' := &H24"}
Protected Property UpIconOffsetX As Long := 0 WithAttributes {PropertyGroup := "Up"}
Protected Property UpIconOffsetY As Long := 0 WithAttributes {PropertyGroup := "Up"}
Protected Property UpLineSpacing As Double := 1.2 WithAttributes {PropertyGroup := "Up"}
Protected Property UpPicture As AddressOf _Picture := Nothing WithAttributes {PropertyGroup := "Up"}
Protected Property UpShadowColor As Long := BUTTON_SHADOW_COLOR WithAttributes {PropertyGroup := "Up", EditMode := "color"}
Protected Property UpText As AddressOf Text := txtCaption WithAttributes {PropertyGroup := "Up"}
Protected Property UpTextAlign As Long := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNVCENTER WithAttributes {PropertyGroup := "Up", EditMode := "ENUM; 'Left-Top' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNTOP, 'Left-Middle' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNVCENTER, 'Left-Bottom' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNBOTTOM, 'Center-Top' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNTOP, 'Center-Middle' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNVCENTER, 'Center-Bottom' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNBOTTOM, 'Right-Top' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNTOP, 'Right-Middle' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNVCENTER, 'Right-Bottom' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNBOTTOM"}
Protected Property UpTextOffsetX As Long := 0 WithAttributes {PropertyGroup := "Up"}
Protected Property UpTextOffsetY As Long := 0 WithAttributes {PropertyGroup := "Up"}

// Down Property Group
Protected Property DownColor As Long := UpColor WithAttributes {PropertyGroup := "Down", EditMode := "color"}
Protected Property DownFont As AddressOf _Font := UpFont WithAttributes {PropertyGroup := "Down", EditMode := "font"}
Protected Property DownFontColor As Long := UpFontColor WithAttributes {PropertyGroup := "Down", EditMode := "color"}
Protected Property DownHighlightColor As Long := UpHighlightColor WithAttributes {PropertyGroup := "Down", EditMode := "color"}
Protected Property DownIcon As AddressOf _Picture := UpIcon WithAttributes {PropertyGroup := "Down"}
Protected Property DownIconAlign As Long := UpIconAlign WithAttributes {PropertyGroup := "Down", EditMode := "ENUM; 'Left-Top' := &H09, 'Left-Middle' := &H11, 'Left-Bottom' := &H21, 'Center-Top' := &H0A, 'Center-Middle' := &H12, 'Center-Bottom' := &H22, 'Right-Top' := &H0C, 'Right-Middle' := &H14, 'Right-Bottom' := &H24"}
Protected Property DownIconOffsetX As Long := UpIconOffsetX WithAttributes {PropertyGroup := "Down"}
Protected Property DownIconOffsetY As Long := UpIconOffsetY WithAttributes {PropertyGroup := "Down"}
Protected Property DownLineSpacing As Double := UpLineSpacing WithAttributes {PropertyGroup := "Down"}
Protected Property DownPicture As AddressOf _Picture := UpPicture WithAttributes {PropertyGroup := "Down"}
Protected Property DownShadowColor As Long := UpShadowColor WithAttributes {PropertyGroup := "Down", EditMode := "color"}
Protected Property DownText As AddressOf Text := UpText WithAttributes {PropertyGroup := "Down"}
Protected Property DownTextAlign As Long := UpTextAlign WithAttributes {PropertyGroup := "Down", EditMode := "ENUM; 'Left-Top' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNTOP, 'Left-Middle' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNVCENTER, 'Left-Bottom' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNBOTTOM, 'Center-Top' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNTOP, 'Center-Middle' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNVCENTER, 'Center-Bottom' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNBOTTOM, 'Right-Top' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNTOP, 'Right-Middle' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNVCENTER, 'Right-Bottom' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNBOTTOM"}
Protected Property DownTextOffsetX As Long := UpTextOffsetX WithAttributes {PropertyGroup := "Down"}
Protected Property DownTextOffsetY As Long := UpTextOffsetY WithAttributes {PropertyGroup := "Down"}

Protected Function GetProperty()
	MLongPressTime		:= LongPressTime
	
	MAspectRatioMaximum		:= AspectRatioMaximum
	MAspectRatioMinimum		:= AspectRatioMinimum
	MBevelWidth				:= BevelWidth
	MConstrainProportion	:= ConstrainProportion
	MOpacity				:= Opacity
	MSmartScaling			:= SmartScaling
	MEnabled				:= Enabled
	MIgnoreTransparentArea	:= IgnoreTransparentArea
	MUpColor				:= UpColor
	MUpFont					:= UpFont
	MUpFontColor			:= UpFontColor
	MUpHighlightColor		:= UpHighlightColor
	MUpIcon					:= UpIcon
	MUpIconAlign			:= UpIconAlign
	MUpIconOffsetX			:= UpIconOffsetX
	MUpIconOffsetY			:= UpIconOffsetY
	MUpLineSpacing			:= UpLineSpacing
	MUpPicture				:= UpPicture
	MUpShadowColor			:= UpShadowColor
	MUpText					:= UpText
	MUpTextAlign			:= UpTextAlign
	MUpTextOffsetX			:= UpTextOffsetX
	MUpTextOffsetY			:= UpTextOffsetY
	MDownColor				:= DownColor
	MDownFont				:= DownFont
	MDownFontColor			:= DownFontColor
	MDownHighlightColor		:= DownHighlightColor
	MDownIcon				:= DownIcon
	MDownIconAlign			:= DownIconAlign
	MDownIconOffsetX		:= DownIconOffsetX
	MDownIconOffsetY		:= DownIconOffsetY
	MDownLineSpacing		:= DownLineSpacing
	MDownPicture			:= DownPicture
	MDownShadowColor		:= DownShadowColor
	MDownText				:= DownText
	MDownTextAlign			:= DownTextAlign
	MDownTextOffsetX		:= DownTextOffsetX
	MDownTextOffsetY		:= DownTextOffsetY
End Function

Private Function Init()
	GetProperty()
	UpFormatFlags := MUpTextAlign BitOr _TEXT_WORDWRAP
	DownFormatFlags := MDownTextAlign BitOr _TEXT_WORDWRAP
	UpdateDimensions()
	UpdateDrawColors()
	DownOffset := BevelWidthDraw / 2
	RedrawCompoundObject()
End Function


Public Function SetAspectRatioMaximum(newaspectratiomaximum As Double) As Boolean

	If newaspectratiomaximum >= MAspectRatioMinimum Then
		MAspectRatioMaximum := newaspectratiomaximum
		UpdateDimensions()
		RedrawCompoundObject()
		Return Value True
	Else
		Return Value False
	End If
	
End Function


Public Function GetAspectRatioMaximum() As Double

	Return Value MAspectRatioMaximum
	
End Function


Public Function SetAspectRatioMinimum(newaspectratiominimum As Double) As Boolean

	If newaspectratiominimum <= MAspectRatioMaximum Then
		MAspectRatioMinimum := newaspectratiominimum
		UpdateDimensions()
		RedrawCompoundObject()
		Return Value True
	Else
		Return Value False
	End If
	
End Function


Public Function GetAspectRatioMinimum() As Double

	Return Value MAspectRatioMinimum
	
End Function


Public Function SetBevelWidth(newbevelwidth As Long) As Boolean

	If newbevelwidth <= Min(ObjectWidth / 2, ObjectHeight / 2) Then
		MBevelWidth := newbevelwidth
		BevelWidthDraw := MBevelWidth
		RedrawCompoundObject()
		Return Value True
	Else
		Return Value False
	End If

End Function


Public Function GetBevelWidth() As Long

	Return Value MBevelWidth

End Function


Public Function SetConstrainProportion(newconstrainproportion As Boolean) As Boolean

	MConstrainProportion := newconstrainproportion
	UpdateDimensions()
	RedrawCompoundObject()
	Return Value True

End Function


Public Function GetConstrainProportion() As Boolean

	Return Value MConstrainProportion

End Function


Public Function SetSmartScaling(newsmartscaling As Boolean) As Boolean

	MSmartScaling := newsmartscaling
	UpdateDimensions()
	RedrawCompoundObject()
	Return Value True

End Function


Public Function GetSmartScaling() As Boolean

	Return Value MSmartScaling

End Function


Public Function SetDownColor(newdowncolor As Long) As Boolean

	MDownColor := newdowncolor
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownColor() As Long

	Return Value MDownColor
	
End Function


Public Function SetDownFont(newdownfont As AddressOf _Font) As Boolean

	MDownFont := newdownfont
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownFont() As AddressOf _Font

	Return Value MDownFont
	
End Function


Public Function SetDownFontColor(newdownfontcolor As Long) As Boolean

	MDownFontColor := newdownfontcolor
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownFontColor() As Long

	Return Value MDownFontColor
	
End Function


Public Function SetDownHighlightColor(newdownhighlightcolor As Long) As Boolean

	MDownHighlightColor := newdownhighlightcolor
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownHighlightColor() As Long

	Return Value MDownHighlightColor
	
End Function


Public Function SetDownIcon(newdownicon As AddressOf _Picture) As Boolean

	MDownIcon := newdownicon
	UpdateIconPosition()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownIcon() As AddressOf _Picture

	Return Value MDownIcon
	
End Function


Public Function SetDownIconAlign(newdowniconalign As Long) As Boolean

	Select newdowniconalign
		Case ICON_ALIGNLEFT BitOr ICON_ALIGNTOP, ICON_ALIGNLEFT BitOr ICON_ALIGNVCENTER, ICON_ALIGNLEFT BitOr ICON_ALIGNBOTTOM, ICON_ALIGNHCENTER BitOr ICON_ALIGNTOP, ICON_ALIGNHCENTER BitOr ICON_ALIGNVCENTER, ICON_ALIGNHCENTER BitOr ICON_ALIGNBOTTOM, ICON_ALIGNRIGHT BitOr ICON_ALIGNTOP, ICON_ALIGNRIGHT BitOr ICON_ALIGNVCENTER, ICON_ALIGNRIGHT BitOr ICON_ALIGNBOTTOM
			MDownIconAlign := newdowniconalign
			UpdateIconPosition()
			RedrawCompoundObject()
			Return Value True

		Case Else
			Return Value False

	End Select

End Function


Public Function GetDownIconAlign() As Long

	Return Value MDownIconAlign

End Function


Public Function SetDownIconOffsetX(newdowniconoffsetx As Long) As Boolean
	
	MDownIconOffsetX := newdowniconoffsetx 
	UpdateIconPosition()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownIconOffsetX() As Long

	Return Value MDownIconOffsetX
	
End Function


Public Function SetDownIconOffsetY(newdowniconoffsety As Long) As Boolean
	
	MDownIconOffsetY := newdowniconoffsety 
	UpdateIconPosition()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownIconOffsetY() As Long

	Return Value MDownIconOffsetY
	
End Function


Public Function SetDownLineSpacing(newdownlinespacing As Double) As Boolean
	
	If newdownlinespacing >= 0 Then
		MDownLineSpacing := newdownlinespacing
		RedrawCompoundObject()
		Return Value True
	Else
		Return Value False
	End If

End Function


Public Function GetDownLineSpacing() As Double

	Return Value MDownLineSpacing
	
End Function


Public Function SetDownPicture(newdownpicture As AddressOf _Picture) As Boolean

	MDownPicture := newdownpicture
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownPicture() As AddressOf _Picture

	Return Value MDownPicture
	
End Function


Public Function SetDownShadowColor(newdownshadowcolor As Long) As Boolean

	MDownShadowColor := newdownshadowcolor
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownShadowColor() As Long

	Return Value MDownShadowColor 
	
End Function


Public Function SetDownText(newdowntext As Text) As Boolean

	If GetMemorySegment(newdowntext) = _MSEG_RESOURCEDATA Then
		MDownText := newdowntext
	Else
		TextBuffer := newdowntext
		MDownText := TextBuffer
	End If

	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownText() As AddressOf Text

	Return Value MDownText
	
End Function


Public Function SetDownTextAlign(newdowntextalign As Long) As Boolean

	Select newdowntextalign
		Case _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNTOP, _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNVCENTER, _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNBOTTOM, _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNTOP, _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNVCENTER, _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNBOTTOM, _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNTOP, _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNVCENTER, _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNBOTTOM
			MDownTextAlign := newdowntextalign
			DownFormatFlags := MDownTextAlign BitOr _TEXT_WORDWRAP
			RedrawCompoundObject()
			Return Value True

		Case Else
			Return Value False

	End Select

End Function


Public Function GetDownTextAlign() As Long

	Return Value MDownTextAlign

End Function


Public Function SetDownTextOffsetX(newdowntextoffsetx As Long) As Boolean
	
	MDownTextOffsetX := newdowntextoffsetx 
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownTextOffsetX() As Long

	Return Value MDownTextOffsetX
	
End Function


Public Function SetDownTextOffsetY(newdowntextoffsety As Long) As Boolean
	
	MDownTextOffsetY := newdowntextoffsety 
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownTextOffsetY() As Long

	Return Value MDownTextOffsetY
	
End Function


Public Function SetUpColor(newupcolor As Long) As Boolean

	MUpColor := newupcolor
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpColor() As Long

	Return Value MUpColor
	
End Function


Public Function SetUpFont(newupfont As AddressOf _Font) As Boolean

	MUpFont := newupfont
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpFont() As AddressOf _Font

	Return Value MUpFont
	
End Function


Public Function SetUpFontColor(newupfontcolor As Long) As Boolean

	MUpFontColor := newupfontcolor
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpFontColor() As Long

	Return Value MUpFontColor
	
End Function


Public Function SetUpHighlightColor(newuphighlightcolor As Long) As Boolean

	MUpHighlightColor := newuphighlightcolor
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpHighlightColor() As Long

	Return Value MUpHighlightColor
	
End Function


Public Function SetUpIcon(newupicon As AddressOf _Picture) As Boolean

	MUpIcon := newupicon
	UpdateIconPosition()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpIcon() As AddressOf _Picture

	Return Value MUpIcon
	
End Function


Public Function SetUpIconAlign(newupiconalign As Long) As Boolean

	Select newupiconalign
		Case ICON_ALIGNLEFT BitOr ICON_ALIGNTOP, ICON_ALIGNLEFT BitOr ICON_ALIGNVCENTER, ICON_ALIGNLEFT BitOr ICON_ALIGNBOTTOM, ICON_ALIGNHCENTER BitOr ICON_ALIGNTOP, ICON_ALIGNHCENTER BitOr ICON_ALIGNVCENTER, ICON_ALIGNHCENTER BitOr ICON_ALIGNBOTTOM, ICON_ALIGNRIGHT BitOr ICON_ALIGNTOP, ICON_ALIGNRIGHT BitOr ICON_ALIGNVCENTER, ICON_ALIGNRIGHT BitOr ICON_ALIGNBOTTOM
			MUpIconAlign := newupiconalign
			UpdateIconPosition()
			RedrawCompoundObject()
			Return Value True

		Case Else
			Return Value False

	End Select

End Function


Public Function GetUpIconAlign() As Long

	Return Value MUpIconAlign

End Function


Public Function SetUpIconOffsetX(newupiconoffsetx As Long) As Boolean
	
	MUpIconOffsetX := newupiconoffsetx 
	UpdateIconPosition() 
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpIconOffsetX() As Long

	Return Value MUpIconOffsetX
	
End Function


Public Function SetUpIconOffsetY(newupiconoffsety As Long) As Boolean
	
	MUpIconOffsetY := newupiconoffsety 
	UpdateIconPosition()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpIconOffsetY() As Long

	Return Value MUpIconOffsetY
	
End Function


Public Function SetUpLineSpacing(newuplinespacing As Double) As Boolean
	
	If newuplinespacing >= 0 Then
		MUpLineSpacing := newuplinespacing
		RedrawCompoundObject()
		Return Value True
	Else
		Return Value False
	End If

End Function


Public Function GetUpLineSpacing() As Double

	Return Value MUpLineSpacing
	
End Function


Public Function SetUpPicture(newuppicture As AddressOf _Picture) As Boolean

	MUpPicture := newuppicture
	UpdateDimensions()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpPicture() As AddressOf _Picture

	Return Value MUpPicture
	
End Function


Public Function SetUpShadowColor(newupshadowcolor As Long) As Boolean

	MUpShadowColor := newupshadowcolor
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpShadowColor() As Long

	Return Value MUpShadowColor
	
End Function


Public Function SetUpText(newuptext As Text) As Boolean

	If GetMemorySegment(newuptext) = _MSEG_RESOURCEDATA Then
		MUpText := newuptext
	Else
		TextBuffer := newuptext
		MUpText := TextBuffer
	End If

	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpText() As AddressOf Text

	Return Value MUpText
	
End Function


Public Function SetUpTextAlign(newuptextalign As Long) As Boolean

	Select newuptextalign
		Case _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNTOP, _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNVCENTER, _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNBOTTOM, _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNTOP, _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNVCENTER, _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNBOTTOM, _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNTOP, _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNVCENTER, _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNBOTTOM
			MUpTextAlign := newuptextalign
			UpFormatFlags := MUpTextAlign BitOr _TEXT_WORDWRAP
			RedrawCompoundObject()
			Return Value True

		Case Else
			Return Value False
	End Select

End Function


Public Function GetUpTextAlign() As Long

	Return Value MUpTextAlign

End Function


Public Function SetUpTextOffsetX(newuptextoffsetx As Long) As Boolean
	
	MUpTextOffsetX := newuptextoffsetx 
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpTextOffsetX() As Long

	Return Value MUpTextOffsetX
	
End Function


Public Function SetUpTextOffsetY(newuptextoffsety As Long) As Boolean
	
	MUpTextOffsetY := newuptextoffsety 
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpTextOffsetY() As Long

	Return Value MUpTextOffsetY
	
End Function


Public Function SetEnabled(newenabled As Boolean) As Boolean

	MEnabled := newenabled
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True

End Function


Public Function GetEnabled() As Boolean

	Return Value MEnabled

End Function


Public Function SetIgnoreTransparentArea(newignoretransparentarea As Boolean) As Boolean

	MIgnoreTransparentArea := newignoretransparentarea
	Return Value True

End Function


Public Function GetIgnoreTransparentArea() As Boolean

	Return Value MIgnoreTransparentArea

End Function


Public Function SetObjectDimensions(newwidth As Long, newheight As Long) As Boolean

	SetSize(newwidth, newheight)
	UpdateDimensions()
	RedrawCompoundObject()
	Return Value True

End Function


Public Function GetObjectDimensions(ByRef currentwidth As Long, ByRef currentheight As Long)

	GetSize(currentwidth, currentheight)

End Function


Public Function SetObjectPosition(newx As Long, newy As Long) As Boolean
Private Var Response As Boolean

	Response := SetPosition(newx, newy)
	RedrawCompoundObject()
	Return Value Response

End Function


Public Function GetObjectPosition(ByRef currentx As Long, ByRef currenty As Long)

	GetPosition(currentx, currenty)

End Function


Public Function SetOpacity(newopacity As Byte) As Boolean

	MOpacity := newopacity
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetOpacity() As Byte

	Return Value MOpacity
	
End Function



End GraphicClass

// LongPressButton
// End of object -------------------------------------------------------------------------



// Start of object -----------------------------------------------------------------------
// ToggleButton

Global GraphicClass ToggleButton Inherits Namespace "CUE.GraphicCollection.GenericObjectsBase.3".BaseToggleButton WithAttributes {DefaultWidth := 120, DefaultHeight := 60, ObjectCode := "OB0053-003", DesignName := "Generic", GroupName := "Buttons"}
Global Const ICON_ALIGNLEFT As Long := &H00000003	// Horizontal align left
Global Const ICON_ALIGNHCENTER As Long := &H00000002	// Horizontal align center
Global Const ICON_ALIGNRIGHT As Long :=	&H00000004	// Horizontal align right
Global Const ICON_ALIGNTOP As Long := &H00000008	// Vertical align top
Global Const ICON_ALIGNVCENTER As Long := &H00000010	// Vertical align center
Global Const ICON_ALIGNBOTTOM As Long := &H00000020	// Vertical align bottom

Global Const BUTTON_COLOR As Long := &HFFC0C0C0	// 3D Button face color
Global Const BUTTON_HIGHLIGHT_COLOR As Long := &HFFFFFFFF	// 3D Button highlight color
Global Const BUTTON_SHADOW_COLOR As Long :=	_COLOR_GREY	// 3D Button shadow color
// Appearance Property Group
Protected Property AspectRatioMaximum As Double := 10.000 WithAttributes {PropertyGroup := "Appearance"}
Protected Property AspectRatioMinimum As Double := 1.000 WithAttributes {PropertyGroup := "Appearance"}
Protected Property BevelWidth As Long := 4 WithAttributes {PropertyGroup := "Appearance"}
Protected Property ConstrainProportion As Boolean := False WithAttributes {PropertyGroup := "Appearance"}
Protected Property Opacity As Byte := 255 WithAttributes {PropertyGroup := "Appearance", EditMode := "opacity"}
Protected Property SmartScaling As Boolean := False WithAttributes {PropertyGroup := "Appearance"}

// Behavior Property Group
Protected Property Enabled As Boolean := True WithAttributes {PropertyGroup := "Behavior", EditMode := "Boolean; 'Yes' := True, 'No' := False"}
Protected Property IgnoreTransparentArea As Boolean := False WithAttributes {PropertyGroup := "Behavior", EditMode := "Boolean; 'Yes' := True, 'No' := False"}

// Behavior Property Group
Protected Property DefaultState As Boolean := False WithAttributes {PropertyGroup := "Behavior", EditMode := "Enum; 'Down' := True, 'Up' := False"}
Protected Property EventType As Long := EVENT_TYPE_ON_DOWN WithAttributes {PropertyGroup := "Behavior", EditMode := "Enum; 'OnDown' := EVENT_TYPE_ON_DOWN, 'OnUp' := EVENT_TYPE_ON_UP"}

// Up Property Group
Protected Property UpColor As Long := BUTTON_COLOR WithAttributes {PropertyGroup := "Up", EditMode := "color"}
Protected Property UpFont As AddressOf _Font := fntDefault16 WithAttributes {PropertyGroup := "Up", EditMode := "font"}
Protected Property UpFontColor As Long := _COLOR_BLACK WithAttributes {PropertyGroup := "Up", EditMode := "color"}
Protected Property UpHighlightColor As Long := BUTTON_HIGHLIGHT_COLOR WithAttributes {PropertyGroup := "Up", EditMode := "color"}
Protected Property UpIcon As AddressOf _Picture := Nothing WithAttributes {PropertyGroup := "Up"}
Protected Property UpIconAlign As Long := ICON_ALIGNHCENTER BitOr ICON_ALIGNVCENTER WithAttributes {PropertyGroup := "Up", EditMode := "ENUM; 'Left-Top' := &H09, 'Left-Middle' := &H11, 'Left-Bottom' := &H21, 'Center-Top' := &H0A, 'Center-Middle' := &H12, 'Center-Bottom' := &H22, 'Right-Top' := &H0C, 'Right-Middle' := &H14, 'Right-Bottom' := &H24"}
Protected Property UpIconOffsetX As Long := 0 WithAttributes {PropertyGroup := "Up"}
Protected Property UpIconOffsetY As Long := 0 WithAttributes {PropertyGroup := "Up"}
Protected Property UpLineSpacing As Double := 1.2 WithAttributes {PropertyGroup := "Up"}
Protected Property UpPicture As AddressOf _Picture := Nothing WithAttributes {PropertyGroup := "Up"}
Protected Property UpShadowColor As Long := BUTTON_SHADOW_COLOR WithAttributes {PropertyGroup := "Up", EditMode := "color"}
Protected Property UpText As AddressOf Text := txtCaption WithAttributes {PropertyGroup := "Up"}
Protected Property UpTextAlign As Long := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNVCENTER WithAttributes {PropertyGroup := "Up", EditMode := "ENUM; 'Left-Top' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNTOP, 'Left-Middle' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNVCENTER, 'Left-Bottom' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNBOTTOM, 'Center-Top' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNTOP, 'Center-Middle' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNVCENTER, 'Center-Bottom' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNBOTTOM, 'Right-Top' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNTOP, 'Right-Middle' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNVCENTER, 'Right-Bottom' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNBOTTOM"}
Protected Property UpTextOffsetX As Long := 0 WithAttributes {PropertyGroup := "Up"}
Protected Property UpTextOffsetY As Long := 0 WithAttributes {PropertyGroup := "Up"}

// Down Property Group
Protected Property DownColor As Long := UpColor WithAttributes {PropertyGroup := "Down", EditMode := "color"}
Protected Property DownFont As AddressOf _Font := UpFont WithAttributes {PropertyGroup := "Down", EditMode := "font"}
Protected Property DownFontColor As Long := UpFontColor WithAttributes {PropertyGroup := "Down", EditMode := "color"}
Protected Property DownHighlightColor As Long := UpHighlightColor WithAttributes {PropertyGroup := "Down", EditMode := "color"}
Protected Property DownIcon As AddressOf _Picture := UpIcon WithAttributes {PropertyGroup := "Down"}
Protected Property DownIconAlign As Long := UpIconAlign WithAttributes {PropertyGroup := "Down", EditMode := "ENUM; 'Left-Top' := &H09, 'Left-Middle' := &H11, 'Left-Bottom' := &H21, 'Center-Top' := &H0A, 'Center-Middle' := &H12, 'Center-Bottom' := &H22, 'Right-Top' := &H0C, 'Right-Middle' := &H14, 'Right-Bottom' := &H24"}
Protected Property DownIconOffsetX As Long := UpIconOffsetX WithAttributes {PropertyGroup := "Down"}
Protected Property DownIconOffsetY As Long := UpIconOffsetY WithAttributes {PropertyGroup := "Down"}
Protected Property DownLineSpacing As Double := UpLineSpacing WithAttributes {PropertyGroup := "Down"}
Protected Property DownPicture As AddressOf _Picture := UpPicture WithAttributes {PropertyGroup := "Down"}
Protected Property DownShadowColor As Long := UpShadowColor WithAttributes {PropertyGroup := "Down", EditMode := "color"}
Protected Property DownText As AddressOf Text := UpText WithAttributes {PropertyGroup := "Down"}
Protected Property DownTextAlign As Long := UpTextAlign WithAttributes {PropertyGroup := "Down", EditMode := "ENUM; 'Left-Top' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNTOP, 'Left-Middle' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNVCENTER, 'Left-Bottom' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNBOTTOM, 'Center-Top' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNTOP, 'Center-Middle' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNVCENTER, 'Center-Bottom' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNBOTTOM, 'Right-Top' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNTOP, 'Right-Middle' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNVCENTER, 'Right-Bottom' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNBOTTOM"}
Protected Property DownTextOffsetX As Long := UpTextOffsetX WithAttributes {PropertyGroup := "Down"}
Protected Property DownTextOffsetY As Long := UpTextOffsetY WithAttributes {PropertyGroup := "Down"}

Protected Function GetProperty()
	MDefaultState			:= DefaultState
	MEventType				:= EventType
	
	MAspectRatioMaximum		:= AspectRatioMaximum
	MAspectRatioMinimum		:= AspectRatioMinimum
	MBevelWidth				:= BevelWidth
	MConstrainProportion	:= ConstrainProportion
	MOpacity				:= Opacity
	MSmartScaling			:= SmartScaling
	MEnabled				:= Enabled
	MIgnoreTransparentArea	:= IgnoreTransparentArea
	MUpColor				:= UpColor
	MUpFont					:= UpFont
	MUpFontColor			:= UpFontColor
	MUpHighlightColor		:= UpHighlightColor
	MUpIcon					:= UpIcon
	MUpIconAlign			:= UpIconAlign
	MUpIconOffsetX			:= UpIconOffsetX
	MUpIconOffsetY			:= UpIconOffsetY
	MUpLineSpacing			:= UpLineSpacing
	MUpPicture				:= UpPicture
	MUpShadowColor			:= UpShadowColor
	MUpText					:= UpText
	MUpTextAlign			:= UpTextAlign
	MUpTextOffsetX			:= UpTextOffsetX
	MUpTextOffsetY			:= UpTextOffsetY
	MDownColor				:= DownColor
	MDownFont				:= DownFont
	MDownFontColor			:= DownFontColor
	MDownHighlightColor		:= DownHighlightColor
	MDownIcon				:= DownIcon
	MDownIconAlign			:= DownIconAlign
	MDownIconOffsetX		:= DownIconOffsetX
	MDownIconOffsetY		:= DownIconOffsetY
	MDownLineSpacing		:= DownLineSpacing
	MDownPicture			:= DownPicture
	MDownShadowColor		:= DownShadowColor
	MDownText				:= DownText
	MDownTextAlign			:= DownTextAlign
	MDownTextOffsetX		:= DownTextOffsetX
	MDownTextOffsetY		:= DownTextOffsetY
End Function

Private Function Init()
	GetProperty()
	IsPressed := DefaultState
	UpFormatFlags := MUpTextAlign BitOr _TEXT_WORDWRAP
	DownFormatFlags := MDownTextAlign BitOr _TEXT_WORDWRAP
	UpdateDimensions()
	UpdateDrawColors()
	DownOffset := BevelWidthDraw / 2
	RedrawCompoundObject()	
End Function


Public Function SetAspectRatioMaximum(newaspectratiomaximum As Double) As Boolean

	If newaspectratiomaximum >= MAspectRatioMinimum Then
		MAspectRatioMaximum := newaspectratiomaximum
		UpdateDimensions()
		RedrawCompoundObject()
		Return Value True
	Else
		Return Value False
	End If
	
End Function


Public Function GetAspectRatioMaximum() As Double

	Return Value MAspectRatioMaximum
	
End Function


Public Function SetAspectRatioMinimum(newaspectratiominimum As Double) As Boolean

	If newaspectratiominimum <= MAspectRatioMaximum Then
		MAspectRatioMinimum := newaspectratiominimum
		UpdateDimensions()
		RedrawCompoundObject()
		Return Value True
	Else
		Return Value False
	End If
	
End Function


Public Function GetAspectRatioMinimum() As Double

	Return Value MAspectRatioMinimum
	
End Function


Public Function SetBevelWidth(newbevelwidth As Long) As Boolean

	If newbevelwidth <= Min(ObjectWidth / 2, ObjectHeight / 2) Then
		MBevelWidth := newbevelwidth
		BevelWidthDraw := MBevelWidth
		RedrawCompoundObject()
		Return Value True
	Else
		Return Value False
	End If

End Function


Public Function GetBevelWidth() As Long

	Return Value MBevelWidth

End Function


Public Function SetConstrainProportion(newconstrainproportion As Boolean) As Boolean

	MConstrainProportion := newconstrainproportion
	UpdateDimensions()
	RedrawCompoundObject()
	Return Value True

End Function


Public Function GetConstrainProportion() As Boolean

	Return Value MConstrainProportion

End Function


Public Function SetSmartScaling(newsmartscaling As Boolean) As Boolean

	MSmartScaling := newsmartscaling
	UpdateDimensions()
	RedrawCompoundObject()
	Return Value True

End Function


Public Function GetSmartScaling() As Boolean

	Return Value MSmartScaling

End Function


Public Function SetDownColor(newdowncolor As Long) As Boolean

	MDownColor := newdowncolor
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownColor() As Long

	Return Value MDownColor
	
End Function


Public Function SetDownFont(newdownfont As AddressOf _Font) As Boolean

	MDownFont := newdownfont
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownFont() As AddressOf _Font

	Return Value MDownFont
	
End Function


Public Function SetDownFontColor(newdownfontcolor As Long) As Boolean

	MDownFontColor := newdownfontcolor
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownFontColor() As Long

	Return Value MDownFontColor
	
End Function


Public Function SetDownHighlightColor(newdownhighlightcolor As Long) As Boolean

	MDownHighlightColor := newdownhighlightcolor
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownHighlightColor() As Long

	Return Value MDownHighlightColor
	
End Function


Public Function SetDownIcon(newdownicon As AddressOf _Picture) As Boolean

	MDownIcon := newdownicon
	UpdateIconPosition()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownIcon() As AddressOf _Picture

	Return Value MDownIcon
	
End Function


Public Function SetDownIconAlign(newdowniconalign As Long) As Boolean

	Select newdowniconalign
		Case ICON_ALIGNLEFT BitOr ICON_ALIGNTOP, ICON_ALIGNLEFT BitOr ICON_ALIGNVCENTER, ICON_ALIGNLEFT BitOr ICON_ALIGNBOTTOM, ICON_ALIGNHCENTER BitOr ICON_ALIGNTOP, ICON_ALIGNHCENTER BitOr ICON_ALIGNVCENTER, ICON_ALIGNHCENTER BitOr ICON_ALIGNBOTTOM, ICON_ALIGNRIGHT BitOr ICON_ALIGNTOP, ICON_ALIGNRIGHT BitOr ICON_ALIGNVCENTER, ICON_ALIGNRIGHT BitOr ICON_ALIGNBOTTOM
			MDownIconAlign := newdowniconalign
			UpdateIconPosition()
			RedrawCompoundObject()
			Return Value True

		Case Else
			Return Value False

	End Select

End Function


Public Function GetDownIconAlign() As Long

	Return Value MDownIconAlign

End Function


Public Function SetDownIconOffsetX(newdowniconoffsetx As Long) As Boolean
	
	MDownIconOffsetX := newdowniconoffsetx 
	UpdateIconPosition()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownIconOffsetX() As Long

	Return Value MDownIconOffsetX
	
End Function


Public Function SetDownIconOffsetY(newdowniconoffsety As Long) As Boolean
	
	MDownIconOffsetY := newdowniconoffsety 
	UpdateIconPosition()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownIconOffsetY() As Long

	Return Value MDownIconOffsetY
	
End Function


Public Function SetDownLineSpacing(newdownlinespacing As Double) As Boolean
	
	If newdownlinespacing >= 0 Then
		MDownLineSpacing := newdownlinespacing
		RedrawCompoundObject()
		Return Value True
	Else
		Return Value False
	End If

End Function


Public Function GetDownLineSpacing() As Double

	Return Value MDownLineSpacing
	
End Function


Public Function SetDownPicture(newdownpicture As AddressOf _Picture) As Boolean

	MDownPicture := newdownpicture
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownPicture() As AddressOf _Picture

	Return Value MDownPicture
	
End Function


Public Function SetDownShadowColor(newdownshadowcolor As Long) As Boolean

	MDownShadowColor := newdownshadowcolor
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownShadowColor() As Long

	Return Value MDownShadowColor 
	
End Function


Public Function SetDownText(newdowntext As Text) As Boolean

	If GetMemorySegment(newdowntext) = _MSEG_RESOURCEDATA Then
		MDownText := newdowntext
	Else
		TextBuffer := newdowntext
		MDownText := TextBuffer
	End If

	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownText() As AddressOf Text

	Return Value MDownText
	
End Function


Public Function SetDownTextAlign(newdowntextalign As Long) As Boolean

	Select newdowntextalign
		Case _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNTOP, _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNVCENTER, _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNBOTTOM, _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNTOP, _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNVCENTER, _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNBOTTOM, _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNTOP, _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNVCENTER, _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNBOTTOM
			MDownTextAlign := newdowntextalign
			DownFormatFlags := MDownTextAlign BitOr _TEXT_WORDWRAP
			RedrawCompoundObject()
			Return Value True

		Case Else
			Return Value False

	End Select

End Function


Public Function GetDownTextAlign() As Long

	Return Value MDownTextAlign

End Function


Public Function SetDownTextOffsetX(newdowntextoffsetx As Long) As Boolean
	
	MDownTextOffsetX := newdowntextoffsetx 
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownTextOffsetX() As Long

	Return Value MDownTextOffsetX
	
End Function


Public Function SetDownTextOffsetY(newdowntextoffsety As Long) As Boolean
	
	MDownTextOffsetY := newdowntextoffsety 
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownTextOffsetY() As Long

	Return Value MDownTextOffsetY
	
End Function


Public Function SetUpColor(newupcolor As Long) As Boolean

	MUpColor := newupcolor
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpColor() As Long

	Return Value MUpColor
	
End Function


Public Function SetUpFont(newupfont As AddressOf _Font) As Boolean

	MUpFont := newupfont
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpFont() As AddressOf _Font

	Return Value MUpFont
	
End Function


Public Function SetUpFontColor(newupfontcolor As Long) As Boolean

	MUpFontColor := newupfontcolor
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpFontColor() As Long

	Return Value MUpFontColor
	
End Function


Public Function SetUpHighlightColor(newuphighlightcolor As Long) As Boolean

	MUpHighlightColor := newuphighlightcolor
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpHighlightColor() As Long

	Return Value MUpHighlightColor
	
End Function


Public Function SetUpIcon(newupicon As AddressOf _Picture) As Boolean

	MUpIcon := newupicon
	UpdateIconPosition()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpIcon() As AddressOf _Picture

	Return Value MUpIcon
	
End Function


Public Function SetUpIconAlign(newupiconalign As Long) As Boolean

	Select newupiconalign
		Case ICON_ALIGNLEFT BitOr ICON_ALIGNTOP, ICON_ALIGNLEFT BitOr ICON_ALIGNVCENTER, ICON_ALIGNLEFT BitOr ICON_ALIGNBOTTOM, ICON_ALIGNHCENTER BitOr ICON_ALIGNTOP, ICON_ALIGNHCENTER BitOr ICON_ALIGNVCENTER, ICON_ALIGNHCENTER BitOr ICON_ALIGNBOTTOM, ICON_ALIGNRIGHT BitOr ICON_ALIGNTOP, ICON_ALIGNRIGHT BitOr ICON_ALIGNVCENTER, ICON_ALIGNRIGHT BitOr ICON_ALIGNBOTTOM
			MUpIconAlign := newupiconalign
			UpdateIconPosition()
			RedrawCompoundObject()
			Return Value True

		Case Else
			Return Value False

	End Select

End Function


Public Function GetUpIconAlign() As Long

	Return Value MUpIconAlign

End Function


Public Function SetUpIconOffsetX(newupiconoffsetx As Long) As Boolean
	
	MUpIconOffsetX := newupiconoffsetx 
	UpdateIconPosition()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpIconOffsetX() As Long

	Return Value MUpIconOffsetX
	
End Function


Public Function SetUpIconOffsetY(newupiconoffsety As Long) As Boolean
	
	MUpIconOffsetY := newupiconoffsety 
	UpdateIconPosition()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpIconOffsetY() As Long

	Return Value MUpIconOffsetY
	
End Function


Public Function SetUpLineSpacing(newuplinespacing As Double) As Boolean
	
	If newuplinespacing >= 0 Then
		MUpLineSpacing := newuplinespacing
		RedrawCompoundObject()
		Return Value True
	Else
		Return Value False
	End If

End Function


Public Function GetUpLineSpacing() As Double

	Return Value MUpLineSpacing
	
End Function


Public Function SetUpPicture(newuppicture As AddressOf _Picture) As Boolean

	MUpPicture := newuppicture
	UpdateDimensions()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpPicture() As AddressOf _Picture

	Return Value MUpPicture
	
End Function


Public Function SetUpShadowColor(newupshadowcolor As Long) As Boolean

	MUpShadowColor := newupshadowcolor
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpShadowColor() As Long

	Return Value MUpShadowColor
	
End Function


Public Function SetUpText(newuptext As Text) As Boolean

	If GetMemorySegment(newuptext) = _MSEG_RESOURCEDATA Then
		MUpText := newuptext
	Else
		TextBuffer := newuptext
		MUpText := TextBuffer
	End If

	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpText() As AddressOf Text

	Return Value MUpText
	
End Function


Public Function SetUpTextAlign(newuptextalign As Long) As Boolean

	Select newuptextalign
		Case _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNTOP, _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNVCENTER, _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNBOTTOM, _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNTOP, _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNVCENTER, _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNBOTTOM, _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNTOP, _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNVCENTER, _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNBOTTOM
			MUpTextAlign := newuptextalign
			UpFormatFlags := MUpTextAlign BitOr _TEXT_WORDWRAP
			RedrawCompoundObject()
			Return Value True

		Case Else
			Return Value False
	End Select

End Function


Public Function GetUpTextAlign() As Long

	Return Value MUpTextAlign

End Function


Public Function SetUpTextOffsetX(newuptextoffsetx As Long) As Boolean
	
	MUpTextOffsetX := newuptextoffsetx 
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpTextOffsetX() As Long

	Return Value MUpTextOffsetX
	
End Function


Public Function SetUpTextOffsetY(newuptextoffsety As Long) As Boolean
	
	MUpTextOffsetY := newuptextoffsety 
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpTextOffsetY() As Long

	Return Value MUpTextOffsetY
	
End Function


Public Function SetEnabled(newenabled As Boolean) As Boolean

	MEnabled := newenabled
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True

End Function


Public Function GetEnabled() As Boolean

	Return Value MEnabled

End Function


Public Function SetIgnoreTransparentArea(newignoretransparentarea As Boolean) As Boolean

	MIgnoreTransparentArea := newignoretransparentarea
	Return Value True

End Function


Public Function GetIgnoreTransparentArea() As Boolean

	Return Value MIgnoreTransparentArea

End Function


Public Function SetObjectDimensions(newwidth As Long, newheight As Long) As Boolean

	SetSize(newwidth, newheight)
	UpdateDimensions()
	RedrawCompoundObject()
	Return Value True

End Function


Public Function GetObjectDimensions(ByRef currentwidth As Long, ByRef currentheight As Long)

	GetSize(currentwidth, currentheight)

End Function


Public Function SetObjectPosition(newx As Long, newy As Long) As Boolean
Private Var Response As Boolean

	Response := SetPosition(newx, newy)
	RedrawCompoundObject()
	Return Value Response

End Function


Public Function GetObjectPosition(ByRef currentx As Long, ByRef currenty As Long)

	GetPosition(currentx, currenty)

End Function


Public Function SetOpacity(newopacity As Byte) As Boolean

	MOpacity := newopacity
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetOpacity() As Byte

	Return Value MOpacity
	
End Function


End GraphicClass

// ToggleButton
// End of object -------------------------------------------------------------------------



// Start of object -----------------------------------------------------------------------
// RepeatButton

Global GraphicClass RepeatButton Inherits Namespace "CUE.GraphicCollection.GenericObjectsBase.3".BaseRepeatButton WithAttributes {DefaultWidth := 120, DefaultHeight := 60, ObjectCode := "OB0055-003", DesignName := "Generic", GroupName := "Buttons"}
Global Const ICON_ALIGNLEFT As Long := &H00000003	// Horizontal align left
Global Const ICON_ALIGNHCENTER As Long := &H00000002	// Horizontal align center
Global Const ICON_ALIGNRIGHT As Long :=	&H00000004	// Horizontal align right
Global Const ICON_ALIGNTOP As Long := &H00000008	// Vertical align top
Global Const ICON_ALIGNVCENTER As Long := &H00000010	// Vertical align center
Global Const ICON_ALIGNBOTTOM As Long := &H00000020	// Vertical align bottom

Global Const BUTTON_COLOR As Long := &HFFC0C0C0	// 3D Button face color
Global Const BUTTON_HIGHLIGHT_COLOR As Long := &HFFFFFFFF	// 3D Button highlight color
Global Const BUTTON_SHADOW_COLOR As Long :=	_COLOR_GREY	// 3D Button shadow color
// Appearance Property Group
Protected Property AspectRatioMaximum As Double := 10.000 WithAttributes {PropertyGroup := "Appearance"}
Protected Property AspectRatioMinimum As Double := 1.000 WithAttributes {PropertyGroup := "Appearance"}
Protected Property BevelWidth As Long := 4 WithAttributes {PropertyGroup := "Appearance"}
Protected Property ConstrainProportion As Boolean := False WithAttributes {PropertyGroup := "Appearance"}
Protected Property Opacity As Byte := 255 WithAttributes {PropertyGroup := "Appearance", EditMode := "opacity"}
Protected Property SmartScaling As Boolean := False WithAttributes {PropertyGroup := "Appearance"}

// Behavior Property Group
Protected Property Enabled As Boolean := True WithAttributes {PropertyGroup := "Behavior", EditMode := "Boolean; 'Yes' := True, 'No' := False"}
Protected Property IgnoreTransparentArea As Boolean := False WithAttributes {PropertyGroup := "Behavior", EditMode := "Boolean; 'Yes' := True, 'No' := False"}

// Behavior Property Group
Protected Property RepeatInterval As Time := :.4 WithAttributes {PropertyGroup := "Behavior", EditMode := "TimeInterval"}

// Up Property Group
Protected Property UpColor As Long := BUTTON_COLOR WithAttributes {PropertyGroup := "Up", EditMode := "color"}
Protected Property UpFont As AddressOf _Font := fntDefault16 WithAttributes {PropertyGroup := "Up", EditMode := "font"}
Protected Property UpFontColor As Long := _COLOR_BLACK WithAttributes {PropertyGroup := "Up", EditMode := "color"}
Protected Property UpHighlightColor As Long := BUTTON_HIGHLIGHT_COLOR WithAttributes {PropertyGroup := "Up", EditMode := "color"}
Protected Property UpIcon As AddressOf _Picture := Nothing WithAttributes {PropertyGroup := "Up"}
Protected Property UpIconAlign As Long := ICON_ALIGNHCENTER BitOr ICON_ALIGNVCENTER WithAttributes {PropertyGroup := "Up", EditMode := "ENUM; 'Left-Top' := &H09, 'Left-Middle' := &H11, 'Left-Bottom' := &H21, 'Center-Top' := &H0A, 'Center-Middle' := &H12, 'Center-Bottom' := &H22, 'Right-Top' := &H0C, 'Right-Middle' := &H14, 'Right-Bottom' := &H24"}
Protected Property UpIconOffsetX As Long := 0 WithAttributes {PropertyGroup := "Up"}
Protected Property UpIconOffsetY As Long := 0 WithAttributes {PropertyGroup := "Up"}
Protected Property UpLineSpacing As Double := 1.2 WithAttributes {PropertyGroup := "Up"}
Protected Property UpPicture As AddressOf _Picture := Nothing WithAttributes {PropertyGroup := "Up"}
Protected Property UpShadowColor As Long := BUTTON_SHADOW_COLOR WithAttributes {PropertyGroup := "Up", EditMode := "color"}
Protected Property UpText As AddressOf Text := txtCaption WithAttributes {PropertyGroup := "Up"}
Protected Property UpTextAlign As Long := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNVCENTER WithAttributes {PropertyGroup := "Up", EditMode := "ENUM; 'Left-Top' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNTOP, 'Left-Middle' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNVCENTER, 'Left-Bottom' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNBOTTOM, 'Center-Top' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNTOP, 'Center-Middle' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNVCENTER, 'Center-Bottom' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNBOTTOM, 'Right-Top' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNTOP, 'Right-Middle' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNVCENTER, 'Right-Bottom' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNBOTTOM"}
Protected Property UpTextOffsetX As Long := 0 WithAttributes {PropertyGroup := "Up"}
Protected Property UpTextOffsetY As Long := 0 WithAttributes {PropertyGroup := "Up"}

// Down Property Group
Protected Property DownColor As Long := UpColor WithAttributes {PropertyGroup := "Down", EditMode := "color"}
Protected Property DownFont As AddressOf _Font := UpFont WithAttributes {PropertyGroup := "Down", EditMode := "font"}
Protected Property DownFontColor As Long := UpFontColor WithAttributes {PropertyGroup := "Down", EditMode := "color"}
Protected Property DownHighlightColor As Long := UpHighlightColor WithAttributes {PropertyGroup := "Down", EditMode := "color"}
Protected Property DownIcon As AddressOf _Picture := UpIcon WithAttributes {PropertyGroup := "Down"}
Protected Property DownIconAlign As Long := UpIconAlign WithAttributes {PropertyGroup := "Down", EditMode := "ENUM; 'Left-Top' := &H09, 'Left-Middle' := &H11, 'Left-Bottom' := &H21, 'Center-Top' := &H0A, 'Center-Middle' := &H12, 'Center-Bottom' := &H22, 'Right-Top' := &H0C, 'Right-Middle' := &H14, 'Right-Bottom' := &H24"}
Protected Property DownIconOffsetX As Long := UpIconOffsetX WithAttributes {PropertyGroup := "Down"}
Protected Property DownIconOffsetY As Long := UpIconOffsetY WithAttributes {PropertyGroup := "Down"}
Protected Property DownLineSpacing As Double := UpLineSpacing WithAttributes {PropertyGroup := "Down"}
Protected Property DownPicture As AddressOf _Picture := UpPicture WithAttributes {PropertyGroup := "Down"}
Protected Property DownShadowColor As Long := UpShadowColor WithAttributes {PropertyGroup := "Down", EditMode := "color"}
Protected Property DownText As AddressOf Text := UpText WithAttributes {PropertyGroup := "Down"}
Protected Property DownTextAlign As Long := UpTextAlign WithAttributes {PropertyGroup := "Down", EditMode := "ENUM; 'Left-Top' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNTOP, 'Left-Middle' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNVCENTER, 'Left-Bottom' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNBOTTOM, 'Center-Top' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNTOP, 'Center-Middle' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNVCENTER, 'Center-Bottom' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNBOTTOM, 'Right-Top' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNTOP, 'Right-Middle' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNVCENTER, 'Right-Bottom' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNBOTTOM"}
Protected Property DownTextOffsetX As Long := UpTextOffsetX WithAttributes {PropertyGroup := "Down"}
Protected Property DownTextOffsetY As Long := UpTextOffsetY WithAttributes {PropertyGroup := "Down"}

Protected Function GetProperty()
	MRepeatInterval		:= RepeatInterval
	
	MAspectRatioMaximum		:= AspectRatioMaximum
	MAspectRatioMinimum		:= AspectRatioMinimum
	MBevelWidth				:= BevelWidth
	MConstrainProportion	:= ConstrainProportion
	MOpacity				:= Opacity
	MSmartScaling			:= SmartScaling
	MEnabled				:= Enabled
	MIgnoreTransparentArea	:= IgnoreTransparentArea
	MUpColor				:= UpColor
	MUpFont					:= UpFont
	MUpFontColor			:= UpFontColor
	MUpHighlightColor		:= UpHighlightColor
	MUpIcon					:= UpIcon
	MUpIconAlign			:= UpIconAlign
	MUpIconOffsetX			:= UpIconOffsetX
	MUpIconOffsetY			:= UpIconOffsetY
	MUpLineSpacing			:= UpLineSpacing
	MUpPicture				:= UpPicture
	MUpShadowColor			:= UpShadowColor
	MUpText					:= UpText
	MUpTextAlign			:= UpTextAlign
	MUpTextOffsetX			:= UpTextOffsetX
	MUpTextOffsetY			:= UpTextOffsetY
	MDownColor				:= DownColor
	MDownFont				:= DownFont
	MDownFontColor			:= DownFontColor
	MDownHighlightColor		:= DownHighlightColor
	MDownIcon				:= DownIcon
	MDownIconAlign			:= DownIconAlign
	MDownIconOffsetX		:= DownIconOffsetX
	MDownIconOffsetY		:= DownIconOffsetY
	MDownLineSpacing		:= DownLineSpacing
	MDownPicture			:= DownPicture
	MDownShadowColor		:= DownShadowColor
	MDownText				:= DownText
	MDownTextAlign			:= DownTextAlign
	MDownTextOffsetX		:= DownTextOffsetX
	MDownTextOffsetY		:= DownTextOffsetY
End Function

Private Function Init()
	GetProperty()	
	UpFormatFlags := MUpTextAlign BitOr _TEXT_WORDWRAP
	DownFormatFlags := MDownTextAlign BitOr _TEXT_WORDWRAP
	UpdateDimensions()
	UpdateDrawColors()
	DownOffset := BevelWidthDraw / 2
	RedrawCompoundObject()
End Function


Public Function SetAspectRatioMaximum(newaspectratiomaximum As Double) As Boolean

	If newaspectratiomaximum >= MAspectRatioMinimum Then
		MAspectRatioMaximum := newaspectratiomaximum
		UpdateDimensions()
		RedrawCompoundObject()
		Return Value True
	Else
		Return Value False
	End If
	
End Function


Public Function GetAspectRatioMaximum() As Double

	Return Value MAspectRatioMaximum
	
End Function


Public Function SetAspectRatioMinimum(newaspectratiominimum As Double) As Boolean

	If newaspectratiominimum <= MAspectRatioMaximum Then
		MAspectRatioMinimum := newaspectratiominimum
		UpdateDimensions()
		RedrawCompoundObject()
		Return Value True
	Else
		Return Value False
	End If
	
End Function


Public Function GetAspectRatioMinimum() As Double

	Return Value MAspectRatioMinimum
	
End Function


Public Function SetBevelWidth(newbevelwidth As Long) As Boolean

	If newbevelwidth <= Min(ObjectWidth / 2, ObjectHeight / 2) Then
		MBevelWidth := newbevelwidth
		BevelWidthDraw := MBevelWidth
		RedrawCompoundObject()
		Return Value True
	Else
		Return Value False
	End If

End Function


Public Function GetBevelWidth() As Long

	Return Value MBevelWidth

End Function


Public Function SetConstrainProportion(newconstrainproportion As Boolean) As Boolean

	MConstrainProportion := newconstrainproportion
	UpdateDimensions()
	RedrawCompoundObject()
	Return Value True

End Function


Public Function GetConstrainProportion() As Boolean

	Return Value MConstrainProportion

End Function


Public Function SetSmartScaling(newsmartscaling As Boolean) As Boolean

	MSmartScaling := newsmartscaling
	UpdateDimensions()
	RedrawCompoundObject()
	Return Value True

End Function


Public Function GetSmartScaling() As Boolean

	Return Value MSmartScaling

End Function


Public Function SetDownColor(newdowncolor As Long) As Boolean

	MDownColor := newdowncolor
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownColor() As Long

	Return Value MDownColor
	
End Function


Public Function SetDownFont(newdownfont As AddressOf _Font) As Boolean

	MDownFont := newdownfont
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownFont() As AddressOf _Font

	Return Value MDownFont
	
End Function


Public Function SetDownFontColor(newdownfontcolor As Long) As Boolean

	MDownFontColor := newdownfontcolor
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownFontColor() As Long

	Return Value MDownFontColor
	
End Function


Public Function SetDownHighlightColor(newdownhighlightcolor As Long) As Boolean

	MDownHighlightColor := newdownhighlightcolor
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownHighlightColor() As Long

	Return Value MDownHighlightColor
	
End Function


Public Function SetDownIcon(newdownicon As AddressOf _Picture) As Boolean

	MDownIcon := newdownicon
	UpdateIconPosition()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownIcon() As AddressOf _Picture

	Return Value MDownIcon
	
End Function


Public Function SetDownIconAlign(newdowniconalign As Long) As Boolean

	Select newdowniconalign
		Case ICON_ALIGNLEFT BitOr ICON_ALIGNTOP, ICON_ALIGNLEFT BitOr ICON_ALIGNVCENTER, ICON_ALIGNLEFT BitOr ICON_ALIGNBOTTOM, ICON_ALIGNHCENTER BitOr ICON_ALIGNTOP, ICON_ALIGNHCENTER BitOr ICON_ALIGNVCENTER, ICON_ALIGNHCENTER BitOr ICON_ALIGNBOTTOM, ICON_ALIGNRIGHT BitOr ICON_ALIGNTOP, ICON_ALIGNRIGHT BitOr ICON_ALIGNVCENTER, ICON_ALIGNRIGHT BitOr ICON_ALIGNBOTTOM
			MDownIconAlign := newdowniconalign
			UpdateIconPosition()
			RedrawCompoundObject()
			Return Value True

		Case Else
			Return Value False

	End Select

End Function


Public Function GetDownIconAlign() As Long

	Return Value MDownIconAlign

End Function


Public Function SetDownIconOffsetX(newdowniconoffsetx As Long) As Boolean
	
	MDownIconOffsetX := newdowniconoffsetx 
	UpdateIconPosition()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownIconOffsetX() As Long

	Return Value MDownIconOffsetX
	
End Function


Public Function SetDownIconOffsetY(newdowniconoffsety As Long) As Boolean
	
	MDownIconOffsetY := newdowniconoffsety 
	UpdateIconPosition()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownIconOffsetY() As Long

	Return Value MDownIconOffsetY
	
End Function


Public Function SetDownLineSpacing(newdownlinespacing As Double) As Boolean
	
	If newdownlinespacing >= 0 Then
		MDownLineSpacing := newdownlinespacing
		RedrawCompoundObject()
		Return Value True
	Else
		Return Value False
	End If

End Function


Public Function GetDownLineSpacing() As Double

	Return Value MDownLineSpacing
	
End Function


Public Function SetDownPicture(newdownpicture As AddressOf _Picture) As Boolean

	MDownPicture := newdownpicture
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownPicture() As AddressOf _Picture

	Return Value MDownPicture
	
End Function


Public Function SetDownShadowColor(newdownshadowcolor As Long) As Boolean

	MDownShadowColor := newdownshadowcolor
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownShadowColor() As Long

	Return Value MDownShadowColor 
	
End Function


Public Function SetDownText(newdowntext As Text) As Boolean

	If GetMemorySegment(newdowntext) = _MSEG_RESOURCEDATA Then
		MDownText := newdowntext
	Else
		TextBuffer := newdowntext
		MDownText := TextBuffer
	End If

	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownText() As AddressOf Text

	Return Value MDownText
	
End Function


Public Function SetDownTextAlign(newdowntextalign As Long) As Boolean

	Select newdowntextalign
		Case _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNTOP, _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNVCENTER, _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNBOTTOM, _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNTOP, _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNVCENTER, _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNBOTTOM, _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNTOP, _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNVCENTER, _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNBOTTOM
			MDownTextAlign := newdowntextalign
			DownFormatFlags := MDownTextAlign BitOr _TEXT_WORDWRAP
			RedrawCompoundObject()
			Return Value True

		Case Else
			Return Value False

	End Select

End Function


Public Function GetDownTextAlign() As Long

	Return Value MDownTextAlign

End Function


Public Function SetDownTextOffsetX(newdowntextoffsetx As Long) As Boolean
	
	MDownTextOffsetX := newdowntextoffsetx 
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownTextOffsetX() As Long

	Return Value MDownTextOffsetX
	
End Function


Public Function SetDownTextOffsetY(newdowntextoffsety As Long) As Boolean
	
	MDownTextOffsetY := newdowntextoffsety 
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownTextOffsetY() As Long

	Return Value MDownTextOffsetY
	
End Function


Public Function SetUpColor(newupcolor As Long) As Boolean

	MUpColor := newupcolor
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpColor() As Long

	Return Value MUpColor
	
End Function


Public Function SetUpFont(newupfont As AddressOf _Font) As Boolean

	MUpFont := newupfont
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpFont() As AddressOf _Font

	Return Value MUpFont
	
End Function


Public Function SetUpFontColor(newupfontcolor As Long) As Boolean

	MUpFontColor := newupfontcolor
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpFontColor() As Long

	Return Value MUpFontColor
	
End Function


Public Function SetUpHighlightColor(newuphighlightcolor As Long) As Boolean

	MUpHighlightColor := newuphighlightcolor
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpHighlightColor() As Long

	Return Value MUpHighlightColor
	
End Function


Public Function SetUpIcon(newupicon As AddressOf _Picture) As Boolean

	MUpIcon := newupicon
	UpdateIconPosition()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpIcon() As AddressOf _Picture

	Return Value MUpIcon
	
End Function


Public Function SetUpIconAlign(newupiconalign As Long) As Boolean

	Select newupiconalign
		Case ICON_ALIGNLEFT BitOr ICON_ALIGNTOP, ICON_ALIGNLEFT BitOr ICON_ALIGNVCENTER, ICON_ALIGNLEFT BitOr ICON_ALIGNBOTTOM, ICON_ALIGNHCENTER BitOr ICON_ALIGNTOP, ICON_ALIGNHCENTER BitOr ICON_ALIGNVCENTER, ICON_ALIGNHCENTER BitOr ICON_ALIGNBOTTOM, ICON_ALIGNRIGHT BitOr ICON_ALIGNTOP, ICON_ALIGNRIGHT BitOr ICON_ALIGNVCENTER, ICON_ALIGNRIGHT BitOr ICON_ALIGNBOTTOM
			MUpIconAlign := newupiconalign
			UpdateIconPosition()
			RedrawCompoundObject()
			Return Value True

		Case Else
			Return Value False

	End Select

End Function


Public Function GetUpIconAlign() As Long

	Return Value MUpIconAlign

End Function


Public Function SetUpIconOffsetX(newupiconoffsetx As Long) As Boolean
	
	MUpIconOffsetX := newupiconoffsetx 
	UpdateIconPosition()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpIconOffsetX() As Long

	Return Value MUpIconOffsetX
	
End Function


Public Function SetUpIconOffsetY(newupiconoffsety As Long) As Boolean
	
	MUpIconOffsetY := newupiconoffsety 
	UpdateIconPosition()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpIconOffsetY() As Long

	Return Value MUpIconOffsetY
	
End Function


Public Function SetUpLineSpacing(newuplinespacing As Double) As Boolean
	
	If newuplinespacing >= 0 Then
		MUpLineSpacing := newuplinespacing
		RedrawCompoundObject()
		Return Value True
	Else
		Return Value False
	End If

End Function


Public Function GetUpLineSpacing() As Double

	Return Value MUpLineSpacing
	
End Function


Public Function SetUpPicture(newuppicture As AddressOf _Picture) As Boolean

	MUpPicture := newuppicture
	UpdateDimensions()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpPicture() As AddressOf _Picture

	Return Value MUpPicture
	
End Function


Public Function SetUpShadowColor(newupshadowcolor As Long) As Boolean

	MUpShadowColor := newupshadowcolor
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpShadowColor() As Long

	Return Value MUpShadowColor
	
End Function


Public Function SetUpText(newuptext As Text) As Boolean

	If GetMemorySegment(newuptext) = _MSEG_RESOURCEDATA Then
		MUpText := newuptext
	Else
		TextBuffer := newuptext
		MUpText := TextBuffer
	End If

	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpText() As AddressOf Text

	Return Value MUpText
	
End Function


Public Function SetUpTextAlign(newuptextalign As Long) As Boolean

	Select newuptextalign
		Case _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNTOP, _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNVCENTER, _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNBOTTOM, _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNTOP, _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNVCENTER, _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNBOTTOM, _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNTOP, _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNVCENTER, _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNBOTTOM
			MUpTextAlign := newuptextalign
			UpFormatFlags := MUpTextAlign BitOr _TEXT_WORDWRAP
			RedrawCompoundObject()
			Return Value True

		Case Else
			Return Value False
	End Select

End Function


Public Function GetUpTextAlign() As Long

	Return Value MUpTextAlign

End Function


Public Function SetUpTextOffsetX(newuptextoffsetx As Long) As Boolean
	
	MUpTextOffsetX := newuptextoffsetx 
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpTextOffsetX() As Long

	Return Value MUpTextOffsetX
	
End Function


Public Function SetUpTextOffsetY(newuptextoffsety As Long) As Boolean
	
	MUpTextOffsetY := newuptextoffsety 
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpTextOffsetY() As Long

	Return Value MUpTextOffsetY
	
End Function


Public Function SetEnabled(newenabled As Boolean) As Boolean

	MEnabled := newenabled
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True

End Function


Public Function GetEnabled() As Boolean

	Return Value MEnabled

End Function


Public Function SetIgnoreTransparentArea(newignoretransparentarea As Boolean) As Boolean

	MIgnoreTransparentArea := newignoretransparentarea
	Return Value True

End Function


Public Function GetIgnoreTransparentArea() As Boolean

	Return Value MIgnoreTransparentArea

End Function


Public Function SetObjectDimensions(newwidth As Long, newheight As Long) As Boolean

	SetSize(newwidth, newheight)
	UpdateDimensions()
	RedrawCompoundObject()
	Return Value True

End Function


Public Function GetObjectDimensions(ByRef currentwidth As Long, ByRef currentheight As Long)

	GetSize(currentwidth, currentheight)

End Function


Public Function SetObjectPosition(newx As Long, newy As Long) As Boolean
Private Var Response As Boolean

	Response := SetPosition(newx, newy)
	RedrawCompoundObject()
	Return Value Response

End Function


Public Function GetObjectPosition(ByRef currentx As Long, ByRef currenty As Long)

	GetPosition(currentx, currenty)

End Function


Public Function SetOpacity(newopacity As Byte) As Boolean

	MOpacity := newopacity
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetOpacity() As Byte

	Return Value MOpacity
	
End Function


End GraphicClass

// RepeatButton
// End of object -------------------------------------------------------------------------



// Start of object -----------------------------------------------------------------------
// RadioButton

Global GraphicClass RadioButton Inherits Namespace "CUE.GraphicCollection.GenericObjectsBase.3".BaseRadioButton WithAttributes {DefaultWidth := 120, DefaultHeight := 60, ObjectCode := "OB0054-003", DesignName := "Generic", GroupName := "Buttons"}
Global Const ICON_ALIGNLEFT As Long := &H00000003	// Horizontal align left
Global Const ICON_ALIGNHCENTER As Long := &H00000002	// Horizontal align center
Global Const ICON_ALIGNRIGHT As Long :=	&H00000004	// Horizontal align right
Global Const ICON_ALIGNTOP As Long := &H00000008	// Vertical align top
Global Const ICON_ALIGNVCENTER As Long := &H00000010	// Vertical align center
Global Const ICON_ALIGNBOTTOM As Long := &H00000020	// Vertical align bottom

Global Const BUTTON_COLOR As Long := &HFFC0C0C0	// 3D Button face color
Global Const BUTTON_HIGHLIGHT_COLOR As Long := &HFFFFFFFF	// 3D Button highlight color
Global Const BUTTON_SHADOW_COLOR As Long :=	_COLOR_GREY	// 3D Button shadow color
// Appearance Property Group
Protected Property AspectRatioMaximum As Double := 10.000 WithAttributes {PropertyGroup := "Appearance"}
Protected Property AspectRatioMinimum As Double := 1.000 WithAttributes {PropertyGroup := "Appearance"}
Protected Property BevelWidth As Long := 4 WithAttributes {PropertyGroup := "Appearance"}
Protected Property ConstrainProportion As Boolean := False WithAttributes {PropertyGroup := "Appearance"}
Protected Property Opacity As Byte := 255 WithAttributes {PropertyGroup := "Appearance", EditMode := "opacity"}
Protected Property SmartScaling As Boolean := False WithAttributes {PropertyGroup := "Appearance"}

// Behavior Property Group
Protected Property Enabled As Boolean := True WithAttributes {PropertyGroup := "Behavior", EditMode := "Boolean; 'Yes' := True, 'No' := False"}
Protected Property IgnoreTransparentArea As Boolean := False WithAttributes {PropertyGroup := "Behavior", EditMode := "Boolean; 'Yes' := True, 'No' := False"}

// Behavior Property Group
Protected Property DefaultState As Boolean := False WithAttributes {PropertyGroup := "Behavior", EditMode := "Enum; 'Down' := True, 'Up' := False"}
Protected Property NavigationBarButtonID As Long := 0 WithAttributes {PropertyGroup := "Behavior"}

// Up Property Group
Protected Property UpColor As Long := BUTTON_COLOR WithAttributes {PropertyGroup := "Up", EditMode := "color"}
Protected Property UpFont As AddressOf _Font := fntDefault16 WithAttributes {PropertyGroup := "Up", EditMode := "font"}
Protected Property UpFontColor As Long := _COLOR_BLACK WithAttributes {PropertyGroup := "Up", EditMode := "color"}
Protected Property UpHighlightColor As Long := BUTTON_HIGHLIGHT_COLOR WithAttributes {PropertyGroup := "Up", EditMode := "color"}
Protected Property UpIcon As AddressOf _Picture := Nothing WithAttributes {PropertyGroup := "Up"}
Protected Property UpIconAlign As Long := ICON_ALIGNHCENTER BitOr ICON_ALIGNVCENTER WithAttributes {PropertyGroup := "Up", EditMode := "ENUM; 'Left-Top' := &H09, 'Left-Middle' := &H11, 'Left-Bottom' := &H21, 'Center-Top' := &H0A, 'Center-Middle' := &H12, 'Center-Bottom' := &H22, 'Right-Top' := &H0C, 'Right-Middle' := &H14, 'Right-Bottom' := &H24"}
Protected Property UpIconOffsetX As Long := 0 WithAttributes {PropertyGroup := "Up"}
Protected Property UpIconOffsetY As Long := 0 WithAttributes {PropertyGroup := "Up"}
Protected Property UpLineSpacing As Double := 1.2 WithAttributes {PropertyGroup := "Up"}
Protected Property UpPicture As AddressOf _Picture := Nothing WithAttributes {PropertyGroup := "Up"}
Protected Property UpShadowColor As Long := BUTTON_SHADOW_COLOR WithAttributes {PropertyGroup := "Up", EditMode := "color"}
Protected Property UpText As AddressOf Text := txtCaption WithAttributes {PropertyGroup := "Up"}
Protected Property UpTextAlign As Long := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNVCENTER WithAttributes {PropertyGroup := "Up", EditMode := "ENUM; 'Left-Top' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNTOP, 'Left-Middle' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNVCENTER, 'Left-Bottom' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNBOTTOM, 'Center-Top' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNTOP, 'Center-Middle' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNVCENTER, 'Center-Bottom' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNBOTTOM, 'Right-Top' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNTOP, 'Right-Middle' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNVCENTER, 'Right-Bottom' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNBOTTOM"}
Protected Property UpTextOffsetX As Long := 0 WithAttributes {PropertyGroup := "Up"}
Protected Property UpTextOffsetY As Long := 0 WithAttributes {PropertyGroup := "Up"}

// Down Property Group
Protected Property DownColor As Long := UpColor WithAttributes {PropertyGroup := "Down", EditMode := "color"}
Protected Property DownFont As AddressOf _Font := UpFont WithAttributes {PropertyGroup := "Down", EditMode := "font"}
Protected Property DownFontColor As Long := UpFontColor WithAttributes {PropertyGroup := "Down", EditMode := "color"}
Protected Property DownHighlightColor As Long := UpHighlightColor WithAttributes {PropertyGroup := "Down", EditMode := "color"}
Protected Property DownIcon As AddressOf _Picture := UpIcon WithAttributes {PropertyGroup := "Down"}
Protected Property DownIconAlign As Long := UpIconAlign WithAttributes {PropertyGroup := "Down", EditMode := "ENUM; 'Left-Top' := &H09, 'Left-Middle' := &H11, 'Left-Bottom' := &H21, 'Center-Top' := &H0A, 'Center-Middle' := &H12, 'Center-Bottom' := &H22, 'Right-Top' := &H0C, 'Right-Middle' := &H14, 'Right-Bottom' := &H24"}
Protected Property DownIconOffsetX As Long := UpIconOffsetX WithAttributes {PropertyGroup := "Down"}
Protected Property DownIconOffsetY As Long := UpIconOffsetY WithAttributes {PropertyGroup := "Down"}
Protected Property DownLineSpacing As Double := UpLineSpacing WithAttributes {PropertyGroup := "Down"}
Protected Property DownPicture As AddressOf _Picture := UpPicture WithAttributes {PropertyGroup := "Down"}
Protected Property DownShadowColor As Long := UpShadowColor WithAttributes {PropertyGroup := "Down", EditMode := "color"}
Protected Property DownText As AddressOf Text := UpText WithAttributes {PropertyGroup := "Down"}
Protected Property DownTextAlign As Long := UpTextAlign WithAttributes {PropertyGroup := "Down", EditMode := "ENUM; 'Left-Top' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNTOP, 'Left-Middle' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNVCENTER, 'Left-Bottom' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNBOTTOM, 'Center-Top' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNTOP, 'Center-Middle' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNVCENTER, 'Center-Bottom' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNBOTTOM, 'Right-Top' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNTOP, 'Right-Middle' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNVCENTER, 'Right-Bottom' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNBOTTOM"}
Protected Property DownTextOffsetX As Long := UpTextOffsetX WithAttributes {PropertyGroup := "Down"}
Protected Property DownTextOffsetY As Long := UpTextOffsetY WithAttributes {PropertyGroup := "Down"}

Protected Function GetProperty()
	MDefaultState		:= DefaultState
	MNavigationBarButtonID	:= NavigationBarButtonID
	MAspectRatioMaximum		:= AspectRatioMaximum
	MAspectRatioMinimum		:= AspectRatioMinimum
	MBevelWidth				:= BevelWidth
	MConstrainProportion	:= ConstrainProportion
	MOpacity				:= Opacity
	MSmartScaling			:= SmartScaling
	MEnabled				:= Enabled
	MIgnoreTransparentArea	:= IgnoreTransparentArea
	MUpColor				:= UpColor
	MUpFont					:= UpFont
	MUpFontColor			:= UpFontColor
	MUpHighlightColor		:= UpHighlightColor
	MUpIcon					:= UpIcon
	MUpIconAlign			:= UpIconAlign
	MUpIconOffsetX			:= UpIconOffsetX
	MUpIconOffsetY			:= UpIconOffsetY
	MUpLineSpacing			:= UpLineSpacing
	MUpPicture				:= UpPicture
	MUpShadowColor			:= UpShadowColor
	MUpText					:= UpText
	MUpTextAlign			:= UpTextAlign
	MUpTextOffsetX			:= UpTextOffsetX
	MUpTextOffsetY			:= UpTextOffsetY
	MDownColor				:= DownColor
	MDownFont				:= DownFont
	MDownFontColor			:= DownFontColor
	MDownHighlightColor		:= DownHighlightColor
	MDownIcon				:= DownIcon
	MDownIconAlign			:= DownIconAlign
	MDownIconOffsetX		:= DownIconOffsetX
	MDownIconOffsetY		:= DownIconOffsetY
	MDownLineSpacing		:= DownLineSpacing
	MDownPicture			:= DownPicture
	MDownShadowColor		:= DownShadowColor
	MDownText				:= DownText
	MDownTextAlign			:= DownTextAlign
	MDownTextOffsetX		:= DownTextOffsetX
	MDownTextOffsetY		:= DownTextOffsetY
End Function

Private Function Init()
	GetProperty()
	IsPressed := DefaultState
	UpFormatFlags := MUpTextAlign BitOr _TEXT_WORDWRAP
	DownFormatFlags := MDownTextAlign BitOr _TEXT_WORDWRAP
	UpdateDimensions()
	UpdateDrawColors()
	DownOffset := BevelWidthDraw / 2
	RedrawCompoundObject()	
End Function


Public Function SetAspectRatioMaximum(newaspectratiomaximum As Double) As Boolean

	If newaspectratiomaximum >= MAspectRatioMinimum Then
		MAspectRatioMaximum := newaspectratiomaximum
		UpdateDimensions()
		RedrawCompoundObject()
		Return Value True
	Else
		Return Value False
	End If
	
End Function


Public Function GetAspectRatioMaximum() As Double

	Return Value MAspectRatioMaximum
	
End Function


Public Function SetAspectRatioMinimum(newaspectratiominimum As Double) As Boolean

	If newaspectratiominimum <= MAspectRatioMaximum Then
		MAspectRatioMinimum := newaspectratiominimum
		UpdateDimensions()
		RedrawCompoundObject()
		Return Value True
	Else
		Return Value False
	End If
	
End Function


Public Function GetAspectRatioMinimum() As Double

	Return Value MAspectRatioMinimum
	
End Function


Public Function SetBevelWidth(newbevelwidth As Long) As Boolean

	If newbevelwidth <= Min(ObjectWidth / 2, ObjectHeight / 2) Then
		MBevelWidth := newbevelwidth
		BevelWidthDraw := MBevelWidth
		RedrawCompoundObject()
		Return Value True
	Else
		Return Value False
	End If

End Function


Public Function GetBevelWidth() As Long

	Return Value MBevelWidth

End Function


Public Function SetConstrainProportion(newconstrainproportion As Boolean) As Boolean

	MConstrainProportion := newconstrainproportion
	UpdateDimensions()
	RedrawCompoundObject()
	Return Value True

End Function


Public Function GetConstrainProportion() As Boolean

	Return Value MConstrainProportion

End Function


Public Function SetSmartScaling(newsmartscaling As Boolean) As Boolean

	MSmartScaling := newsmartscaling
	UpdateDimensions()
	RedrawCompoundObject()
	Return Value True

End Function


Public Function GetSmartScaling() As Boolean

	Return Value MSmartScaling

End Function


Public Function SetDownColor(newdowncolor As Long) As Boolean

	MDownColor := newdowncolor
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownColor() As Long

	Return Value MDownColor
	
End Function


Public Function SetDownFont(newdownfont As AddressOf _Font) As Boolean

	MDownFont := newdownfont
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownFont() As AddressOf _Font

	Return Value MDownFont
	
End Function


Public Function SetDownFontColor(newdownfontcolor As Long) As Boolean

	MDownFontColor := newdownfontcolor
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownFontColor() As Long

	Return Value MDownFontColor
	
End Function


Public Function SetDownHighlightColor(newdownhighlightcolor As Long) As Boolean

	MDownHighlightColor := newdownhighlightcolor
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownHighlightColor() As Long

	Return Value MDownHighlightColor
	
End Function


Public Function SetDownIcon(newdownicon As AddressOf _Picture) As Boolean

	MDownIcon := newdownicon
	UpdateIconPosition()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownIcon() As AddressOf _Picture

	Return Value MDownIcon
	
End Function


Public Function SetDownIconAlign(newdowniconalign As Long) As Boolean

	Select newdowniconalign
		Case ICON_ALIGNLEFT BitOr ICON_ALIGNTOP, ICON_ALIGNLEFT BitOr ICON_ALIGNVCENTER, ICON_ALIGNLEFT BitOr ICON_ALIGNBOTTOM, ICON_ALIGNHCENTER BitOr ICON_ALIGNTOP, ICON_ALIGNHCENTER BitOr ICON_ALIGNVCENTER, ICON_ALIGNHCENTER BitOr ICON_ALIGNBOTTOM, ICON_ALIGNRIGHT BitOr ICON_ALIGNTOP, ICON_ALIGNRIGHT BitOr ICON_ALIGNVCENTER, ICON_ALIGNRIGHT BitOr ICON_ALIGNBOTTOM
			MDownIconAlign := newdowniconalign
			UpdateIconPosition()
			RedrawCompoundObject()
			Return Value True

		Case Else
			Return Value False

	End Select

End Function


Public Function GetDownIconAlign() As Long

	Return Value MDownIconAlign

End Function


Public Function SetDownIconOffsetX(newdowniconoffsetx As Long) As Boolean
	
	MDownIconOffsetX := newdowniconoffsetx
	UpdateIconPosition() 
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownIconOffsetX() As Long

	Return Value MDownIconOffsetX
	
End Function


Public Function SetDownIconOffsetY(newdowniconoffsety As Long) As Boolean
	
	MDownIconOffsetY := newdowniconoffsety 
	UpdateIconPosition()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownIconOffsetY() As Long

	Return Value MDownIconOffsetY
	
End Function


Public Function SetDownLineSpacing(newdownlinespacing As Double) As Boolean
	
	If newdownlinespacing >= 0 Then
		MDownLineSpacing := newdownlinespacing
		RedrawCompoundObject()
		Return Value True
	Else
		Return Value False
	End If

End Function


Public Function GetDownLineSpacing() As Double

	Return Value MDownLineSpacing
	
End Function


Public Function SetDownPicture(newdownpicture As AddressOf _Picture) As Boolean

	MDownPicture := newdownpicture
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownPicture() As AddressOf _Picture

	Return Value MDownPicture
	
End Function


Public Function SetDownShadowColor(newdownshadowcolor As Long) As Boolean

	MDownShadowColor := newdownshadowcolor
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownShadowColor() As Long

	Return Value MDownShadowColor 
	
End Function


Public Function SetDownText(newdowntext As Text) As Boolean

	If GetMemorySegment(newdowntext) = _MSEG_RESOURCEDATA Then
		MDownText := newdowntext
	Else
		TextBuffer := newdowntext
		MDownText := TextBuffer
	End If

	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownText() As AddressOf Text

	Return Value MDownText
	
End Function


Public Function SetDownTextAlign(newdowntextalign As Long) As Boolean

	Select newdowntextalign
		Case _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNTOP, _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNVCENTER, _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNBOTTOM, _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNTOP, _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNVCENTER, _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNBOTTOM, _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNTOP, _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNVCENTER, _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNBOTTOM
			MDownTextAlign := newdowntextalign
			DownFormatFlags := MDownTextAlign BitOr _TEXT_WORDWRAP
			RedrawCompoundObject()
			Return Value True

		Case Else
			Return Value False

	End Select

End Function


Public Function GetDownTextAlign() As Long

	Return Value MDownTextAlign

End Function


Public Function SetDownTextOffsetX(newdowntextoffsetx As Long) As Boolean
	
	MDownTextOffsetX := newdowntextoffsetx 
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownTextOffsetX() As Long

	Return Value MDownTextOffsetX
	
End Function


Public Function SetDownTextOffsetY(newdowntextoffsety As Long) As Boolean
	
	MDownTextOffsetY := newdowntextoffsety 
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownTextOffsetY() As Long

	Return Value MDownTextOffsetY
	
End Function


Public Function SetUpColor(newupcolor As Long) As Boolean

	MUpColor := newupcolor
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpColor() As Long

	Return Value MUpColor
	
End Function


Public Function SetUpFont(newupfont As AddressOf _Font) As Boolean

	MUpFont := newupfont
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpFont() As AddressOf _Font

	Return Value MUpFont
	
End Function


Public Function SetUpFontColor(newupfontcolor As Long) As Boolean

	MUpFontColor := newupfontcolor
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpFontColor() As Long

	Return Value MUpFontColor
	
End Function


Public Function SetUpHighlightColor(newuphighlightcolor As Long) As Boolean

	MUpHighlightColor := newuphighlightcolor
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpHighlightColor() As Long

	Return Value MUpHighlightColor
	
End Function


Public Function SetUpIcon(newupicon As AddressOf _Picture) As Boolean

	MUpIcon := newupicon
	UpdateIconPosition()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpIcon() As AddressOf _Picture

	Return Value MUpIcon
	
End Function


Public Function SetUpIconAlign(newupiconalign As Long) As Boolean

	Select newupiconalign
		Case ICON_ALIGNLEFT BitOr ICON_ALIGNTOP, ICON_ALIGNLEFT BitOr ICON_ALIGNVCENTER, ICON_ALIGNLEFT BitOr ICON_ALIGNBOTTOM, ICON_ALIGNHCENTER BitOr ICON_ALIGNTOP, ICON_ALIGNHCENTER BitOr ICON_ALIGNVCENTER, ICON_ALIGNHCENTER BitOr ICON_ALIGNBOTTOM, ICON_ALIGNRIGHT BitOr ICON_ALIGNTOP, ICON_ALIGNRIGHT BitOr ICON_ALIGNVCENTER, ICON_ALIGNRIGHT BitOr ICON_ALIGNBOTTOM
			MUpIconAlign := newupiconalign
			UpdateIconPosition()
			RedrawCompoundObject()
			Return Value True

		Case Else
			Return Value False

	End Select

End Function


Public Function GetUpIconAlign() As Long

	Return Value MUpIconAlign

End Function


Public Function SetUpIconOffsetX(newupiconoffsetx As Long) As Boolean
	
	MUpIconOffsetX := newupiconoffsetx 
	UpdateIconPosition()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpIconOffsetX() As Long

	Return Value MUpIconOffsetX
	
End Function


Public Function SetUpIconOffsetY(newupiconoffsety As Long) As Boolean
	
	MUpIconOffsetY := newupiconoffsety 
	UpdateIconPosition()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpIconOffsetY() As Long

	Return Value MUpIconOffsetY
	
End Function


Public Function SetUpLineSpacing(newuplinespacing As Double) As Boolean
	
	If newuplinespacing >= 0 Then
		MUpLineSpacing := newuplinespacing
		RedrawCompoundObject()
		Return Value True
	Else
		Return Value False
	End If

End Function


Public Function GetUpLineSpacing() As Double

	Return Value MUpLineSpacing
	
End Function


Public Function SetUpPicture(newuppicture As AddressOf _Picture) As Boolean

	MUpPicture := newuppicture
	UpdateDimensions()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpPicture() As AddressOf _Picture

	Return Value MUpPicture
	
End Function


Public Function SetUpShadowColor(newupshadowcolor As Long) As Boolean

	MUpShadowColor := newupshadowcolor
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpShadowColor() As Long

	Return Value MUpShadowColor
	
End Function


Public Function SetUpText(newuptext As Text) As Boolean

	If GetMemorySegment(newuptext) = _MSEG_RESOURCEDATA Then
		MUpText := newuptext
	Else
		TextBuffer := newuptext
		MUpText := TextBuffer
	End If

	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpText() As AddressOf Text

	Return Value MUpText
	
End Function


Public Function SetUpTextAlign(newuptextalign As Long) As Boolean

	Select newuptextalign
		Case _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNTOP, _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNVCENTER, _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNBOTTOM, _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNTOP, _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNVCENTER, _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNBOTTOM, _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNTOP, _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNVCENTER, _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNBOTTOM
			MUpTextAlign := newuptextalign
			UpFormatFlags := MUpTextAlign BitOr _TEXT_WORDWRAP
			RedrawCompoundObject()
			Return Value True

		Case Else
			Return Value False
	End Select

End Function


Public Function GetUpTextAlign() As Long

	Return Value MUpTextAlign

End Function


Public Function SetUpTextOffsetX(newuptextoffsetx As Long) As Boolean
	
	MUpTextOffsetX := newuptextoffsetx 
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpTextOffsetX() As Long

	Return Value MUpTextOffsetX
	
End Function


Public Function SetUpTextOffsetY(newuptextoffsety As Long) As Boolean
	
	MUpTextOffsetY := newuptextoffsety 
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpTextOffsetY() As Long

	Return Value MUpTextOffsetY
	
End Function


Public Function SetEnabled(newenabled As Boolean) As Boolean

	MEnabled := newenabled
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True

End Function


Public Function GetEnabled() As Boolean

	Return Value MEnabled

End Function


Public Function SetIgnoreTransparentArea(newignoretransparentarea As Boolean) As Boolean

	MIgnoreTransparentArea := newignoretransparentarea
	Return Value True

End Function


Public Function GetIgnoreTransparentArea() As Boolean

	Return Value MIgnoreTransparentArea

End Function


Public Function SetObjectDimensions(newwidth As Long, newheight As Long) As Boolean

	SetSize(newwidth, newheight)
	UpdateDimensions()
	RedrawCompoundObject()
	Return Value True

End Function


Public Function GetObjectDimensions(ByRef currentwidth As Long, ByRef currentheight As Long)

	GetSize(currentwidth, currentheight)

End Function


Public Function SetObjectPosition(newx As Long, newy As Long) As Boolean
Private Var Response As Boolean

	Response := SetPosition(newx, newy)
	RedrawCompoundObject()
	Return Value Response

End Function


Public Function GetObjectPosition(ByRef currentx As Long, ByRef currenty As Long)

	GetPosition(currentx, currenty)

End Function


Public Function SetOpacity(newopacity As Byte) As Boolean

	MOpacity := newopacity
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetOpacity() As Byte

	Return Value MOpacity
	
End Function


End GraphicClass

// RadioButton
// End of object -------------------------------------------------------------------------



// Start of object -----------------------------------------------------------------------
// TwoStatePushButton

Global GraphicClass TwoStatePushButton Inherits Namespace "CUE.GraphicCollection.GenericObjectsBase.3".BaseTwoStatePushButton WithAttributes {DefaultWidth := 120, DefaultHeight := 60, ObjectCode := "OB0057-003", DesignName := "Generic", GroupName := "Buttons"}
Global Const ICON_ALIGNLEFT As Long := &H00000003	// Horizontal align left
Global Const ICON_ALIGNHCENTER As Long := &H00000002	// Horizontal align center
Global Const ICON_ALIGNRIGHT As Long :=	&H00000004	// Horizontal align right
Global Const ICON_ALIGNTOP As Long := &H00000008	// Vertical align top
Global Const ICON_ALIGNVCENTER As Long := &H00000010	// Vertical align center
Global Const ICON_ALIGNBOTTOM As Long := &H00000020	// Vertical align bottom

Global Const BUTTON_COLOR As Long := &HFFC0C0C0	// 3D Button face color
Global Const BUTTON_HIGHLIGHT_COLOR As Long := &HFFFFFFFF	// 3D Button highlight color
Global Const BUTTON_SHADOW_COLOR As Long :=	_COLOR_GREY	// 3D Button shadow color
// Appearance Property Group
Protected Property AspectRatioMaximum As Double := 10.000 WithAttributes {PropertyGroup := "Appearance"}
Protected Property AspectRatioMinimum As Double := 1.000 WithAttributes {PropertyGroup := "Appearance"}
Protected Property BevelWidth As Long := 4 WithAttributes {PropertyGroup := "Appearance"}
Protected Property ConstrainProportion As Boolean := False WithAttributes {PropertyGroup := "Appearance"}
Protected Property Opacity As Byte := 255 WithAttributes {PropertyGroup := "Appearance", EditMode := "opacity"}
Protected Property SmartScaling As Boolean := False WithAttributes {PropertyGroup := "Appearance"}

// Behavior Property Group
Protected Property Enabled As Boolean := True WithAttributes {PropertyGroup := "Behavior", EditMode := "Boolean; 'Yes' := True, 'No' := False"}
Protected Property IgnoreTransparentArea As Boolean := False WithAttributes {PropertyGroup := "Behavior", EditMode := "Boolean; 'Yes' := True, 'No' := False"}

// Behavior Property Group
Protected Property DefaultState As Boolean := False WithAttributes {PropertyGroup := "Behavior", EditMode := "Enum; 'Down' := True, 'Up' := False"}

// Up Property Group
Protected Property UpColor As Long := BUTTON_COLOR WithAttributes {PropertyGroup := "Up", EditMode := "color"}
Protected Property UpFont As AddressOf _Font := fntDefault16 WithAttributes {PropertyGroup := "Up", EditMode := "font"}
Protected Property UpFontColor As Long := _COLOR_BLACK WithAttributes {PropertyGroup := "Up", EditMode := "color"}
Protected Property UpHighlightColor As Long := BUTTON_HIGHLIGHT_COLOR WithAttributes {PropertyGroup := "Up", EditMode := "color"}
Protected Property UpIcon As AddressOf _Picture := Nothing WithAttributes {PropertyGroup := "Up"}
Protected Property UpIconAlign As Long := ICON_ALIGNHCENTER BitOr ICON_ALIGNVCENTER WithAttributes {PropertyGroup := "Up", EditMode := "ENUM; 'Left-Top' := &H09, 'Left-Middle' := &H11, 'Left-Bottom' := &H21, 'Center-Top' := &H0A, 'Center-Middle' := &H12, 'Center-Bottom' := &H22, 'Right-Top' := &H0C, 'Right-Middle' := &H14, 'Right-Bottom' := &H24"}
Protected Property UpIconOffsetX As Long := 0 WithAttributes {PropertyGroup := "Up"}
Protected Property UpIconOffsetY As Long := 0 WithAttributes {PropertyGroup := "Up"}
Protected Property UpLineSpacing As Double := 1.2 WithAttributes {PropertyGroup := "Up"}
Protected Property UpPicture As AddressOf _Picture := Nothing WithAttributes {PropertyGroup := "Up"}
Protected Property UpShadowColor As Long := BUTTON_SHADOW_COLOR WithAttributes {PropertyGroup := "Up", EditMode := "color"}
Protected Property UpText As AddressOf Text := txtCaption WithAttributes {PropertyGroup := "Up"}
Protected Property UpTextAlign As Long := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNVCENTER WithAttributes {PropertyGroup := "Up", EditMode := "ENUM; 'Left-Top' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNTOP, 'Left-Middle' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNVCENTER, 'Left-Bottom' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNBOTTOM, 'Center-Top' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNTOP, 'Center-Middle' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNVCENTER, 'Center-Bottom' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNBOTTOM, 'Right-Top' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNTOP, 'Right-Middle' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNVCENTER, 'Right-Bottom' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNBOTTOM"}
Protected Property UpTextOffsetX As Long := 0 WithAttributes {PropertyGroup := "Up"}
Protected Property UpTextOffsetY As Long := 0 WithAttributes {PropertyGroup := "Up"}

// Down Property Group
Protected Property DownColor As Long := UpColor WithAttributes {PropertyGroup := "Down", EditMode := "color"}
Protected Property DownFont As AddressOf _Font := UpFont WithAttributes {PropertyGroup := "Down", EditMode := "font"}
Protected Property DownFontColor As Long := UpFontColor WithAttributes {PropertyGroup := "Down", EditMode := "color"}
Protected Property DownHighlightColor As Long := UpHighlightColor WithAttributes {PropertyGroup := "Down", EditMode := "color"}
Protected Property DownIcon As AddressOf _Picture := UpIcon WithAttributes {PropertyGroup := "Down"}
Protected Property DownIconAlign As Long := UpIconAlign WithAttributes {PropertyGroup := "Down", EditMode := "ENUM; 'Left-Top' := &H09, 'Left-Middle' := &H11, 'Left-Bottom' := &H21, 'Center-Top' := &H0A, 'Center-Middle' := &H12, 'Center-Bottom' := &H22, 'Right-Top' := &H0C, 'Right-Middle' := &H14, 'Right-Bottom' := &H24"}
Protected Property DownIconOffsetX As Long := UpIconOffsetX WithAttributes {PropertyGroup := "Down"}
Protected Property DownIconOffsetY As Long := UpIconOffsetY WithAttributes {PropertyGroup := "Down"}
Protected Property DownLineSpacing As Double := UpLineSpacing WithAttributes {PropertyGroup := "Down"}
Protected Property DownPicture As AddressOf _Picture := UpPicture WithAttributes {PropertyGroup := "Down"}
Protected Property DownShadowColor As Long := UpShadowColor WithAttributes {PropertyGroup := "Down", EditMode := "color"}
Protected Property DownText As AddressOf Text := UpText WithAttributes {PropertyGroup := "Down"}
Protected Property DownTextAlign As Long := UpTextAlign WithAttributes {PropertyGroup := "Down", EditMode := "ENUM; 'Left-Top' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNTOP, 'Left-Middle' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNVCENTER, 'Left-Bottom' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNBOTTOM, 'Center-Top' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNTOP, 'Center-Middle' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNVCENTER, 'Center-Bottom' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNBOTTOM, 'Right-Top' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNTOP, 'Right-Middle' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNVCENTER, 'Right-Bottom' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNBOTTOM"}
Protected Property DownTextOffsetX As Long := UpTextOffsetX WithAttributes {PropertyGroup := "Down"}
Protected Property DownTextOffsetY As Long := UpTextOffsetY WithAttributes {PropertyGroup := "Down"}

Protected Function GetProperty()
	MDefaultState			:= DefaultState
	
	MAspectRatioMaximum		:= AspectRatioMaximum
	MAspectRatioMinimum		:= AspectRatioMinimum
	MBevelWidth				:= BevelWidth
	MConstrainProportion	:= ConstrainProportion
	MOpacity				:= Opacity
	MSmartScaling			:= SmartScaling
	MEnabled				:= Enabled
	MIgnoreTransparentArea	:= IgnoreTransparentArea
	MUpColor				:= UpColor
	MUpFont					:= UpFont
	MUpFontColor			:= UpFontColor
	MUpHighlightColor		:= UpHighlightColor
	MUpIcon					:= UpIcon
	MUpIconAlign			:= UpIconAlign
	MUpIconOffsetX			:= UpIconOffsetX
	MUpIconOffsetY			:= UpIconOffsetY
	MUpLineSpacing			:= UpLineSpacing
	MUpPicture				:= UpPicture
	MUpShadowColor			:= UpShadowColor
	MUpText					:= UpText
	MUpTextAlign			:= UpTextAlign
	MUpTextOffsetX			:= UpTextOffsetX
	MUpTextOffsetY			:= UpTextOffsetY
	MDownColor				:= DownColor
	MDownFont				:= DownFont
	MDownFontColor			:= DownFontColor
	MDownHighlightColor		:= DownHighlightColor
	MDownIcon				:= DownIcon
	MDownIconAlign			:= DownIconAlign
	MDownIconOffsetX		:= DownIconOffsetX
	MDownIconOffsetY		:= DownIconOffsetY
	MDownLineSpacing		:= DownLineSpacing
	MDownPicture			:= DownPicture
	MDownShadowColor		:= DownShadowColor
	MDownText				:= DownText
	MDownTextAlign			:= DownTextAlign
	MDownTextOffsetX		:= DownTextOffsetX
	MDownTextOffsetY		:= DownTextOffsetY
End Function

Private Function Init()
	GetProperty()
	IsPressed := DefaultState
	UpFormatFlags := MUpTextAlign BitOr _TEXT_WORDWRAP
	DownFormatFlags := MDownTextAlign BitOr _TEXT_WORDWRAP
	UpdateDimensions()
	UpdateDrawColors()
	DownOffset := BevelWidthDraw / 2
	RedrawCompoundObject()	
End Function


Public Function SetAspectRatioMaximum(newaspectratiomaximum As Double) As Boolean

	If newaspectratiomaximum >= MAspectRatioMinimum Then
		MAspectRatioMaximum := newaspectratiomaximum
		UpdateDimensions()
		RedrawCompoundObject()
		Return Value True
	Else
		Return Value False
	End If
	
End Function


Public Function GetAspectRatioMaximum() As Double

	Return Value MAspectRatioMaximum
	
End Function


Public Function SetAspectRatioMinimum(newaspectratiominimum As Double) As Boolean

	If newaspectratiominimum <= MAspectRatioMaximum Then
		MAspectRatioMinimum := newaspectratiominimum
		UpdateDimensions()
		RedrawCompoundObject()
		Return Value True
	Else
		Return Value False
	End If
	
End Function


Public Function GetAspectRatioMinimum() As Double

	Return Value MAspectRatioMinimum
	
End Function


Public Function SetBevelWidth(newbevelwidth As Long) As Boolean

	If newbevelwidth <= Min(ObjectWidth / 2, ObjectHeight / 2) Then
		MBevelWidth := newbevelwidth
		BevelWidthDraw := MBevelWidth
		RedrawCompoundObject()
		Return Value True
	Else
		Return Value False
	End If

End Function


Public Function GetBevelWidth() As Long

	Return Value MBevelWidth

End Function


Public Function SetConstrainProportion(newconstrainproportion As Boolean) As Boolean

	MConstrainProportion := newconstrainproportion
	UpdateDimensions()
	RedrawCompoundObject()
	Return Value True

End Function


Public Function GetConstrainProportion() As Boolean

	Return Value MConstrainProportion

End Function


Public Function SetSmartScaling(newsmartscaling As Boolean) As Boolean

	MSmartScaling := newsmartscaling
	UpdateDimensions()
	RedrawCompoundObject()
	Return Value True

End Function


Public Function GetSmartScaling() As Boolean

	Return Value MSmartScaling

End Function


Public Function SetDownColor(newdowncolor As Long) As Boolean

	MDownColor := newdowncolor
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownColor() As Long

	Return Value MDownColor
	
End Function


Public Function SetDownFont(newdownfont As AddressOf _Font) As Boolean

	MDownFont := newdownfont
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownFont() As AddressOf _Font

	Return Value MDownFont
	
End Function


Public Function SetDownFontColor(newdownfontcolor As Long) As Boolean

	MDownFontColor := newdownfontcolor
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownFontColor() As Long

	Return Value MDownFontColor
	
End Function


Public Function SetDownHighlightColor(newdownhighlightcolor As Long) As Boolean

	MDownHighlightColor := newdownhighlightcolor
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownHighlightColor() As Long

	Return Value MDownHighlightColor
	
End Function


Public Function SetDownIcon(newdownicon As AddressOf _Picture) As Boolean

	MDownIcon := newdownicon
	UpdateIconPosition()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownIcon() As AddressOf _Picture

	Return Value MDownIcon
	
End Function


Public Function SetDownIconAlign(newdowniconalign As Long) As Boolean

	Select newdowniconalign
		Case ICON_ALIGNLEFT BitOr ICON_ALIGNTOP, ICON_ALIGNLEFT BitOr ICON_ALIGNVCENTER, ICON_ALIGNLEFT BitOr ICON_ALIGNBOTTOM, ICON_ALIGNHCENTER BitOr ICON_ALIGNTOP, ICON_ALIGNHCENTER BitOr ICON_ALIGNVCENTER, ICON_ALIGNHCENTER BitOr ICON_ALIGNBOTTOM, ICON_ALIGNRIGHT BitOr ICON_ALIGNTOP, ICON_ALIGNRIGHT BitOr ICON_ALIGNVCENTER, ICON_ALIGNRIGHT BitOr ICON_ALIGNBOTTOM
			MDownIconAlign := newdowniconalign
			UpdateIconPosition()
			RedrawCompoundObject()
			Return Value True

		Case Else
			Return Value False

	End Select

End Function


Public Function GetDownIconAlign() As Long

	Return Value MDownIconAlign

End Function


Public Function SetDownIconOffsetX(newdowniconoffsetx As Long) As Boolean
	
	MDownIconOffsetX := newdowniconoffsetx 
	UpdateIconPosition()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownIconOffsetX() As Long

	Return Value MDownIconOffsetX
	
End Function


Public Function SetDownIconOffsetY(newdowniconoffsety As Long) As Boolean
	
	MDownIconOffsetY := newdowniconoffsety 
	UpdateIconPosition()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownIconOffsetY() As Long

	Return Value MDownIconOffsetY
	
End Function


Public Function SetDownLineSpacing(newdownlinespacing As Double) As Boolean
	
	If newdownlinespacing >= 0 Then
		MDownLineSpacing := newdownlinespacing
		RedrawCompoundObject()
		Return Value True
	Else
		Return Value False
	End If

End Function


Public Function GetDownLineSpacing() As Double

	Return Value MDownLineSpacing
	
End Function


Public Function SetDownPicture(newdownpicture As AddressOf _Picture) As Boolean

	MDownPicture := newdownpicture
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownPicture() As AddressOf _Picture

	Return Value MDownPicture
	
End Function


Public Function SetDownShadowColor(newdownshadowcolor As Long) As Boolean

	MDownShadowColor := newdownshadowcolor
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownShadowColor() As Long

	Return Value MDownShadowColor 
	
End Function


Public Function SetDownText(newdowntext As Text) As Boolean

	If GetMemorySegment(newdowntext) = _MSEG_RESOURCEDATA Then
		MDownText := newdowntext
	Else
		TextBuffer := newdowntext
		MDownText := TextBuffer
	End If

	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownText() As AddressOf Text

	Return Value MDownText
	
End Function


Public Function SetDownTextAlign(newdowntextalign As Long) As Boolean

	Select newdowntextalign
		Case _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNTOP, _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNVCENTER, _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNBOTTOM, _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNTOP, _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNVCENTER, _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNBOTTOM, _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNTOP, _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNVCENTER, _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNBOTTOM
			MDownTextAlign := newdowntextalign
			DownFormatFlags := MDownTextAlign BitOr _TEXT_WORDWRAP
			RedrawCompoundObject()
			Return Value True

		Case Else
			Return Value False

	End Select

End Function


Public Function GetDownTextAlign() As Long

	Return Value MDownTextAlign

End Function


Public Function SetDownTextOffsetX(newdowntextoffsetx As Long) As Boolean
	
	MDownTextOffsetX := newdowntextoffsetx 
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownTextOffsetX() As Long

	Return Value MDownTextOffsetX
	
End Function


Public Function SetDownTextOffsetY(newdowntextoffsety As Long) As Boolean
	
	MDownTextOffsetY := newdowntextoffsety 
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetDownTextOffsetY() As Long

	Return Value MDownTextOffsetY
	
End Function


Public Function SetUpColor(newupcolor As Long) As Boolean

	MUpColor := newupcolor
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpColor() As Long

	Return Value MUpColor
	
End Function


Public Function SetUpFont(newupfont As AddressOf _Font) As Boolean

	MUpFont := newupfont
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpFont() As AddressOf _Font

	Return Value MUpFont
	
End Function


Public Function SetUpFontColor(newupfontcolor As Long) As Boolean

	MUpFontColor := newupfontcolor
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpFontColor() As Long

	Return Value MUpFontColor
	
End Function


Public Function SetUpHighlightColor(newuphighlightcolor As Long) As Boolean

	MUpHighlightColor := newuphighlightcolor
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpHighlightColor() As Long

	Return Value MUpHighlightColor
	
End Function


Public Function SetUpIcon(newupicon As AddressOf _Picture) As Boolean

	MUpIcon := newupicon
	UpdateIconPosition()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpIcon() As AddressOf _Picture

	Return Value MUpIcon
	
End Function


Public Function SetUpIconAlign(newupiconalign As Long) As Boolean

	Select newupiconalign
		Case ICON_ALIGNLEFT BitOr ICON_ALIGNTOP, ICON_ALIGNLEFT BitOr ICON_ALIGNVCENTER, ICON_ALIGNLEFT BitOr ICON_ALIGNBOTTOM, ICON_ALIGNHCENTER BitOr ICON_ALIGNTOP, ICON_ALIGNHCENTER BitOr ICON_ALIGNVCENTER, ICON_ALIGNHCENTER BitOr ICON_ALIGNBOTTOM, ICON_ALIGNRIGHT BitOr ICON_ALIGNTOP, ICON_ALIGNRIGHT BitOr ICON_ALIGNVCENTER, ICON_ALIGNRIGHT BitOr ICON_ALIGNBOTTOM
			MUpIconAlign := newupiconalign
			UpdateIconPosition()
			RedrawCompoundObject()
			Return Value True

		Case Else
			Return Value False

	End Select

End Function


Public Function GetUpIconAlign() As Long

	Return Value MUpIconAlign

End Function


Public Function SetUpIconOffsetX(newupiconoffsetx As Long) As Boolean
	
	MUpIconOffsetX := newupiconoffsetx 
	UpdateIconPosition()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpIconOffsetX() As Long

	Return Value MUpIconOffsetX
	
End Function


Public Function SetUpIconOffsetY(newupiconoffsety As Long) As Boolean
	
	MUpIconOffsetY := newupiconoffsety 
	UpdateIconPosition()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpIconOffsetY() As Long

	Return Value MUpIconOffsetY
	
End Function


Public Function SetUpLineSpacing(newuplinespacing As Double) As Boolean
	
	If newuplinespacing >= 0 Then
		MUpLineSpacing := newuplinespacing
		RedrawCompoundObject()
		Return Value True
	Else
		Return Value False
	End If

End Function


Public Function GetUpLineSpacing() As Double

	Return Value MUpLineSpacing
	
End Function


Public Function SetUpPicture(newuppicture As AddressOf _Picture) As Boolean

	MUpPicture := newuppicture
	UpdateDimensions()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpPicture() As AddressOf _Picture

	Return Value MUpPicture
	
End Function


Public Function SetUpShadowColor(newupshadowcolor As Long) As Boolean

	MUpShadowColor := newupshadowcolor
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpShadowColor() As Long

	Return Value MUpShadowColor
	
End Function


Public Function SetUpText(newuptext As Text) As Boolean

	If GetMemorySegment(newuptext) = _MSEG_RESOURCEDATA Then
		MUpText := newuptext
	Else
		TextBuffer := newuptext
		MUpText := TextBuffer
	End If

	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpText() As AddressOf Text

	Return Value MUpText
	
End Function


Public Function SetUpTextAlign(newuptextalign As Long) As Boolean

	Select newuptextalign
		Case _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNTOP, _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNVCENTER, _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNBOTTOM, _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNTOP, _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNVCENTER, _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNBOTTOM, _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNTOP, _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNVCENTER, _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNBOTTOM
			MUpTextAlign := newuptextalign
			UpFormatFlags := MUpTextAlign BitOr _TEXT_WORDWRAP
			RedrawCompoundObject()
			Return Value True

		Case Else
			Return Value False
	End Select

End Function


Public Function GetUpTextAlign() As Long

	Return Value MUpTextAlign

End Function


Public Function SetUpTextOffsetX(newuptextoffsetx As Long) As Boolean
	
	MUpTextOffsetX := newuptextoffsetx 
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpTextOffsetX() As Long

	Return Value MUpTextOffsetX
	
End Function


Public Function SetUpTextOffsetY(newuptextoffsety As Long) As Boolean
	
	MUpTextOffsetY := newuptextoffsety 
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetUpTextOffsetY() As Long

	Return Value MUpTextOffsetY
	
End Function


Public Function SetEnabled(newenabled As Boolean) As Boolean

	MEnabled := newenabled
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True

End Function


Public Function GetEnabled() As Boolean

	Return Value MEnabled

End Function


Public Function SetIgnoreTransparentArea(newignoretransparentarea As Boolean) As Boolean

	MIgnoreTransparentArea := newignoretransparentarea
	Return Value True

End Function


Public Function GetIgnoreTransparentArea() As Boolean

	Return Value MIgnoreTransparentArea

End Function


Public Function SetObjectDimensions(newwidth As Long, newheight As Long) As Boolean

	SetSize(newwidth, newheight)
	UpdateDimensions()
	RedrawCompoundObject()
	Return Value True

End Function


Public Function GetObjectDimensions(ByRef currentwidth As Long, ByRef currentheight As Long)

	GetSize(currentwidth, currentheight)

End Function


Public Function SetObjectPosition(newx As Long, newy As Long) As Boolean
Private Var Response As Boolean

	Response := SetPosition(newx, newy)
	RedrawCompoundObject()
	Return Value Response

End Function


Public Function GetObjectPosition(ByRef currentx As Long, ByRef currenty As Long)

	GetPosition(currentx, currenty)

End Function


Public Function SetOpacity(newopacity As Byte) As Boolean

	MOpacity := newopacity
	UpdateDrawColors()
	RedrawCompoundObject()
	Return Value True
	
End Function


Public Function GetOpacity() As Byte

	Return Value MOpacity
	
End Function




End GraphicClass

// TwoStatePushButton
// End of object -------------------------------------------------------------------------

// Buttons
// End of group ******************************************************************* 



// Start of group ***************************************************************** 
// PictureBox
// Revised: 8.2.2012
// Author: Miroslav Pechl√°t


// Start of object -----------------------------------------------------------------------
// PictureBox

Global GraphicClass PictureBox Inherits Namespace "CUE.GraphicCollection.GenericObjectsBase.3".BasePictureBox WithAttributes {DisplayName := "PictureBox", ObjectCode := "OB0009-003", DefaultWidth := 160, DefaultHeight := 120, DesignName := "Generic", GroupName := "Media"}

// Behavior Property Group
Protected Property Events As Boolean := False WithAttributes {PropertyGroup := "Behavior", EditMode := "Boolean; 'Yes' := True, 'No' := False"}

// Appearance Property Group
Protected Property Align As Long := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNTOP WithAttributes {PropertyGroup := "Appearance", EditMode := "ENUM; 'Left-Top' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNTOP, 'Left-Middle' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNVCENTER, 'Left-Bottom' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNBOTTOM, 'Center-Top' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNTOP, 'Center-Middle' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNVCENTER, 'Center-Bottom' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNBOTTOM, 'Right-Top' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNTOP, 'Right-Middle' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNVCENTER, 'Right-Bottom' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNBOTTOM"}
Protected Property Fitting As Long := 0 WithAttributes {PropertyGroup := "Appearance", EditMode := "ENUM; 'None' := 0, 'Fit Object to Content' := 1, 'Fit Content to Object' := 2, 'Center Content' := 3, 'Fit Content Proportionally' := 4, 'Fill Object Proportionally' := 5"}
Protected Property Opacity As Byte := 255 WithAttributes {PropertyGroup := "Appearance", EditMode := "opacity"}
Protected Property Picture As AddressOf _Picture := Nothing WithAttributes {PropertyGroup := "Appearance"}
Protected Property PictureOffsetX As Long := 0 WithAttributes {PropertyGroup := "Appearance"}
Protected Property PictureOffsetY As Long := 0 WithAttributes {PropertyGroup := "Appearance"}

Protected Function GetProperty()
	MEvents			:= Events
	MAlign			:= Align
	MFitting		:= Fitting
	MOpacity		:= Opacity
	MPicture		:= Picture
	MPictureOffsetX	:= PictureOffsetX
	MPictureOffsetY	:= PictureOffsetY
End Function

Private Function Init()
	GetProperty()
	SetDrawParameters()
End Function

End GraphicClass

// PictureBox
// End of object -------------------------------------------------------------------------

// PictureBox
// End of group ******************************************************************* 



// Start of group ***************************************************************** 
// AnimationBox
// Revised: 17.4.2012
// Author: Miroslav Pechl√°t


// Start of object -----------------------------------------------------------------------
// AnimationBox

Global GraphicClass AnimationBox Inherits Namespace "CUE.GraphicCollection.GenericObjectsBase.3".BaseAnimationBox  WithAttributes {DisplayName := "AnimationBox", ObjectCode := "OB0029-003", DefaultWidth := 160, DefaultHeight := 120, DesignName := "Generic", GroupName := "Media"}

// Appearance Property Group
Protected Property Animation As AddressOf _Animation := Nothing WithAttributes {PropertyGroup := "Appearance", EditMode := "_Animation"}
Protected Property Fitting As Long := 0 WithAttributes {PropertyGroup := "Appearance", EditMode := "ENUM; 'None' := 0, 'Fit Object to Content' := 1, 'Fit Content to Object' := 2, 'Center Content' := 3, 'Fit Content Proportionally' := 4, 'Fill Object Proportionally' := 5"}
Protected Property Opacity As Byte := 255 WithAttributes {PropertyGroup := "Appearance", EditMode := "opacity"}

// Behavior Property Group
Protected Property Events As Boolean := False WithAttributes {PropertyGroup := "Behavior", EditMode := "Boolean; 'Yes' := True, 'No' := False"}
Protected Property FrameNumber As Long := 1 WithAttributes {PropertyGroup := "Behavior"}
Protected Property FrameRate As Double := -1 WithAttributes {PropertyGroup := "Behavior"}
Protected Property Play As Boolean := True WithAttributes {PropertyGroup := "Behavior"}
Protected Property Repeat As Boolean := True WithAttributes {PropertyGroup := "Behavior"}

Protected Function GetProperty()
	MAnimation		:= Animation
	MFitting		:= Fitting
	MOpacity		:= Opacity
	MEvents			:= Events
	MFrameNumber	:= FrameNumber
	MFrameRate		:= FrameRate
	MPlay			:= Play
	MRepeat			:= Repeat
End Function

Private Function Init()
	GetProperty()
	SetDrawParameters()
End Function

End GraphicClass

// AnimationBox
// End of object -------------------------------------------------------------------------

// AnimationBox
// End of group ******************************************************************* 



// Start of group ***************************************************************** 
// AlphanumericDate
// Revised: 27.3.2012
// Author: Miroslav Pechl√°t


// Start of object -----------------------------------------------------------------------
// AlphanumericDate

Public GraphicClass AlphanumericDate Inherits Namespace "CUE.GraphicCollection.GenericObjectsBase.3".BaseAlphanumericDate WithAttributes {ObjectCode := "OB0046-003", DefaultWidth := 100, DefaultHeight := 40, DesignName := "Generic", GroupName := "Date and Time"}

// Behavior Property Group
Protected Property Events As Boolean := False WithAttributes {PropertyGroup := "Behavior", EditMode := "Boolean; 'Yes' := True, 'No' := False"}

// Appearance Property Group
Protected Property Align As Long := _TEXT_ALIGNHCENTER WithAttributes {PropertyGroup := "Appearance", EditMode := "ENUM; 'Left' := _TEXT_ALIGNLEFT, 'Center' := _TEXT_ALIGNHCENTER, 'Right' := _TEXT_ALIGNRIGHT"}
Protected Property Font As AddressOf _Font := fntDefault16 WithAttributes {PropertyGroup := "Appearance", EditMode := "font"}
Protected Property Font3DEffect As Boolean := False WithAttributes {PropertyGroup := "Appearance"}
Protected Property FontColor As Long := _COLOR_BLACK WithAttributes {PropertyGroup := "Appearance", EditMode := "color"}
Protected Property Format As Long := 1 WithAttributes {PropertyGroup := "Appearance", EditMode := "ENUM; 'dddd<nl>d. MMMM yyyy' := 1, 'd.M.yyyy' := 2, 'd-M-yy' := 3, 'yyyy-MM-dd' := 4, 'yyyy-M-d' := 5, 'yy-M-d' := 6,'MMMM d yyyy' := 7, 'd MMMM yyyy' := 8, 'dsuf yyyy' := 9" }
Protected Property Opacity As Byte := 255 WithAttributes {PropertyGroup := "Appearance", EditMode := "opacity"}

Protected Function GetProperty()
	MEvents			:= Events
	MAlign			:= Align
	MFont			:= Font
	MFont3DEffect	:= Font3DEffect
	MFontColor		:= FontColor
	MFormat			:= Format
	MOpacity		:= Opacity
End Function

Protected Function Init()
	GetProperty()
	
	Month[1] := txtJanuary
	Month[2] := txtFebruary
	Month[3] := txtMarch
	Month[4] := txtApril
	Month[5] := txtMay
	Month[6] := txtJune
	Month[7] := txtJuly
	Month[8] := txtAugust
	Month[9] := txtSeptember
	Month[10] := txtOctober
	Month[11] := txtNovember
	Month[12] := txtDecember
	
	DayOfTheWeek[1] := txtMonday
	DayOfTheWeek[2] := txtTuesday
	DayOfTheWeek[3] := txtWednesday
	DayOfTheWeek[4] := txtThursday
	DayOfTheWeek[5] := txtFriday
	DayOfTheWeek[6] := txtSaturday
	DayOfTheWeek[7] := txtSunday
	
	SetDrawOpacity()
	UpdateCalendar()
	StartTimer(1, :1, _TIMER_PERIODIC BitOr _TIMER_PAUSEIFHIDDEN)
End Function

End GraphicClass

// AlphanumericDate
// End of object -------------------------------------------------------------------------

// AlphanumericDate
// End of group ******************************************************************* 



// Start of group ***************************************************************** 
// DigitalTime
// Revised: 9.6.2011
// Author: Miroslav Pechl√°t


// Start of object -----------------------------------------------------------------------
// DigitalTime

Public GraphicClass DigitalTime Inherits Namespace "CUE.GraphicCollection.GenericObjectsBase.3".BaseDigitalTime WithAttributes {ObjectCode := "OB0047-003", DefaultWidth := 100, DefaultHeight := 40, DesignName := "Generic", GroupName := "Date and Time"}

// Behavior Property Group
Protected Property Events As Boolean := False WithAttributes {PropertyGroup := "Behavior", EditMode := "Boolean; 'Yes' := True, 'No' := False"}

// Appearance Property Group
Protected Property Align As Long := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNVCENTER WithAttributes {PropertyGroup := "Appearance", EditMode := "ENUM; 'Left-Top' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNTOP, 'Left-Middle' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNVCENTER, 'Left-Bottom' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNBOTTOM, 'Center-Top' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNTOP, 'Center-Middle' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNVCENTER, 'Center-Bottom' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNBOTTOM, 'Right-Top' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNTOP, 'Right-Middle' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNVCENTER, 'Right-Bottom' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNBOTTOM"}
Protected Property Font As AddressOf _Font := fntDefault16 WithAttributes {PropertyGroup := "Appearance", EditMode := "font"}
Protected Property Font3DEffect As Boolean := False WithAttributes {PropertyGroup := "Appearance"}
Protected Property FontColor As Long := _COLOR_BLACK WithAttributes {PropertyGroup := "Appearance", EditMode := "color"}
Protected Property Format As Long := 1 WithAttributes {PropertyGroup := "Appearance", EditMode := "ENUM; 'H:mm' := 1, 'HH:mm' := 2, 'h:mm tt' := 3, 'H.mm' := 4, 'H:mm:ss' := 5, 'HH:mm:ss' := 6, 'h:mm:ss tt' := 7, 'H.mm.ss' := 8"}
Protected Property Opacity As Byte := 255 WithAttributes {PropertyGroup := "Appearance", EditMode := "opacity"}

Protected Function GetProperty()
	MEvents			:= Events
	MAlign			:= Align
	MFont			:= Font
	MFont3DEffect	:= Font3DEffect
	MFontColor		:= FontColor
	MFormat			:= Format
	MOpacity		:= Opacity
End Function

Protected Function InitObject()
End Function

Protected Function Init()
	InitObject()
	GetProperty()
	SetDrawOpacity()
	UpdateDigitalTime()
	StartTimer(1, :1, _TIMER_PERIODIC BitOr _TIMER_PAUSEIFHIDDEN)
End Function

End GraphicClass

// DigitalTime
// End of object -------------------------------------------------------------------------

// DigitalTime
// End of group ******************************************************************* 



// Start of group ***************************************************************** 
// Rectangle
// Revised: 9.6.2011
// Author: Miroslav Pechl√°t


// Start of object -----------------------------------------------------------------------
// Rectangle

Global GraphicClass Rectangle Inherits Namespace "CUE.GraphicCollection.GenericObjectsBase.3".BaseRectangle WithAttributes {ObjectCode := "OB0058-003", DefaultWidth := 160, DefaultHeight := 120, DesignName := "Generic", GroupName := "Shapes"}

// Behavior Property Group
Protected Property Events As Boolean := False WithAttributes {PropertyGroup := "Behavior", EditMode := "Boolean; 'Yes' := True, 'No' := False"}

// Appearance Property Group
Protected Property FillColor As Long := _COLOR_GREY BitAnd &H00FFFFFF WithAttributes {PropertyGroup := "Appearance", EditMode := "color"}
Protected Property LineWeight As Long := 1 WithAttributes {PropertyGroup := "Appearance"}
Protected Property Opacity As Byte := 255 WithAttributes {PropertyGroup := "Appearance", EditMode := "opacity"}
Protected Property OutlineColor As Long := _COLOR_BLACK WithAttributes {PropertyGroup := "Appearance", EditMode := "color"}

Protected Function GetProperty()
	MEvents			:= Events
	MFillColor		:= FillColor
	MLineWeight		:= LineWeight
	MOpacity		:= Opacity
	MOutlineColor	:= OutlineColor
End Function

Protected Function Init()
	GetProperty()
	GetSize(ObjectWidth, ObjectHeight)
	SetDrawOpacity()
	SetDrawParameters()
End Function

End GraphicClass

// Rectangle
// End of object -------------------------------------------------------------------------

// Rectangle
// End of group ******************************************************************* 



// Start of group ***************************************************************** 
// StaticTexts
// Revised: 29.11.2012
// Author: Miroslav Pech√°t

// Start of object -----------------------------------------------------------------------
// StaticText

Global GraphicClass StaticText Inherits Namespace "CUE.GraphicCollection.GenericObjectsBase.3".BaseStaticText WithAttributes {ObjectCode := "AB0009-002", DefaultWidth := 160, DefaultHeight := 40, DesignName := "Generic", GroupName := "Labels"}

// Behavior Property Group
Protected Property Events As Boolean := False WithAttributes {PropertyGroup := "Behavior", EditMode := "Boolean; 'Yes' := True, 'No' := False"}

// Appearance Property Group
Protected Property Opacity As Byte := 255 WithAttributes {PropertyGroup := "Appearance", EditMode := "opacity"}

// Content Property Group
Protected Property Align As Long := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNVCENTER WithAttributes {PropertyGroup := "Content", EditMode := "ENUM; 'Left-Top' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNTOP, 'Left-Middle' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNVCENTER, 'Left-Bottom' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNBOTTOM, 'Center-Top' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNTOP, 'Center-Middle' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNVCENTER, 'Center-Bottom' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNBOTTOM, 'Right-Top' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNTOP, 'Right-Middle' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNVCENTER, 'Right-Bottom' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNBOTTOM"}
Protected Property Color As Long := _COLOR_BLACK WithAttributes {PropertyGroup := "Content", EditMode := "color"}
Protected Property Font As AddressOf _Font := fntDefault16 WithAttributes {PropertyGroup := "Content", EditMode := "font"}
Protected Property LineSpacing As Double := 1.2 WithAttributes {PropertyGroup := "Content"}
Protected Property stxText As AddressOf Text := txtText WithAttributes {PropertyGroup := "Content", DisplayName := "Text"}
Protected Property TextOffsetX As Long := 0 WithAttributes {PropertyGroup := "Content"}
Protected Property TextOffsetY As Long := 0 WithAttributes {PropertyGroup := "Content"}

Protected Function GetProperty()
	MEvents			:= Events
	MOpacity		:= Opacity
	MAlign			:= Align
	MColor			:= Color
	MFont			:= Font
	MLineSpacing	:= LineSpacing
	MstxText		:= stxText
	MTextOffsetX	:= TextOffsetX
	MTextOffsetY	:= TextOffsetY
End Function

Protected Function Init()
	GetProperty()
	FormatFlags := Align BitOr _TEXT_WORDWRAP
	ColorDraw := SetColorComponentOpacity(Color, GetColorComponentOpacity(Color) * Opacity / 255)
End Function

End GraphicClass

// StaticText
// End of object -------------------------------------------------------------------------

// StaticTexts
// End of group ******************************************************************* 


// Start of group ***************************************************************** 
// DragSource and DropDestination
// Revised: 17.4.2012 by Miroslav Pechl√°t
// Author: Jaroslav Dibitanzl, Miroslav Pechl√°t
// Credits: Dimitri Kroon for thorough testing


// Start of object -----------------------------------------------------------------------
// DragSource

Private Const MSG_SOURCE_MOVE As Long := 1
Private Const MSG_SOURCE_REQUEST As Long := 2
Private Const MSG_SOURCE_DATA As Long := 3
Private Const RETURN_PERIOD As Time := :0.05
Private Const DEFAULT_BACKGROUND_COLOR As Long := &H00000000

//---------------------------------------------------------------------------------------------

Public GraphicClass DragSource Inherits Namespace "CUE.GraphicCollection.GenericObjectsBase.3".BaseDragSource WithAttributes {ObjectCode := "OB0061-003", DefaultWidth := 120, DefaultHeight := 80, DesignName := "Generic", GroupName := "Drag and Drop"}

// Behavior Property Group
Protected Property ObjectID As Long := 0 WithAttributes {PropertyGroup := "Behavior"}

// Appearance Property Group
Protected Property BackgroundColor As Long := DEFAULT_BACKGROUND_COLOR WithAttributes {PropertyGroup := "Appearance", EditMode := "color"}
Protected Property Opacity As Byte := 255 WithAttributes {PropertyGroup := "Appearance", Displayname := "Opacity", EditMode := "opacity"}

// Picture Property Group
Protected Property Fitting As Long := 0 WithAttributes {PropertyGroup := "Picture", DisplayName := "Fitting", EditMode := "ENUM; 'None' := 0, 'Fit Object to Content' := 1, 'Fit Content to Object' := 2, 'Center Content' := 3, 'Fit Content Proportionally' := 4, 'Fill Object Proportionally' := 5"}
Protected Property PictureOffsetX As Long := 0 WithAttributes {PropertyGroup := "Picture", DisplayName := "OffsetX"}
Protected Property PictureOffsetY As Long := 0 WithAttributes {PropertyGroup := "Picture", DisplayName := "OffsetY"}
Protected Property Picture As AddressOf _Picture := Nothing WithAttributes {PropertyGroup := "Picture", DisplayName := "Picture"}

// Text Property Group
Protected Property Align As Long := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNVCENTER WithAttributes {PropertyGroup := "Text", DisplayName := "Align", EditMode := "ENUM; 'Left-Top' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNTOP, 'Left-Middle' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNVCENTER, 'Left-Bottom' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNBOTTOM, 'Center-Top' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNTOP, 'Center-Middle' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNVCENTER, 'Center-Bottom' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNBOTTOM, 'Right-Top' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNTOP, 'Right-Middle' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNVCENTER, 'Right-Bottom' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNBOTTOM"}
Protected Property Color As Long := _COLOR_BLACK WithAttributes {PropertyGroup := "Text", DisplayName := "Color", EditMode := "color"}
Protected Property Font As AddressOf _Font := fntDefault16 WithAttributes {PropertyGroup := "Text", DisplayName := "Font", EditMode := "font"}
Protected Property LineSpacing As Double := 1.2 WithAttributes {PropertyGroup := "Text", DisplayName := "LineSpacing"}
Protected Property TextOffsetX As Long := 0 WithAttributes {PropertyGroup := "Text", DisplayName := "OffsetX"}
Protected Property TextOffsetY As Long := 0 WithAttributes {PropertyGroup := "Text", DisplayName := "OffsetY"}
Protected Property stxText As AddressOf Text := txtCaption WithAttributes {PropertyGroup := "Text", DisplayName := "Text"}

Protected Function GetProperty()
	MObjectID			:= ObjectID
	MBackgroundColor	:= BackgroundColor
	MOpacity			:= Opacity
	MFitting			:= Fitting
	MPictureOffsetX		:= PictureOffsetX
	MPictureOffsetY		:= PictureOffsetY
	MPicture			:= Picture
	MAlign				:= Align
	MColor				:= Color
	MFont				:= Font
	MLineSpacing		:= LineSpacing
	MTextOffsetX		:= TextOffsetX
	MTextOffsetY		:= TextOffsetY
	MstxText			:= stxText
End Function

Private Function Init()
	GetProperty()
	GetPosition(OriginalX, OriginalY)
	CurrentX := OriginalX
	CurrentY := OriginalY
	
	GetSize(ObjectWidth, ObjectHeight)
	
	MyPictureBox.SetSize(ObjectWidth, ObjectHeight)
	MyPictureBox.SetPosition(PictureOffsetX, PictureOffsetY)
	MyPictureBox.SetFitting(Fitting)
	MyPictureBox.SetOpacity(Opacity)
	MyPictureBox.SetPicture(Picture)
	
	MyStaticText.SetSize(ObjectWidth, ObjectHeight)
	MyStaticText.SetPosition(TextOffsetX, TextOffsetY)
	MyStaticText.SetAlign(Align) 
	MyStaticText.SetColor(Color) 
	MyStaticText.SetFont(Font) 
 	MyStaticText.SetLineSpacing(LineSpacing) 
	MyStaticText.SetText(stxText)

	BackgroundColorDraw := SetColorComponentOpacity(BackgroundColor, GetColorComponentOpacity( BackgroundColor) * Opacity / 255)

End Function

End GraphicClass

// DragSource
// End of object -------------------------------------------------------------------------



// Start of object -----------------------------------------------------------------------
// DropDestination

Public GraphicClass DropDestination Inherits Namespace "CUE.GraphicCollection.GenericObjectsBase.3".BaseDropDestination WithAttributes {ObjectCode := "OB0062-003", DefaultWidth := 120, DefaultHeight := 80, DesignName := "Generic", GroupName := "Drag and Drop"}

// Appearance Property Group
Protected Property BackgroundColor As Long := DEFAULT_BACKGROUND_COLOR WithAttributes {PropertyGroup := "Appearance", EditMode := "color"}
Protected Property Fitting As Long := 0 WithAttributes {PropertyGroup := "Appearance", DisplayName := "Fitting", EditMode := "ENUM; 'None' := 0, 'Fit Object to Content' := 1, 'Fit Content to Object' := 2, 'Center Content' := 3, 'Fit Content Proportionally' := 4, 'Fill Object Proportionally' := 5"}
Protected Property Opacity As Byte := 255 WithAttributes {PropertyGroup := "Appearance", Displayname := "Opacity", EditMode := "opacity"}
Protected Property Picture As AddressOf _Picture := Nothing WithAttributes {PropertyGroup := "Appearance", DisplayName := "Picture"}

// Source Picture Property Group
Protected Property SourcePictureAlign As Long := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNVCENTER WithAttributes {PropertyGroup := "DragSource Picture", DisplayName := "Align", EditMode := "ENUM; 'Left-Top' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNTOP, 'Left-Middle' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNVCENTER, 'Left-Bottom' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNBOTTOM, 'Center-Top' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNTOP, 'Center-Middle' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNVCENTER, 'Center-Bottom' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNBOTTOM, 'Right-Top' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNTOP, 'Right-Middle' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNVCENTER, 'Right-Bottom' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNBOTTOM"}
Protected Property SourcePictureOffsetX As Long := 0 WithAttributes {PropertyGroup := "DragSource Picture", DisplayName := "OffsetX"}
Protected Property SourcePictureOffsetY As Long := 0 WithAttributes {PropertyGroup := "DragSource Picture", DisplayName := "OffsetY"}
Protected Property SourcePictureOpacity As Byte := 255 WithAttributes {PropertyGroup := "DragSource Picture", DisplayName := "Opacity", EditMode := "opacity"}
Protected Property SourcePictureZoom As Double := 1.0 WithAttributes {PropertyGroup := "DragSource Picture", DisplayName := "Zoom"}

// Source Text Property Group
Protected Property SourceTextAlign As Long := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNVCENTER WithAttributes {PropertyGroup := "DragSource Text", DisplayName := "Align", EditMode := "ENUM; 'Left-Top' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNTOP, 'Left-Middle' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNVCENTER, 'Left-Bottom' := _TEXT_ALIGNLEFT BitOr _TEXT_ALIGNBOTTOM, 'Center-Top' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNTOP, 'Center-Middle' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNVCENTER, 'Center-Bottom' := _TEXT_ALIGNHCENTER BitOr _TEXT_ALIGNBOTTOM, 'Right-Top' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNTOP, 'Right-Middle' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNVCENTER, 'Right-Bottom' := _TEXT_ALIGNRIGHT BitOr _TEXT_ALIGNBOTTOM"}
Protected Property SourceTextColor As Long := _COLOR_BLACK WithAttributes {PropertyGroup := "DragSource Text", DisplayName := "Color", EditMode := "color"}
Protected Property SourceTextFont As AddressOf _Font := fntDefault16 WithAttributes {PropertyGroup := "DragSource Text", DisplayName := "Font", EditMode := "font"}
Protected Property SourceTextLineSpacing As Double := 1.2 WithAttributes {PropertyGroup := "DragSource Text", DisplayName := "LineSpacing"}
Protected Property SourceTextOffsetX As Long := 0 WithAttributes {PropertyGroup := "DragSource Text", DisplayName := "OffsetX"}
Protected Property SourceTextOffsetY As Long := 0 WithAttributes {PropertyGroup := "DragSource Text", DisplayName := "OffsetY"}
Protected Property SourceTextShow As Boolean := True WithAttributes {PropertyGroup := "DragSource Text", DisplayName := "Show", EditMode := "ENUM; 'Yes' := True, 'No' := False"}

Protected Function GetProperty()
	MBackgroundColor		:= BackgroundColor
	MOpacity				:= Opacity
	MFitting				:= Fitting
	MPicture				:= Picture
	MSourcePictureAlign		:= SourcePictureAlign
	MSourcePictureOffsetX	:= SourcePictureOffsetX
	MSourcePictureOffsetY	:= SourcePictureOffsetY
	MSourcePictureOpacity	:= SourcePictureOpacity
	MSourcePictureZoom		:= SourcePictureZoom
	MSourceTextAlign		:= SourceTextAlign
	MSourceTextColor		:= SourceTextColor
	MSourceTextFont			:= SourceTextFont
	MSourceTextLineSpacing	:= SourceTextLineSpacing
	MSourceTextOffsetX		:= SourceTextOffsetX
	MSourceTextOffsetY		:= SourceTextOffsetY
	MSourceTextShow			:= SourceTextShow
End Function

Private Function Init()
	GetProperty()
	GetSize(ObjectWidth, ObjectHeight)
	GetPosition(CurrentX, CurrentY)

	BackgroundColorDraw := SetColorComponentOpacity(BackgroundColor, GetColorComponentOpacity( BackgroundColor) * Opacity / 255)

	SetGraphics()	
	SourceStaticText.SetText(txtSourceCaption)	

	StartProcess SetSourceStaticText()

End Function

End GraphicClass

// DropDestination
// End of object -------------------------------------------------------------------------

// DragSource And DropDestination
// End of group ******************************************************************* 



// Start of group ***************************************************************** 
// Sliders
// Revised: 18.6.2012
// Author: Miroslav Pechl√°t


// Start of object -----------------------------------------------------------------------
// VerticalSlider

Global GraphicClass VerticalSlider Inherits Namespace "CUE.GraphicCollection.GenericObjectsBase.3".BaseVerticalSlider WithAttributes {DisplayName := "VerticalSlider", ObjectCode := "OB0064-003", DefaultWidth := 40, DefaultHeight := 160, DesignName := "Generic", GroupName := "Sliders"}
// Global constant declaration
Global Const SLIDER_BACKGROUND_COLOR As Long := &HFFC0C0C0	// 3D Slider face color
Global Const SLIDER_FLOOD_COLOR As Long := &HFFFF0000	// 3D Slider flood color
Global Const SLIDER_HIGHLIGHT_COLOR As Long := &HFFFFFFFF	// 3D Slider highlight color
Global Const SLIDER_SHADOW_COLOR As Long := _COLOR_GREY	// 3D Slider shadow color

// Appearance Property Group
Protected Property BackgroundColor As Long := SLIDER_BACKGROUND_COLOR WithAttributes {PropertyGroup := "Appearance", EditMode := "color"}
Protected Property BackgroundPicture As AddressOf _Picture := Nothing WithAttributes {PropertyGroup := "Appearance"}
Protected Property BevelWidth As Long := 4 WithAttributes {PropertyGroup := "Appearance"}
Protected Property FloodColor As Long := SLIDER_FLOOD_COLOR WithAttributes {PropertyGroup := "Appearance", EditMode := "color"}
Protected Property FloodPicture As AddressOf _Picture := Nothing WithAttributes {PropertyGroup := "Appearance"}
Protected Property FloodStyle As Long := 0 WithAttributes {PropertyGroup := "Appearance", DisplayName := "FloodStyle",  EditMode := "ENUM; 'Cut Off' := 0, 'Round Off' := 1"}
Protected Property HighlightColor As Long := SLIDER_HIGHLIGHT_COLOR WithAttributes {PropertyGroup := "Appearance", EditMode := "color"}
Protected Property KnobPicture As AddressOf _Picture := Nothing WithAttributes {PropertyGroup := "Appearance"}
Protected Property Opacity As Byte := 255 WithAttributes {PropertyGroup := "Appearance", EditMode := "opacity"}
Protected Property ShadowColor As Long := SLIDER_SHADOW_COLOR WithAttributes {PropertyGroup := "Appearance", EditMode := "color"}

// Appearance Property Group
Protected Property AspectRatioMaximum As Double := 1.000 WithAttributes {PropertyGroup := "Appearance"}
Protected Property AspectRatioMinimum As Double := 0.100 WithAttributes {PropertyGroup := "Appearance"}
Protected Property VerticalFloodType As Long := FLOOD_BOTTOMTOTOP WithAttributes {PropertyGroup := "Appearance", DisplayName := "FloodType",  EditMode := "ENUM; 'BottomToTop' := 3, 'TopToBottom' := 4"}

// Scale Property Group
Protected Property Maximum As Double := 100 WithAttributes {PropertyGroup := "Scale"}
Protected Property Minimum As Double := 0 WithAttributes {PropertyGroup := "Scale"}
Protected Property StepValue As Double := 0 WithAttributes {PropertyGroup := "Scale"}

// Behavior Property Group
Protected Property ActiveTouchZoneSize As Long := 10 WithAttributes {PropertyGroup := "Behavior", EditMode := "ENUM; '1 %' := 1, '2 %' := 2, '5 %' := 5, '10 %' := 10, '15 %' := 15, '20 %' := 20"}
Protected Property AutoSetValue As Boolean := False WithAttributes {PropertyGroup := "Behavior"}
Protected Property DefaultValue As Double := (Minimum + Maximum) / 2 WithAttributes {PropertyGroup := "Behavior"}
Protected Property Events As Boolean := True WithAttributes {PropertyGroup := "Behavior", EditMode := "Boolean; 'Yes' := True, 'No' := False"}
Protected Property SnapBackTime As Time := :1.0 WithAttributes {PropertyGroup := "Behavior", EditMode := "TimeInterval"}
Protected Property SnapToFinger As Boolean := True WithAttributes {PropertyGroup := "Behavior", EditMode := "Boolean; 'Yes' := True, 'No' := False"}

Protected Function GetProperty()
	MAspectRatioMaximum			:= AspectRatioMaximum
	MAspectRatioMinimum			:= AspectRatioMinimum
//	MVerticalFloodType			:= VerticalFloodType
	MFloodType					:= VerticalFloodType
	ActualValue					:= DefaultValue
	
	MBackgroundColor			:= BackgroundColor
	MBackgroundPicture			:= BackgroundPicture
	MBevelWidth					:= BevelWidth
	MFloodColor					:= FloodColor
	MFloodPicture				:= FloodPicture
	MFloodStyle					:= FloodStyle
	MHighlightColor				:= HighlightColor
	MKnobPicture				:= KnobPicture
	MOpacity					:= Opacity
	MShadowColor				:= ShadowColor
	MMaximum					:= Maximum
	MMinimum					:= Minimum
	MActiveTouchZoneSize		:= ActiveTouchZoneSize
	MStepValue					:= StepValue
	MAutoSetValue				:= AutoSetValue
	
	MDefaultValue				:= DefaultValue
	CurrentValue				:= DefaultValue
	PreviousValue				:= DefaultValue
	RealValue					:= DefaultValue
	MEvents						:= Events
	MSnapBackTime				:= SnapBackTime
	MSnapToFinger				:= SnapToFinger
	
	SetValue(DefaultValue)
End Function

Private Function Init()
	GetProperty()
	UpdateDrawColors()
//	SetBevelWidth(MBevelWidth)
	SetDrawParameters()
	RedrawCompoundObject()	
End Function


Public Function SetActiveTouchZoneSize(newactivetouchzonesize As Long) As Boolean
	Select newactivetouchzonesize
		Case 1, 2, 5, 10, 15, 20
			MActiveTouchZoneSize := newactivetouchzonesize
			Return Value True

		Case Else
			Return Value False
	End Select 	
End Function

Public Function GetActiveTouchZoneSize() As Long
	Return Value MActiveTouchZoneSize	
End Function

Public Function SetAutoSetValue(newautosetvalue As Boolean) As Boolean
	MAutoSetValue := newautosetvalue
	Return Value True
End Function

Public Function GetAutoSetValue() As Boolean
	Return Value MAutoSetValue
End Function

Public Function SetBackgroundColor(newbackgroundcolor As Long) As Boolean
	MBackgroundColor := newbackgroundcolor
	UpdateDrawColors()
	Redraw()
	Return Value True	
End Function

Public Function GetBackgroundColor() As Long
	Return Value MBackgroundColor	
End Function

Public Function SetBackgroundPicture(newbackgroundpicture As AddressOf _Picture) As Boolean
	MBackgroundPicture := newbackgroundpicture
	SetDrawParameters()
	RedrawCompoundObject()
	Return Value True	
End Function

Public Function GetBackgroundPicture() As AddressOf _Picture
	Return Value MBackgroundPicture	
End Function

Public Function SetBevelWidth(newbevelwidth As Long) As Boolean
	Return Value Namespace "CUE.GraphicCollection.GenericObjectsBase.3".BaseVerticalSlider.SetBevelWidth(newbevelwidth)
End Function

Public Function GetBevelWidth() As Long
	Return Value Namespace "CUE.GraphicCollection.GenericObjectsBase.3".BaseVerticalSlider.GetBevelWidth()
End Function

Public Function SetFloodColor(newfloodcolor As Long) As Boolean
	MFloodColor := newfloodcolor
	UpdateDrawColors()
	Redraw()
	Return Value True	
End Function

Public Function GetFloodColor() As Long
	Return Value MFloodColor	
End Function

Public Function SetFloodPicture(newfloodpicture As AddressOf _Picture) As Boolean
	MFloodPicture := newfloodpicture
	SetDrawParameters()
	RedrawCompoundObject()
	Return Value True	
End Function

Public Function GetFloodPicture() As AddressOf _Picture
	Return Value MFloodPicture	
End Function

Public Function SetFloodStyle(newfloodstyle As Long) As Boolean
	If newfloodstyle >= 0 And newfloodstyle <= 1 Then
		MFloodStyle := newfloodstyle
		SetDrawParameters()
		RedrawCompoundObject()
		Return Value True
	Else
		Return Value False
	End If	
End Function

Public Function GetFloodStyle() As Long
	Return Value MFloodStyle	
End Function

Public Function SetHighlightColor(newhighlightcolor As Long) As Boolean
	MHighlightColor := newhighlightcolor
	UpdateDrawColors()
	Redraw()
	Return Value True	
End Function

Public Function GetHighlightColor() As Long
	Return Value MHighlightColor	
End Function

Public Function SetKnobPicture(newknobpicture As AddressOf _Picture) As Boolean
	MKnobPicture := newknobpicture
	SetDrawParameters()
	RedrawCompoundObject()
	Return Value True	
End Function

Public Function GetKnobPicture() As AddressOf _Picture
	Return Value MKnobPicture	
End Function

Public Function SetShadowColor(newshadowcolor As Long) As Boolean
	MShadowColor := newshadowcolor
	UpdateDrawColors()
	Redraw()
	Return Value True	
End Function

Public Function GetShadowColor() As Long
	Return Value MShadowColor	
End Function

Public Function SetOpacity(newopacity As Byte) As Boolean
//oprava 22.6.2015
	MOpacity := newopacity
	UpdateDrawColors()
	SetDrawParameters()
	RedrawCompoundObject()
	Return Value True	
End Function

Public Function GetOpacity() As Byte
	Return Value MOpacity	
End Function
End GraphicClass

// VerticalSlider
// End of object -------------------------------------------------------------------------


// Start of object -----------------------------------------------------------------------
// HorizontalSlider

Global GraphicClass HorizontalSlider Inherits Namespace "CUE.GraphicCollection.GenericObjectsBase.3".BaseHorizontalSlider WithAttributes {DisplayName := "HorizontalSlider", ObjectCode := "OB0063-003", DefaultWidth := 160, DefaultHeight := 40, DesignName := "Generic", GroupName := "Sliders"}
// Global constant declaration
Global Const SLIDER_BACKGROUND_COLOR As Long := &HFFC0C0C0	// 3D Slider face color
Global Const SLIDER_FLOOD_COLOR As Long := &HFFFF0000	// 3D Slider flood color
Global Const SLIDER_HIGHLIGHT_COLOR As Long := &HFFFFFFFF	// 3D Slider highlight color
Global Const SLIDER_SHADOW_COLOR As Long := _COLOR_GREY	// 3D Slider shadow color

// Appearance Property Group
Protected Property BackgroundColor As Long := SLIDER_BACKGROUND_COLOR WithAttributes {PropertyGroup := "Appearance", EditMode := "color"}
Protected Property BackgroundPicture As AddressOf _Picture := Nothing WithAttributes {PropertyGroup := "Appearance"}
Protected Property BevelWidth As Long := 4 WithAttributes {PropertyGroup := "Appearance"}
Protected Property FloodColor As Long := SLIDER_FLOOD_COLOR WithAttributes {PropertyGroup := "Appearance", EditMode := "color"}
Protected Property FloodPicture As AddressOf _Picture := Nothing WithAttributes {PropertyGroup := "Appearance"}
Protected Property FloodStyle As Long := 0 WithAttributes {PropertyGroup := "Appearance", DisplayName := "FloodStyle",  EditMode := "ENUM; 'Cut Off' := 0, 'Round Off' := 1"}
Protected Property HighlightColor As Long := SLIDER_HIGHLIGHT_COLOR WithAttributes {PropertyGroup := "Appearance", EditMode := "color"}
Protected Property KnobPicture As AddressOf _Picture := Nothing WithAttributes {PropertyGroup := "Appearance"}
Protected Property Opacity As Byte := 255 WithAttributes {PropertyGroup := "Appearance", EditMode := "opacity"}
Protected Property ShadowColor As Long := SLIDER_SHADOW_COLOR WithAttributes {PropertyGroup := "Appearance", EditMode := "color"}

// Appearance Property Group
Protected Property AspectRatioMaximum As Double := 10.000 WithAttributes {PropertyGroup := "Appearance"}
Protected Property AspectRatioMinimum As Double := 1.000 WithAttributes {PropertyGroup := "Appearance"}
Protected Property HorizontalFloodType As Long := FLOOD_LEFTTORIGHT WithAttributes {PropertyGroup := "Appearance", DisplayName := "FloodType",  EditMode := "ENUM; 'LeftToRight' := 1, 'RightToLeft' := 2"}

// Scale Property Group
Protected Property Maximum As Double := 100 WithAttributes {PropertyGroup := "Scale"}
Protected Property Minimum As Double := 0 WithAttributes {PropertyGroup := "Scale"}
Protected Property StepValue As Double := 0 WithAttributes {PropertyGroup := "Scale"}

// Behavior Property Group
Protected Property ActiveTouchZoneSize As Long := 10 WithAttributes {PropertyGroup := "Behavior", EditMode := "ENUM; '1 %' := 1, '2 %' := 2, '5 %' := 5, '10 %' := 10, '15 %' := 15, '20 %' := 20"}
Protected Property AutoSetValue As Boolean := False WithAttributes {PropertyGroup := "Behavior"}
Protected Property DefaultValue As Double := (Minimum + Maximum) / 2 WithAttributes {PropertyGroup := "Behavior"}
Protected Property Events As Boolean := True WithAttributes {PropertyGroup := "Behavior", EditMode := "Boolean; 'Yes' := True, 'No' := False"}
Protected Property SnapBackTime As Time := :1.0 WithAttributes {PropertyGroup := "Behavior", EditMode := "TimeInterval"}
Protected Property SnapToFinger As Boolean := True WithAttributes {PropertyGroup := "Behavior", EditMode := "Boolean; 'Yes' := True, 'No' := False"}

Protected Function GetProperty()
	MAspectRatioMaximum		:= AspectRatioMaximum
	MAspectRatioMinimum		:= AspectRatioMinimum
//	MHorizontalFloodType	:= HorizontalFloodType
	MFloodType					:= HorizontalFloodType
	ActualValue					:= DefaultValue
	
	MBackgroundColor			:= BackgroundColor
	MBackgroundPicture			:= BackgroundPicture
	MBevelWidth					:= BevelWidth
	MFloodColor					:= FloodColor
	MFloodPicture				:= FloodPicture
	MFloodStyle					:= FloodStyle
	MHighlightColor				:= HighlightColor
	MKnobPicture				:= KnobPicture
	MOpacity					:= Opacity
	MShadowColor				:= ShadowColor
	MMaximum					:= Maximum
	MMinimum					:= Minimum
	MActiveTouchZoneSize		:= ActiveTouchZoneSize
	MStepValue					:= StepValue
	MAutoSetValue				:= AutoSetValue
	MDefaultValue				:= DefaultValue
	CurrentValue				:= DefaultValue
	PreviousValue				:= DefaultValue
	RealValue					:= DefaultValue
	MEvents						:= Events
	MSnapBackTime				:= SnapBackTime
	MSnapToFinger				:= SnapToFinger
	
	SetValue(DefaultValue)
End Function

Private Function Init()
	GetProperty()
	UpdateDrawColors()
//	SetBevelWidth(MBevelWidth)	
	SetDrawParameters()
	RedrawCompoundObject()	
End Function

Public Function SetActiveTouchZoneSize(newactivetouchzonesize As Long) As Boolean
	Select newactivetouchzonesize
		Case 1, 2, 5, 10, 15, 20
			MActiveTouchZoneSize := newactivetouchzonesize
			Return Value True

		Case Else
			Return Value False
	End Select 	
End Function

Public Function GetActiveTouchZoneSize() As Long
	Return Value MActiveTouchZoneSize	
End Function

Public Function SetAutoSetValue(newautosetvalue As Boolean) As Boolean
	MAutoSetValue := newautosetvalue
	Return Value True
End Function

Public Function GetAutoSetValue() As Boolean
	Return Value MAutoSetValue
End Function

Public Function SetBackgroundColor(newbackgroundcolor As Long) As Boolean
	MBackgroundColor := newbackgroundcolor
	UpdateDrawColors()
	Redraw()
	Return Value True	
End Function

Public Function GetBackgroundColor() As Long
	Return Value MBackgroundColor	
End Function

Public Function SetBackgroundPicture(newbackgroundpicture As AddressOf _Picture) As Boolean
	MBackgroundPicture := newbackgroundpicture
	SetDrawParameters()
	RedrawCompoundObject()
	Return Value True	
End Function

Public Function GetBackgroundPicture() As AddressOf _Picture
	Return Value MBackgroundPicture	
End Function

Public Function SetBevelWidth(newbevelwidth As Long) As Boolean
	Return Value Namespace "CUE.GraphicCollection.GenericObjectsBase.3".BaseHorizontalSlider.SetBevelWidth(newbevelwidth)
End Function

Public Function GetBevelWidth() As Long
	Return Value Namespace "CUE.GraphicCollection.GenericObjectsBase.3".BaseHorizontalSlider.GetBevelWidth()
End Function

Public Function SetFloodColor(newfloodcolor As Long) As Boolean
	MFloodColor := newfloodcolor
	UpdateDrawColors()
	Redraw()
	Return Value True	
End Function

Public Function GetFloodColor() As Long
	Return Value MFloodColor	
End Function

Public Function SetFloodPicture(newfloodpicture As AddressOf _Picture) As Boolean
	MFloodPicture := newfloodpicture
	SetDrawParameters()
	RedrawCompoundObject()
	Return Value True	
End Function

Public Function GetFloodPicture() As AddressOf _Picture
	Return Value MFloodPicture	
End Function

Public Function SetFloodStyle(newfloodstyle As Long) As Boolean
	If newfloodstyle >= 0 And newfloodstyle <= 1 Then
		MFloodStyle := newfloodstyle
		SetDrawParameters()
		RedrawCompoundObject()
		Return Value True
	Else
		Return Value False
	End If	
End Function

Public Function GetFloodStyle() As Long
	Return Value MFloodStyle	
End Function

Public Function SetHighlightColor(newhighlightcolor As Long) As Boolean
	MHighlightColor := newhighlightcolor
	UpdateDrawColors()
	Redraw()
	Return Value True	
End Function

Public Function GetHighlightColor() As Long
	Return Value MHighlightColor	
End Function

Public Function SetKnobPicture(newknobpicture As AddressOf _Picture) As Boolean
	MKnobPicture := newknobpicture
	SetDrawParameters()
	RedrawCompoundObject()
	Return Value True	
End Function

Public Function GetKnobPicture() As AddressOf _Picture
	Return Value MKnobPicture	
End Function

Public Function SetShadowColor(newshadowcolor As Long) As Boolean
	MShadowColor := newshadowcolor
	UpdateDrawColors()
	Redraw()
	Return Value True	
End Function

Public Function GetShadowColor() As Long
	Return Value MShadowColor	
End Function

Public Function SetOpacity(newopacity As Byte) As Boolean
//oprava 22.6.2015
	MOpacity := newopacity
	UpdateDrawColors()
	SetDrawParameters()
	RedrawCompoundObject()
	Return Value True	
End Function

Public Function GetOpacity() As Byte
	Return Value MOpacity	
End Function

End GraphicClass

// HorizontalSlider
// End of object -------------------------------------------------------------------------


// Sliders
// End of group ******************************************************************* 



// Start of group ***************************************************************** 
// ProgressIndicators
// Revised: 24.8.2011
// Author: Miroslav Pechl√°t


// Start of object -----------------------------------------------------------------------
// MarqueeProgressIndicator

Global GraphicClass MarqueeProgressIndicator Inherits Namespace "CUE.GraphicCollection.GenericObjectsBase.3".BaseMarqueeProgressIndicator  WithAttributes {DisplayName := "MarqueeProgressIndicator", ObjectCode := "OB0066-003", DefaultWidth := 32, DefaultHeight := 32, DesignName := "Generic", GroupName := "Progress bars"}
// Behavior Property Group
Protected Property Events As Boolean := False WithAttributes {PropertyGroup := "Behavior", EditMode := "Boolean; 'Yes' := True, 'No' := False"}
Protected Property FrameRate As Double := 8 WithAttributes {PropertyGroup := "Behavior", DisplayName := "FrameRate" }

// Appearance Property Group
Protected Property Color As Long := _COLOR_BLACK WithAttributes {PropertyGroup := "Appearance", EditMode := "color"}
Protected Property Opacity As Byte := 255 WithAttributes {PropertyGroup := "Appearance", EditMode := "opacity"}

Protected Function GetProperty()
	MEvents			:= Events
	MFrameRate		:= FrameRate
	MColor			:= Color
	MOpacity		:= Opacity
End Function

Private Function Init()
	GetProperty()
	UpdateDrawColors()
	SetDrawParameters()
	SetFrameRate(FrameRate)
End Function

Public Function SetColor(newcolor As Long) As Boolean
	MColor := newcolor
	UpdateDrawColors()
	Redraw()
	Return Value True	
End Function

Public Function GetColor() As Long
	Return Value MColor	
End Function

Public Function SetOpacity(newopacity As Byte) As Boolean
	MOpacity := newopacity
	UpdateDrawColors()
	Redraw()
	Return Value True	
End Function

Public Function GetOpacity() As Byte
	Return Value MOpacity	
End Function

End GraphicClass

// MarqueeProgressIndicator
// End of object -------------------------------------------------------------------------


// ProgressIndicators
// End of group ******************************************************************* 



// Start of group ***************************************************************** 
// Indicators
// Revised: 30.11.2011
// Author: Miroslav Pechlat


// Start of object -----------------------------------------------------------------------
// Indicator

Public GraphicClass Indicator Inherits Namespace "CUE.GraphicCollection.GenericObjectsBase.3".BaseIndicator WithAttributes {ObjectCode := "OB0067-003", DefaultWidth := 20, DefaultHeight := 20, DesignName := "Generic", GroupName := "Indicators"}

// Appearance Property Group
Protected Property ActiveColor As Long := _COLOR_RED WithAttributes {PropertyGroup := "Appearance", EditMode := "color"}
Protected Property ActivePicture As AddressOf _Picture := Nothing WithAttributes {PropertyGroup := "Appearance"}
Protected Property ConstrainProportion As Boolean := True WithAttributes {PropertyGroup := "Appearance"}
Protected Property NonActiveColor As Long := _COLOR_GREY WithAttributes {PropertyGroup := "Appearance", EditMode := "color"}
Protected Property NonActivePicture As AddressOf _Picture := Nothing WithAttributes {PropertyGroup := "Appearance"}
Protected Property Opacity As Byte := 255 WithAttributes {PropertyGroup := "Appearance", EditMode := "opacity"}

// Behavior Property Group
Protected Property BlinkDutyCycle As Byte := 128 WithAttributes {PropertyGroup := "Behavior", EditMode := "opacity"}
Protected Property BlinkPeriod As Time := :0 WithAttributes {PropertyGroup := "Behavior", EditMode := "TimeInterval"}
Protected Property Events As Boolean := False WithAttributes {PropertyGroup := "Behavior", EditMode := "Boolean; 'Yes' := True, 'No' := False"}
Protected Property IndicatorValue As Boolean := False WithAttributes {PropertyGroup := "Behavior", DisplayName := "Value"}

Protected Function GetProperty()
	MActiveColor			:= ActiveColor
	MActivePicture			:= ActivePicture
	MConstrainProportion	:= ConstrainProportion
	MNonActiveColor			:= NonActiveColor
	MNonActivePicture		:= NonActivePicture
	MOpacity				:= Opacity
	MBlinkDutyCycle			:= BlinkDutyCycle
	MBlinkPeriod			:= BlinkPeriod
	MEvents					:= Events
	MIndicatorValue			:= IndicatorValue
End Function

Protected Function Init()
	GetProperty()
	UpdateDimensions()
	UpdateDrawColors()
	SetBlinkPeriod(BlinkPeriod)
End Function

Public Function SetActiveColor(newactivecolor As Long) As Boolean
	MActiveColor := newactivecolor
	UpdateDrawColors()
	Redraw()
	Return Value True	
End Function

Public Function GetActiveColor() As Long
	Return Value MActiveColor	
End Function

Public Function SetActivePicture(newactivepicture As AddressOf _Picture) As Boolean
	MActivePicture := newactivepicture
	Redraw()
	Return Value True	
End Function

Public Function GetActivePicture() As AddressOf _Picture
	Return Value MActivePicture	
End Function

Public Function SetConstrainProportion(newconstrainproportion As Boolean) As Boolean
	MConstrainProportion := newconstrainproportion
	Redraw()
	Return Value True
End Function

Public Function GetConstrainProportion() As Boolean
	Return Value MConstrainProportion
End Function

Public Function SetNonActiveColor(newnonactivecolor As Long) As Boolean
	MNonActiveColor := newnonactivecolor
	UpdateDrawColors()
	Redraw()
	Return Value True	
End Function

Public Function GetNonActiveColor() As Long
	Return Value MNonActiveColor	
End Function

Public Function SetNonActivePicture(newnonactivepicture As AddressOf _Picture) As Boolean
	MNonActivePicture := newnonactivepicture
	Redraw()
	Return Value True	
End Function

Public Function GetNonActivePicture() As AddressOf _Picture
	Return Value MNonActivePicture	
End Function

Public Function SetOpacity(newopacity As Byte) As Boolean
	MOpacity := newopacity
	Redraw()
	Return Value True	
End Function

Public Function GetOpacity() As Byte
	Return Value MOpacity	
End Function

End GraphicClass

// Indicator
// End of object -------------------------------------------------------------------------

// Indicators
// End of group ******************************************************************* 

// GenericObjects
// End of collection ******************************************************************* 
