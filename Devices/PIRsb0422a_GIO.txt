Global DeviceClass PIRsb0422a_GIO
Connector GeneralIOConnector

Protected Property unitId As Long := 0 WithAttributes
{
	PropertyGroup := "PIR sensor",
	DisplayName := "UnitID"
}

Protected Property timeWindow As Time := 1:20 WithAttributes
{
	PropertyGroup := "PIR sensor",
	DisplayName := "Time Window",
	EditMode := "TimeInterval"
}

Protected Property eventsInTimeWinwdowForAlarm As Long := 1 WithAttributes
{
	PropertyGroup := "PIR sensor",
	DisplayName := "Events count"
}

//Protected Property pirCheckPeriod As Time := 1:20 WithAttributes
//{
//	PropertyGroup := "PIR sensor",
//	DisplayName := "Checking interval",
//	EditMode := "TimeInterval"
//}

Protected Property tresholdVoltage As Double := 1.5 WithAttributes
{
	PropertyGroup := "PIR sensor",
	DisplayName := "Treshold Voltage"
}

Var timeCounter As Time
Var eventCounter As Long := 0
Var isTimeWindow As Boolean := False

Global Event Alarm As Process (unitID As Long, alarmTime As Time )
Global Event OnClose As Process ()
Global Event OnOpen As Process ()

Private Function Init ()
//	GeneralIOConnector.PullUpOn ()
	GeneralIOConnector.Open ()
	StartProcess IOCheck ()
End Function


Private Process IOCheck()
	Do
		GeneralIOConnector.WaitWhileVoltageInRange (tresholdVoltage * 0.9 ,1000)
		If GeneralIOConnector.GetVoltage() < tresholdVoltage Then RaiseEvent OnClose() End If
		GeneralIOConnector.WaitWhileVoltageInRange (0,tresholdVoltage * 1.1)
		If GeneralIOConnector.GetVoltage() > tresholdVoltage  Then 
			RaiseEvent OnOpen() 
			checkAlarm()
		End If
		Wait(:0.1)
	End Do
End Process


Private Function checkAlarm ()
	If Not isTimeWindow Then
		StopProcess runTimeWindow ()
		eventCounter := eventsInTimeWinwdowForAlarm
		StartProcess runTimeWindow ()
	End If
	eventCounter -= 1
	If eventCounter = 0 Then
		StopProcess runTimeWindow ()
		isTimeWindow := False
		RaiseEvent Alarm(unitId, GetLocalTime())
	End If
End Function

Private Process runTimeWindow()
	isTimeWindow := True	
		Wait(timeWindow)
	isTimeWindow := False
End Process




End DeviceClass
